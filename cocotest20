import os
import zipfile
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.styles import PatternFill

# -----------------------------------------
# 1) READ EXCLUSION TABLE
# -----------------------------------------
def read_exclusion_table(ex_table_path: Path) -> set:
    """
    Reads an Excel file with columns: [Key, hide exception].
    Returns a set of keys to exclude where hide exception == 'yes'.
    """
    if not ex_table_path.is_file():
        print(f"[Exclusion] File not found: {ex_table_path}. No exclusions used.")
        return set()

    df_ex = pd.read_excel(ex_table_path, sheet_name="Sheet1")
    if "Key" not in df_ex.columns or "hide exception" not in df_ex.columns:
        print("[Exclusion] Missing 'Key' or 'hide exception' columns. No exclusions.")
        return set()ad

    mask = df_ex["hide exception"].astype(str).str.lower() == "yes"
    excluded_keys = set(df_ex.loc[mask, "Key"].dropna().unique())
    return excluded_keys


# -----------------------------------------
# 2) PRE-MELT FILTER (Remove Rows by Column)
# -----------------------------------------
def filter_pre_melt(df: pd.DataFrame, exclude_rules: list = None) -> pd.DataFrame:
    """
    exclude_rules: list of (columnName, [values_to_remove]).
      We remove any row if df[columnName] is in values_to_remove (logical OR across rules).
    Example: [("ColA", ["X"]), ("ColB", ["Y"])] => remove if ColA=="X" OR ColB=="Y".
    """
    if not exclude_rules:
        return df  # no filtering if none

    combined_mask = pd.Series(False, index=df.index)
    for (col, bad_values) in exclude_rules:
        if col in df.columns:
            combined_mask |= df[col].isin(bad_values)

    # Keep rows where combined_mask is False
    df_out = df[~combined_mask]
    return df_out


# -----------------------------------------
# 3) POST-MELT EXCLUDE (Dimension/Attribute)
# -----------------------------------------
def exclude_dimension_attribute(df: pd.DataFrame,
                                bad_dimensions: list = None,
                                bad_attributes: list = None) -> pd.DataFrame:
    """
    Remove any row whose Dimension is in bad_dimensions OR Attribute is in bad_attributes.
    """
    if bad_dimensions:
        df = df[~df["Dimension"].isin(bad_dimensions)]
    if bad_attributes:
        df = df[~df["Attribute"].isin(bad_attributes)]
    return df


# -----------------------------------------
# 4) TRANSFORM ALFA
# -----------------------------------------
def transform_alfa(
    file_path: Path,
    excluded_keys: set,
    pre_melt_exclude_rules: list = None,
    post_melt_bad_dimensions: list = None,
    post_melt_bad_attributes: list = None,
    dimension_rename_dict: dict = None,
    attribute_rename_dict: dict = None,
    sheet_name: str = "Sheet1",
    skip_rows: int = 3
) -> pd.DataFrame:
    """
    Steps:
      1) Read Excel
      2) Pre-melt filter (remove rows by certain columns)
      3) Rename col[2] => Dimension, col[3] => First 
      4) Melt => Dimension as ID var only => 'First' becomes an attribute named "Name" (via rename dict).
      5) Rename Dimension/Attribute values
      6) Exclude certain Dimensions/Attributes
      7) Create a separate "NameID" column from the row where Attribute="Name", fill down
      8) Build Key, exclude from ex_table, remove duplicates
      9) Return final columns: [Key, Dimension, NameID, Attribute, Value]
    """
    if not file_path.is_file():
        print(f"[Alfa] File not found: {file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

    # 1) Read Excel
    df = pd.read_excel(file_path, sheet_name=sheet_name, skiprows=skip_rows)
    if df.shape[1] < 4:
        print("[Alfa] Warning: fewer than 4 columns. Returning empty.")
        return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

    # 2) Pre-melt exclude
    df = filter_pre_melt(df, pre_melt_exclude_rules)

    # 3) Rename columns => col[2]->Dimension, col[3]->First

    df.rename(columns={
        df.columns[2]: "Dimension",
        df.columns[3]: "First"
    }, inplace=True)

    # 4) Melt
    id_vars = ["Dimension"]
    val_vars = [c for c in df.columns if c not in id_vars]
    df_melt = df.melt(
        id_vars=id_vars,
        value_vars=val_vars,
        var_name="Attribute",
        value_name="Value"
    )

    # 5) Rename dimension/attribute if needed
    if dimension_rename_dict:
        df_melt["Dimension"] = df_melt["Dimension"].replace(dimension_rename_dict)
    if attribute_rename_dict:
        df_melt["Attribute"] = df_melt["Attribute"].replace(attribute_rename_dict)

    # 6) Exclude certain dimension/attribute
    df_melt = exclude_dimension_attribute(
        df_melt,
        bad_dimensions=post_melt_bad_dimensions,
        bad_attributes=post_melt_bad_attributes
    )

    # 7) Create "NameID" from the row where Attribute=="Name"
    name_mask = (df_melt["Attribute"] == "Name")  # "Name" is the attribute rename for 'First'
    df_melt.loc[name_mask, "NameID"] = df_melt.loc[name_mask, "Value"]
    df_melt["NameID"] = df_melt.groupby("Dimension")["NameID"].ffill()


    # df_melt = df_melt[~name_mask]


    # 8) Build Key
    df_melt["Key"] = df_melt.apply(
        lambda row: f"{row['Dimension']} | {row['NameID']} | {row['Attribute']} | {row['Value']}",
        axis=1
    )

    # Exclude keys from ex_table
    df_melt = df_melt[~df_melt["Key"].isin(excluded_keys)]
    df_melt.drop_duplicates(subset=["Key"], inplace=True)

    # Final columns
    df_melt = df_melt[["Key", "Dimension", "NameID", "Attribute", "Value"]]
    return df_melt


# -----------------------------------------
# 5) TRANSFORM GAMMA (Similar to ALFA)
# -----------------------------------------
def transform_gamma(
    zip_file_path: Path,
    excluded_keys: set,
    pre_melt_exclude_rules: list = None,
    post_melt_bad_dimensions: list = None,
    post_melt_bad_attributes: list = None,
    dimension_rename_dict: dict = None,
    attribute_rename_dict: dict = None,
    delimiter: str = ",",
    remove_substring: str = "_ceaster.txt"
) -> pd.DataFrame:
    """
    1) Read .txt files from ZIP as CSV
    2) Pre-melt exclude
    3) 'Dimension' from filename
    4) Melt => 'Dimension' only as ID => 'First' becomes an attribute => rename to "Name"
    5) Rename dimension/attribute
    6) Exclude certain dimension/attribute
    7) Create "NameID" from rows where Attribute="Name"
    8) Build Key, exclude keys, etc.
    Returns [Key, Dimension, NameID, Attribute, Value].
    """
    if not zip_file_path.is_file():
        print(f"[Gamma] ZIP not found: {zip_file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

    def compute_dimension_name(filename: str, remove_sub: str) -> str:
        base = os.path.basename(filename)
        if remove_sub in base:
            base = base.replace(remove_sub, "")
        else:
            base, _ = os.path.splitext(base)
        return base.replace("_", " ")

    all_dfs = []
    try:
        with zipfile.ZipFile(zip_file_path, "r") as z:
            txt_files = [f for f in z.namelist() if f.endswith(".txt")]
            if not txt_files:
                print("[Gamma] No .txt files found in the ZIP.")
                return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

            for txt_file in txt_files:
                dim_name = compute_dimension_name(txt_file, remove_substring)

                with z.open(txt_file) as fo:
                    df_in = pd.read_csv(fo, delimiter=delimiter)
                if df_in.empty:
                    continue

                # Pre-melt exclude
                df_in = filter_pre_melt(df_in, pre_melt_exclude_rules)

                # Insert 'Dimension' from filename
                df_in["Dimension"] = dim_name

                # Melt
                id_vars = ["Dimension"]
                val_vars = [c for c in df_in.columns if c not in id_vars]
                dfa = df_in.melt(
                    id_vars=id_vars,
                    value_vars=val_vars,
                    var_name="Attribute",
                    value_name="Value"
                )

                # Rename dimension/attribute
                if dimension_rename_dict:
                    dfa["Dimension"] = dfa["Dimension"].replace(dimension_rename_dict)
                if attribute_rename_dict:
                    dfa["Attribute"] = dfa["Attribute"].replace(attribute_rename_dict)

                # Exclude dimension/attribute
                dfa = exclude_dimension_attribute(
                    dfa,
                    bad_dimensions=post_melt_bad_dimensions,
                    bad_attributes=post_melt_bad_attributes
                )

                # Create "NameID" from rows where Attribute="Name"
                name_mask = (dfa["Attribute"] == "Name")
                dfa.loc[name_mask, "NameID"] = dfa.loc[name_mask, "Value"]
                dfa["NameID"] = dfa.groupby("Dimension")["NameID"].ffill()

                # Build Key
                dfa["Key"] = dfa.apply(
                    lambda row: f"{row['Dimension']} | {row['NameID']} | {row['Attribute']} | {row['Value']}",
                    axis=1
                )

                # Exclude keys
                dfa = dfa[~dfa["Key"].isin(excluded_keys)]
                dfa.drop_duplicates(subset=["Key"], inplace=True)

                dfa = dfa[["Key", "Dimension", "NameID", "Attribute", "Value"]]
                all_dfs.append(dfa)

        if not all_dfs:
            return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

        df_gamma = pd.concat(all_dfs, ignore_index=True)
        df_gamma.drop_duplicates(subset=["Key"], inplace=True)
        return df_gamma

    except zipfile.BadZipFile:
        print(f"[Gamma] Invalid ZIP: {zip_file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])


# -----------------------------------------
# 6) CREATE COMPARISON EXCEL
# -----------------------------------------
def create_comparison_excel(
    df_alfa: pd.DataFrame,
    df_gamma: pd.DataFrame,
    output_path: Path
):
    """
    Outer join on 'Key', color-code columns, add 'Status' (Matching, Missing in Alfa, Missing in Gamma).
    """
    df_merge = pd.merge(
        df_alfa, df_gamma,
        on="Key", how="outer",
        suffixes=("_Alfa", "_Gamma")
    )

    def get_status(row):
        in_alfa = pd.notnull(row["Dimension_Alfa"])
        in_gamma = pd.notnull(row["Dimension_Gamma"])
        if in_alfa and in_gamma:
            return "Matching"
        elif in_alfa:
            return "Missing in Gamma"
        else:
            return "Missing in Alfa"

    df_merge["Status"] = df_merge.apply(get_status, axis=1)

    final_cols = [
        "Key",
        "Dimension_Alfa", "NameID_Alfa", "Attribute_Alfa", "Value_Alfa",
        "Dimension_Gamma", "NameID_Gamma", "Attribute_Gamma", "Value_Gamma",
        "Status"
    ]
    df_merge = df_merge[final_cols]

    df_merge.to_excel(output_path, sheet_name="Comparison", index=False)

    # -- Color the Excel --
    wb = load_workbook(output_path)
    ws = wb["Comparison"]

    fill_green = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
    fill_blue = PatternFill(start_color="BDD7EE", end_color="BDD7EE", fill_type="solid")
    fill_red = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    header_row = next(ws.iter_rows(min_row=1, max_row=1))
    headers = {cell.value: cell.column for cell in header_row}

    # Color Alfa => green
    alfa_cols = ["Dimension_Alfa", "NameID_Alfa", "Attribute_Alfa", "Value_Alfa"]
    for col in alfa_cols:
        col_idx = headers.get(col)
        if col_idx:
            for row_idx in range(2, ws.max_row + 1):
                ws.cell(row=row_idx, column=col_idx).fill = fill_green

    # Color Gamma => blue
    gamma_cols = ["Dimension_Gamma", "NameID_Gamma", "Attribute_Gamma", "Value_Gamma"]
    for col in gamma_cols:
        col_idx = headers.get(col)
        if col_idx:
            for row_idx in range(2, ws.max_row + 1):
                ws.cell(row=row_idx, column=col_idx).fill = fill_blue

    # Color Status => green if "Matching", else red
    status_col = headers.get("Status")
    if status_col:
        for row_idx in range(2, ws.max_row + 1):
            cell = ws.cell(row=row_idx, column=status_col)
            if cell.value == "Matching":
                cell.fill = fill_green
            else:
                cell.fill = fill_red

    wb.save(output_path)
    print(f"[Comparison] Wrote {output_path}")


# -----------------------------------------
# 7) MAIN
# -----------------------------------------
def main():

    # 1) Read Exclusion Table
    ex_table_path = Path("Ex_Table.xlsx")
    excluded_keys = read_exclusion_table(ex_table_path)

    # 2) ALFA
    #    Example: remove rows pre-melt if 'ColA'=="X" or 'ColB'=="Y"
    alfa_pre_exclude = [
        ("ColA", ["X"]),
        ("ColB", ["Y"])
    ]
    #    Remove Dimension="UnwantedDim", Attribute="Debug" post-melt
    alfa_bad_dims = ["UnwantedDim"]
    alfa_bad_attrs = ["Debug"]
    #    Rename dimension or attribute (includes turning 'First' -> 'Name')
    #    so 'First' will appear in the melted data as Attribute="Name".
    alfa_dim_rename = {
        "DimOld": "DimNew"
    }
    alfa_attr_rename = {
        "First": "Name"
    }

    alfa_path = Path("AlfaData.xlsx")
    df_alfa = transform_alfa(
        file_path=alfa_path,
        excluded_keys=excluded_keys,
        pre_melt_exclude_rules=alfa_pre_exclude,
        post_melt_bad_dimensions=alfa_bad_dims,
        post_melt_bad_attributes=alfa_bad_attrs,
        dimension_rename_dict=alfa_dim_rename,
        attribute_rename_dict=alfa_attr_rename,
        sheet_name="Sheet1",
        skip_rows=3
    )
    print("[Alfa] final rows:", len(df_alfa))

    # 3) GAMMA
    #    Example: remove rows pre-melt if 'RawCol'=="Z"
    gamma_pre_exclude = [
        ("RawCol", ["Z"])
    ]
    #    Remove dimension="TestDim" or attribute="BadAttr" post-melt
    gamma_bad_dims = ["TestDim"]
    gamma_bad_attrs = ["BadAttr"]
    gamma_dim_rename = {
        "GammaOld": "GammaNew"
    }
    gamma_attr_rename = {
        "First": "Name"  # So 'First' -> 'Name'
    }

    gamma_zip = Path("GammaData.zip")
    df_gamma = transform_gamma(
        zip_file_path=gamma_zip,
        excluded_keys=excluded_keys,
        pre_melt_exclude_rules=gamma_pre_exclude,
        post_melt_bad_dimensions=gamma_bad_dims,
        post_melt_bad_attributes=gamma_bad_attrs,
        dimension_rename_dict=gamma_dim_rename,
        attribute_rename_dict=gamma_attr_rename,
        delimiter=",", 
        remove_substring="_ceaster.txt"
    )
    print("[Gamma] final rows:", len(df_gamma))

    # 4) Create Comparison Excel
    comparison_out = Path("Comparison.xlsx")
    create_comparison_excel(df_alfa, df_gamma, comparison_out)


if __name__ == "__main__":
    main()
