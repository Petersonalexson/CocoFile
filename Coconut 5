Option Explicit

' Main procedure to refresh Smart View hierarchies and create query tables
Sub RefreshSmartViewHierarchiesAndCreateTables()
    ' First refresh all the Smart View hierarchies
    RefreshSmartViewHierarchies
    
    ' Then create query tables using Power Query
    CreateQueryTablesFromHierarchies
End Sub

' Procedure to refresh Smart View hierarchies
Sub RefreshSmartViewHierarchies()
    Dim arrSheets As Variant
    Dim ws As Worksheet
    Dim ConnectionName As String
    Dim Ret As Long, HeaderRow As Long, LastRow As Long, i As Long
    Dim ConnStatus As Integer
    
    With wsLists
        ConnectionName = .Range("nmConnectionName")
        arrSheets = .Range("Hierarchy_Matrix")
    End With
    
    HeaderRow = 4
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    For i = LBound(arrSheets) To UBound(arrSheets)
        Set ws = ThisWorkbook.Worksheets(arrSheets(i, 1))
        
        With ws
            Ret = HypUIConnect(.Name, "", "", ConnectionName)
            ConnStatus = HypConnected(.Name)
            
            If ConnStatus <> -1 Then
                MsgBox "Connection failed for sheet: " & .Name, vbExclamation
                GoTo NextSheet
            End If
            
            ' Calculate last row
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            
            ' Delete hierarchy rows except hierarchy name
            If LastRow > HeaderRow Then
                .Rows(HeaderRow & ":" & LastRow - 1).Delete Shift:=xlUp
            End If
            
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            Ret = HypZoomIn(.Name, .Range("A" & LastRow), 1, False) ' Drilldown on node
            
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            
            ' Create named range with trimmed name (no spaces)
            Dim rangeName As String
            rangeName = Trim(arrSheets(i, 2))
            
            ' Check if range name exists and delete it if needed
            On Error Resume Next
            ThisWorkbook.Names(rangeName).Delete
            On Error GoTo 0
            
            ' Create the named range
            ThisWorkbook.Names.Add Name:=rangeName, RefersTo:=ws.Range("A" & HeaderRow & ":A" & LastRow)
        End With
        
NextSheet:
        Set ws = Nothing
    Next i
    
    ' Turn screen updating back on
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

' Procedure to create query tables using Power Query
Sub CreateQueryTablesFromHierarchies()
    Dim arrSheets As Variant
    Dim i As Long
    Dim rangeName As String
    Dim queryName As String
    Dim conn As WorkbookConnection
    Dim queryText As String
    Dim sheetName As String
    Dim ws As Worksheet
    Dim querySheet As Worksheet
    Dim existingConn As Boolean
    
    ' Get the hierarchy matrix
    With wsLists
        arrSheets = .Range("Hierarchy_Matrix")
    End With
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' Loop through each hierarchy
    For i = LBound(arrSheets) To UBound(arrSheets)
        rangeName = Trim(arrSheets(i, 2))
        sheetName = Trim(arrSheets(i, 1))
        queryName = sheetName & "_Table"
        
        ' Check if the worksheet exists
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(sheetName)
        On Error GoTo 0
        
        If ws Is Nothing Then
            MsgBox "Sheet " & sheetName & " does not exist. Skipping this hierarchy.", vbExclamation
            GoTo NextQuery
        End If
        
        ' Check if named range exists
        Dim namedRangeExists As Boolean
        namedRangeExists = False
        
        On Error Resume Next
        If Not ThisWorkbook.Names(rangeName) Is Nothing Then
            namedRangeExists = True
        End If
        On Error GoTo 0
        
        If Not namedRangeExists Then
            MsgBox "Named range '" & rangeName & "' does not exist. Run RefreshSmartViewHierarchies first.", vbExclamation
            GoTo NextQuery
        End If
        
        ' Check if query sheet exists, if not, create it
        On Error Resume Next
        Set querySheet = ThisWorkbook.Worksheets(queryName)
        On Error GoTo 0
        
        If querySheet Is Nothing Then
            ' Create a new sheet for the query table
            Set querySheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
            querySheet.Name = queryName
        Else
            ' Clear existing content
            querySheet.UsedRange.Clear
        End If
        
        ' Build the Power Query M code
        queryText = BuildQueryText(rangeName)
        
        ' Check if the connection already exists in the workbook
        existingConn = False
        On Error Resume Next
        For Each conn In ThisWorkbook.Connections
            If conn.Name = queryName Then
                existingConn = True
                Exit For
            End If
        Next conn
        On Error GoTo 0
        
        ' Use existing connection if it exists, otherwise create a new one
        If existingConn Then
            ' Update existing connection with new query
            On Error Resume Next
            ThisWorkbook.Queries(queryName).Formula = queryText
            If Err.Number <> 0 Then
                ' If updating query fails, delete and recreate
                ThisWorkbook.Connections(queryName).Delete
                existingConn = False
            End If
            On Error GoTo 0
        End If
        
        If Not existingConn Then
            ' Create new connection and query
            On Error Resume Next
            ThisWorkbook.Queries.Add Name:=queryName, Formula:=queryText
            
            If Err.Number <> 0 Then
                MsgBox "Error creating query: " & Err.Description, vbExclamation
                GoTo NextQuery
            End If
            On Error GoTo 0
        End If
        
        ' Create the query table
        Dim queryDef As QueryTable
        On Error Resume Next
        ' Remove any existing query tables
        For Each queryDef In querySheet.QueryTables
            queryDef.Delete
        Next queryDef
        On Error GoTo 0
        
        ' Create new query table
        Set queryDef = querySheet.QueryTables.Add( _
            Connection:="OLEDB;Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=" & queryName, _
            Destination:=querySheet.Range("A1"))
        
        ' Link the query to the worksheet
        queryDef.CommandType = xlCmdSql
        queryDef.CommandText = Array(queryName)
        queryDef.BackgroundQuery = False
        queryDef.RefreshStyle = xlOverwriteCells
        queryDef.SaveData = True
        queryDef.PreserveFormatting = True
        queryDef.AdjustColumnWidth = True
        
        ' Refresh the query to load the data
        On Error Resume Next
        queryDef.Refresh BackgroundQuery:=False
        If Err.Number <> 0 Then
            MsgBox "Error refreshing query: " & Err.Description, vbExclamation
        End If
        On Error GoTo 0
        
        ' Autofit columns
        querySheet.Columns("A:Z").AutoFit
        
NextQuery:
    Next i
    
    ' Turn screen updating back on
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    MsgBox "Query tables created/updated successfully!", vbInformation, "Process Complete"
End Sub

' Function to build the Power Query M code
Function BuildQueryText(rangeName As String) As String
    Dim mCode As String
    
    ' Start building the query text
    mCode = "let" & vbCrLf
    mCode = mCode & "    Source = Excel.CurrentWorkbook(){[Name=""" & rangeName & """]}[Content]," & vbCrLf
    mCode = mCode & "    remove_nulls = Table.SelectRows(Source, each [Column1] <> null and [Column1] <> """")," & vbCrLf
    mCode = mCode & "    #""Duplicated Column"" = Table.DuplicateColumn(remove_nulls, ""Column1"", ""Value"")," & vbCrLf
    mCode = mCode & "    #""Added Custom"" = Table.AddColumn(#""Duplicated Column"", ""Nb Levels"", each List.Count(Text.PositionOfAny([Value], {"" ""}, Occurrence.All))/4, Int64.Type)," & vbCrLf
    mCode = mCode & "    #""Trimmed Text"" = Table.TransformColumns(#""Added Custom"", {{""Value"", Text.Trim, type text}})," & vbCrLf
    mCode = mCode & "    #""Changed Type"" = Table.TransformColumnTypes(#""Trimmed Text"", {{""Column1"", type text}})," & vbCrLf
    mCode = mCode & "    #""Added Index"" = Table.AddIndexColumn(#""Changed Type"", ""Index"", 1, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "    #""Sorted Rows"" = Table.Sort(#""Added Index"", {{""Index"", Order.Descending}})," & vbCrLf
    mCode = mCode & "    max_levels = List.Max(#""Sorted Rows""[Nb Levels])," & vbCrLf
    
    ' Add list_of_code_levels
    mCode = mCode & "    list_of_code_levels = List.Generate(" & vbCrLf
    mCode = mCode & "        () => 1," & vbCrLf
    mCode = mCode & "        each _ <= max_levels," & vbCrLf
    mCode = mCode & "        each _ + 1," & vbCrLf
    mCode = mCode & "        each ""Level"" & Text.From(_)" & vbCrLf
    mCode = mCode & "    )," & vbCrLf
    
    ' Continue with more steps
    mCode = mCode & "    #""Split Column by Delimiter"" = Table.SplitColumn(#""Sorted Rows"", ""Column1"", Splitter.SplitTextByDelimiter("" "", QuoteStyle.Csv), list_of_code_levels)," & vbCrLf
    mCode = mCode & "    #""Removed Columns1"" = Table.RemoveColumns(#""Split Column by Delimiter"", {""Index"", ""Nb Levels""})," & vbCrLf
    
    ' Do not remove top rows as requested
    ' mCode = mCode & "    #""Removed Top Rows"" = Table.Skip(#""Removed Columns1"", 1)," & vbCrLf

    ' Add the unflatten_hierarchy function
    mCode = mCode & "    fnUnflattenHierarchy = let" & vbCrLf
    mCode = mCode & "        unflatten_hierarchy = (data_table as table, value_column_name as text) as table =>" & vbCrLf
    mCode = mCode & "            let" & vbCrLf
    mCode = mCode & "                Source = data_table," & vbCrLf
    mCode = mCode & "                added_index_from_0 = Table.AddIndexColumn(Source, ""GP_Idx"", 0, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "                demote_headers = Table.DemoteHeaders(added_index_from_0)," & vbCrLf
    mCode = mCode & "                transpose_table = Table.Transpose(demote_headers)," & vbCrLf
    mCode = mCode & "                column_names = Table.ColumnNames(transpose_table)," & vbCrLf
    mCode = mCode & "                replace_empty_by_null = Table.ReplaceValue(transpose_table, """", null, Replacer.ReplaceValue, column_names)," & vbCrLf
    mCode = mCode & "                first_fill_down = Table.FillDown(replace_empty_by_null, column_names)," & vbCrLf
    mCode = mCode & "                transpose_table_back = Table.Transpose(first_fill_down)," & vbCrLf
    mCode = mCode & "                promote_headers = Table.PromoteHeaders(transpose_table_back, [PromoteAllScalars=true])," & vbCrLf

    ' Add helper functions
    mCode = mCode & AddHelperFunctions()
    
    ' Add the end of unflatten hierarchy function
    mCode = mCode & AddUnflattenHierarchyEnd()
    
    ' Complete the query with the execution of the unflatten hierarchy on Removed Columns1
    mCode = mCode & "    Result = fnUnflattenHierarchy(#""Removed Columns1"", ""Value"")" & vbCrLf
    mCode = mCode & "in" & vbCrLf
    mCode = mCode & "    Result"

    BuildQueryText = mCode
End Function

' Helper function to add the helper functions text to avoid long lines
Function AddHelperFunctions() As String
    Dim text As String
    
    text = "                fnGetListOfLevelsColumns = (data_table as table) as list =>" & vbCrLf
    text = text & "                    let" & vbCrLf
    text = text & "                        Source = data_table," & vbCrLf
    text = text & "                        columns_names = List.Buffer(Table.ColumnNames(Source))," & vbCrLf
    text = text & "                        convert_to_table = Table.FromList(Table.ColumnNames(Source), Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    text = text & "                        filter_level_rows = Table.SelectRows(convert_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level ""))," & vbCrLf
    text = text & "                        convert_to_list = filter_level_rows[Column1]" & vbCrLf
    text = text & "                    in" & vbCrLf
    text = text & "                        convert_to_list," & vbCrLf
    
    ' Add fnGetMinLevel
    text = text & "                fnGetMinLevel = (data_table as table) as number =>" & vbCrLf
    text = text & "                    let" & vbCrLf
    text = text & "                        Source = data_table," & vbCrLf
    text = text & "                        get_list_of_columns = Table.ColumnNames(Source)," & vbCrLf
    text = text & "                        convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    text = text & "                        filtered_levels_to_fill_down = Table.SelectRows(convert_list_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf
    text = text & "                        split_by_space = Table.SplitColumn(filtered_levels_to_fill_down, ""Column1"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Column1.1"", ""Column1.2""})," & vbCrLf
    text = text & "                        convert_to_number = Table.TransformColumnTypes(split_by_space, {{""Column1.2"", type number}})," & vbCrLf
    text = text & "                        min_level = List.Min(convert_to_number[Column1.2])" & vbCrLf
    text = text & "                    in" & vbCrLf
    text = text & "                        min_level," & vbCrLf
    
    ' Add fnGetMaxLevel
    text = text & "                fnGetMaxLevel = (data_table as table) as number =>" & vbCrLf
    text = text & "                    let" & vbCrLf
    text = text & "                        Source = data_table," & vbCrLf
    text = text & "                        get_list_of_columns = Table.ColumnNames(Source)," & vbCrLf
    text = text & "                        convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    text = text & "                        filtered_levels_to_fill_down = Table.SelectRows(convert_list_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf
    text = text & "                        split_by_space = Table.SplitColumn(filtered_levels_to_fill_down, ""Column1"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Column1.1"", ""Column1.2""})," & vbCrLf
    text = text & "                        convert_to_number = Table.TransformColumnTypes(split_by_space, {{""Column1.2"", type number}})," & vbCrLf
    text = text & "                        max_level = List.Max(convert_to_number[Column1.2])" & vbCrLf
    text = text & "                    in" & vbCrLf
    text = text & "                        max_level," & vbCrLf
    
    ' Add fnGetListOfNonLevelsColumns
    text = text & "                fnGetListOfNonLevelsColumns = (data_table as table) as list =>" & vbCrLf
    text = text & "                    let" & vbCrLf
    text = text & "                        Source = data_table," & vbCrLf
    text = text & "                        get_list_of_columns = List.Buffer(Table.ColumnNames(Source))," & vbCrLf
    text = text & "                        convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    text = text & "                        filtered_columns_other_than_levels = Table.SelectRows(convert_list_to_table, each not Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf
    text = text & "                        convert_to_list = filtered_columns_other_than_levels[Column1]" & vbCrLf
    text = text & "                    in" & vbCrLf
    text = text & "                        convert_to_list," & vbCrLf
    
    AddHelperFunctions = text
End Function

' Helper function to add the end of the unflatten_hierarchy function
Function AddUnflattenHierarchyEnd() As String
    Dim text As String
    
    text = "                list_of_levels = fnGetListOfLevelsColumns(Source)," & vbCrLf
    text = text & "                second_fill_down = Table.FillDown(promote_headers, list_of_levels)," & vbCrLf
    text = text & "                min_level = fnGetMinLevel(Source)," & vbCrLf
    text = text & "                max_level = fnGetMaxLevel(Source)," & vbCrLf
    text = text & "                Min_Level_Column_Name = ""Level "" & Number.ToText(min_level)," & vbCrLf
    text = text & "                Max_Level_Column_Name = ""Level "" & Number.ToText(max_level)," & vbCrLf
    text = text & "                Columns_Not_To_Unpivot = fnGetListOfNonLevelsColumns(Source)," & vbCrLf
    text = text & "                unpivoted_levels_columns = Table.UnpivotOtherColumns(second_fill_down, List.Combine({{Max_Level_Column_Name, ""GP_Idx""}, Columns_Not_To_Unpivot}), ""Attribute"", ""NameID"")," & vbCrLf
    text = text & "                check_if_direct_parent = Table.AddColumn(unpivoted_levels_columns, ""Direct Parent"", each if Record.Field(_, Max_Level_Column_Name) = [NameID] then ""no"" else ""yes"")," & vbCrLf
    text = text & "                filter_first_level_rows_without_parents = Table.SelectRows(check_if_direct_parent, each ([Direct Parent] = ""no"") and ([Attribute] = Min_Level_Column_Name))," & vbCrLf
    text = text & "                replace_parent_by_null = Table.ReplaceValue(filter_first_level_rows_without_parents, each [NameID], null, Replacer.ReplaceValue, {""NameID""})," & vbCrLf
    text = text & "                filter_rows_with_parents = Table.SelectRows(check_if_direct_parent, each [Direct Parent] = ""yes"")," & vbCrLf
    text = text & "                append_level_0_with_others = Table.Combine({replace_parent_by_null, filter_rows_with_parents})," & vbCrLf
    text = text & "                duplicate_attribute_column = Table.DuplicateColumn(append_level_0_with_others, ""Attribute"", ""Attribute2"")," & vbCrLf
    text = text & "                split_to_remove_labels = Table.SplitColumn(duplicate_attribute_column, ""Attribute2"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Attribute2.1"", ""Attribute2.2""})," & vbCrLf
    text = text & "                convert_to_a_number = Table.TransformColumnTypes(split_to_remove_labels, {{""Attribute2.2"", Int64.Type}})," & vbCrLf
    text = text & "                get_max_level_for_each_value = Table.Group(convert_to_a_number, {Max_Level_Column_Name}, {(""Max"", each List.Max([Attribute2.2]), type nullable number)})," & vbCrLf
    text = text & "                convert_max_level_to_text = Table.TransformColumnTypes(get_max_level_for_each_value, {""Max"", type text})," & vbCrLf
    text = text & "                merge_queries_to_filter = Table.NestedJoin(append_level_0_with_others, {Max_Level_Column_Name}, convert_max_level_to_text, {Max_Level_Column_Name}, ""TableToExpand"", JoinKind.LeftOuter)," & vbCrLf
    text = text & "                max_level_expanded_column_name = Max_Level_Column_Name & ""_expanded""," & vbCrLf
    text = text & "                expand_the_merged_result = Table.ExpandTableColumn(merge_queries_to_filter, ""TableToExpand"", {""Max""}, {max_level_expanded_column_name})," & vbCrLf
    text = text & "                sorted_rows = Table.Sort(expand_the_merged_result, {{""GP_Idx"", Order.Ascending}})," & vbCrLf
    text = text & "                remove_nulls = Table.SelectRows(sorted_rows, each Record.Field(_, max_level_expanded_column_name) <> null)," & vbCrLf
    text = text & "                removed_columns = Table.RemoveColumns(remove_nulls, {max_level_expanded_column_name, ""Attribute"", ""Direct Parent"", ""GP_Idx"", value_column_name})," & vbCrLf
    text = text & "                renamed_columns = Table.RenameColumns(removed_columns, {{Max_Level_Column_Name, value_column_name}, {""NameID"", ""Parent""}})" & vbCrLf
    text = text & "            in" & vbCrLf
    text = text & "                renamed_columns" & vbCrLf
    text = text & "    in" & vbCrLf
    text = text & "        unflatten_hierarchy," & vbCrLf
    
    AddUnflattenHierarchyEnd = text
End Function

' Helper function to check if a worksheet exists
Function SheetExists(sheetName As String) As Boolean
    Dim ws As Worksheet
    
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets(sheetName)
    On Error GoTo 0
    
    SheetExists = Not ws Is Nothing
End Function
