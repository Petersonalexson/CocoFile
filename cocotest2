import os
import zipfile
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.styles import PatternFill

# -----------------------------------------
#     READ EXCLUSION TABLE
# -----------------------------------------

def read_exclusion_table(ex_table_path: Path) -> set:
    """
    Reads an Excel file that has at least:
      Key, hide exception
    Returns a set of keys to exclude where hide exception == 'yes'.
    """
    if not ex_table_path.is_file():
        print(f"[Ex Table] File not found: {ex_table_path}. No exclusions will be applied.")
        return set()

    df_ex = pd.read_excel(ex_table_path, sheet_name="Sheet1")
    if "Key" not in df_ex.columns or "hide exception" not in df_ex.columns:
        print("[Ex Table] Missing either 'Key' or 'hide exception' columns. No exclusions.")
        return set()

    # Only exclude keys where hide exception == yes (case-insensitive)
    mask = df_ex["hide exception"].astype(str).str.lower() == "yes"
    excluded_keys = set(df_ex.loc[mask, "Key"].dropna().unique())
    return excluded_keys


# -----------------------------------------
#    UNIFIED FILTERING ON ANY COLUMN
# -----------------------------------------

def apply_filters(df: pd.DataFrame,
                  include_filters: list = None,
                  exclude_filters: list = None) -> pd.DataFrame:
    """
    Applies include/exclude filters on ANY column of df.

    Each filter is a tuple: (columnName, [list_of_values]).
    - include_filters => keep rows that match ANY of those conditions
    - exclude_filters => remove rows that match ANY of those conditions

    Example:
      include_filters = [
          ("Dimension", ["MyDimA", "MyDimB"]),
          ("Attribute", ["Status", "Department"])
      ]
      exclude_filters = [
          ("Value", ["Low", "Undefined"]),
          ("First", ["TestUser"])
      ]
    """

    # 1) Include Filters => keep any row that matches ANY of them
    if include_filters:
        # combined mask (boolean series) start with all False
        mask_include = pd.Series([False]*len(df), index=df.index)
        for (colName, valuesList) in include_filters:
            part_mask = df[colName].isin(valuesList)
            mask_include = mask_include | part_mask

        # keep only rows where mask_include == True
        df = df[mask_include]

    # 2) Exclude Filters => remove any row that matches ANY
    if exclude_filters:
        # combined mask for exclude
        mask_exclude = pd.Series([False]*len(df), index=df.index)
        for (colName, valuesList) in exclude_filters:
            part_mask = df[colName].isin(valuesList)
            mask_exclude = mask_exclude | part_mask

        # keep rows that do NOT match
        df = df[~mask_exclude]

    return df


# -----------------------------------------
#    ALFA TRANSFORM (EXCEL-BASED)
# -----------------------------------------

def transform_alfa(
    file_path: Path,
    excluded_keys: set,
    dimension_rename_dict: dict = None,
    attr_rename_dict: dict = None,
    include_filters: list = None,
    exclude_filters: list = None,
    sheet_name: str = "Sheet1",
    skip_rows: int = 3
) -> pd.DataFrame:
    """
    Reads an Excel where:
      - Column C => Dimension
      - Column D => First
    Melts all other columns => [Attribute, Value].
    Then applies:
      - dimension rename
      - attribute rename
      - unified filters on any column
      - excludes any rows whose Key is in excluded_keys
      - removes duplicates by Key
    Returns DataFrame with columns: [Key, Dimension, First, Attribute, Value].
    """

    # 1) Read Excel
    if not file_path.is_file():
        print(f"[Alfa] Excel not found: {file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])

    df = pd.read_excel(file_path, sheet_name=sheet_name, skiprows=skip_rows)
    if df.shape[1] < 4:
        print("[Alfa] Warning: fewer than 4 columns. Returning empty.")
        return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])

    # rename col C => Dimension, col D => First
    df.rename(columns={
        df.columns[2]: "Dimension",
        df.columns[3]: "First"
    }, inplace=True)

    # rename dimension values if desired
    if dimension_rename_dict:
        df["Dimension"] = df["Dimension"].replace(dimension_rename_dict)

    # 2) Melt everything except Dimension, First
    id_vars = ["Dimension", "First"]
    val_vars = [c for c in df.columns if c not in id_vars]

    df_melt = df.melt(
        id_vars=id_vars,
        value_vars=val_vars,
        var_name="Attribute",
        value_name="Value"
    )

    # rename attribute names if desired
    if attr_rename_dict:
        df_melt["Attribute"] = df_melt["Attribute"].replace(attr_rename_dict)

    # 3) Apply unified filters on any column (Dimension, First, Attribute, Value)
    df_melt = apply_filters(df_melt, include_filters, exclude_filters)

    # 4) Create Key
    df_melt["Key"] = df_melt.apply(
        lambda row: f"{row['Dimension']} | {row['First']} | {row['Attribute']} | {row['Value']}",
        axis=1
    )

    # 5) Exclude keys from ex_table
    df_melt = df_melt[~df_melt["Key"].isin(excluded_keys)]

    # Reorder
    df_melt = df_melt[["Key", "Dimension", "First", "Attribute", "Value"]]
    df_melt.drop_duplicates(subset=["Key"], inplace=True)

    return df_melt


# -----------------------------------------
#    GAMMA TRANSFORM (ZIP-BASED)
# -----------------------------------------

def compute_dimension_name(filename: str, remove_substring: str = "_ceaster.txt") -> str:
    """
    Builds dimension name from .txt filename by removing a substring and underscores.
    """
    base = os.path.basename(filename)
    if remove_substring in base:
        base = base.replace(remove_substring, "")
    else:
        base, _ = os.path.splitext(base)
    return base.replace("_", " ")


def transform_gamma(
    zip_file_path: Path,
    excluded_keys: set,
    dimension_rename_dict: dict = None,
    attr_rename_dict: dict = None,
    include_filters: list = None,
    exclude_filters: list = None,
    delimiter: str = ","
) -> pd.DataFrame:
    """
    Reads .txt files from a ZIP. 
    For each .txt, reads CSV => uses filename for 'Dimension', the first column for 'First',
    melts the rest => [Attribute, Value].
    Then applies dimension rename, attribute rename, unified filters, 
    excludes any keys in excluded_keys, and returns the combined result.
    """

    if not zip_file_path.is_file():
        print(f"[Gamma] ZIP not found: {zip_file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])

    df_list = []

    try:
        with zipfile.ZipFile(zip_file_path, "r") as z:
            txt_files = [f for f in z.namelist() if f.endswith(".txt")]
            if not txt_files:
                print("[Gamma] No .txt files found in the ZIP.")
                return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])

            for txt_file in txt_files:
                dimension_name = compute_dimension_name(txt_file)
                with z.open(txt_file) as file_obj:
                    df_in = pd.read_csv(file_obj, delimiter=delimiter)
                if df_in.empty:
                    continue

                # first column => 'First'
                first_col = df_in.columns[0]
                df_in["First"] = df_in[first_col]

                # dimension
                df_in["Dimension"] = dimension_name
                if dimension_rename_dict:
                    df_in["Dimension"] = df_in["Dimension"].replace(dimension_rename_dict)

                # melt
                id_vars = ["Dimension", "First"]
                val_vars = [c for c in df_in.columns if c not in id_vars]
                dfa = df_in.melt(
                    id_vars=id_vars,
                    value_vars=val_vars,
                    var_name="Attribute",
                    value_name="Value"
                )

                # rename attributes if desired
                if attr_rename_dict:
                    dfa["Attribute"] = dfa["Attribute"].replace(attr_rename_dict)

                # apply unified filters
                dfa = apply_filters(dfa, include_filters, exclude_filters)

                # build key
                dfa["Key"] = dfa.apply(
                    lambda row: f"{row['Dimension']} | {row['First']} | {row['Attribute']} | {row['Value']}",
                    axis=1
                )

                # exclude from ex_table
                dfa = dfa[~dfa["Key"].isin(excluded_keys)]

                dfa = dfa[["Key", "Dimension", "First", "Attribute", "Value"]]
                df_list.append(dfa)

        if not df_list:
            return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])

        df_gamma = pd.concat(df_list, ignore_index=True)
        df_gamma.drop_duplicates(subset=["Key"], inplace=True)
        return df_gamma

    except zipfile.BadZipFile:
        print(f"[Gamma] Invalid ZIP: {zip_file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])


# -----------------------------------------
#          COMPARISON LOGIC
# -----------------------------------------

def create_comparison_excel(df_alfa: pd.DataFrame,
                            df_gamma: pd.DataFrame,
                            output_path: Path):
    """
    Outer joins df_alfa & df_gamma on 'Key', color-codes each set of columns, 
    and creates a 'Status' column for presence in Alfa vs. Gamma.

    Columns in final:
     Key,
     Dimension_Alfa, First_Alfa, Attribute_Alfa, Value_Alfa,
     Dimension_Gamma, First_Gamma, Attribute_Gamma, Value_Gamma,
     Status
    """

    df_merge = pd.merge(
        df_alfa, df_gamma,
        on="Key", how="outer",
        suffixes=("_Alfa", "_Gamma")
    )

    def get_status(row):
        in_alfa = pd.notnull(row["Dimension_Alfa"])
        in_gamma = pd.notnull(row["Dimension_Gamma"])
        if in_alfa and in_gamma:
            return "Matching"
        elif in_alfa:
            return "Missing in Gamma"
        else:
            return "Missing in Alfa"

    df_merge["Status"] = df_merge.apply(get_status, axis=1)

    final_cols = [
        "Key",
        "Dimension_Alfa", "First_Alfa", "Attribute_Alfa", "Value_Alfa",
        "Dimension_Gamma", "First_Gamma", "Attribute_Gamma", "Value_Gamma",
        "Status"
    ]
    df_merge = df_merge[final_cols]

    df_merge.to_excel(output_path, sheet_name="Comparison", index=False)

    wb = load_workbook(output_path)
    ws = wb["Comparison"]

    fill_green = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
    fill_blue = PatternFill(start_color="BDD7EE", end_color="BDD7EE", fill_type="solid")
    fill_red = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    header_row = next(ws.iter_rows(min_row=1, max_row=1))
    headers = {cell.value: cell.column for cell in header_row}

    # color Alfa => green
    alfa_cols = ["Dimension_Alfa", "First_Alfa", "Attribute_Alfa", "Value_Alfa"]
    for col in alfa_cols:
        col_idx = headers.get(col)
        if col_idx:
            for row_idx in range(2, ws.max_row+1):
                ws.cell(row=row_idx, column=col_idx).fill = fill_green

    # color Gamma => blue
    gamma_cols = ["Dimension_Gamma", "First_Gamma", "Attribute_Gamma", "Value_Gamma"]
    for col in gamma_cols:
        col_idx = headers.get(col)
        if col_idx:
            for row_idx in range(2, ws.max_row+1):
                ws.cell(row=row_idx, column=col_idx).fill = fill_blue

    # color Status => green if "Matching", else red
    status_col = headers.get("Status")
    if status_col:
        for row_idx in range(2, ws.max_row+1):
            cell = ws.cell(row=row_idx, column=status_col)
            if cell.value == "Matching":
                cell.fill = fill_green
            else:
                cell.fill = fill_red

    wb.save(output_path)
    print(f"[Comparison] Wrote {output_path}")


# -----------------------------------------
#                 MAIN
# -----------------------------------------

def main():
    """
    Example usage:
      1) Read Exclusion Table => set of keys to exclude
      2) Transform Alfa => pass unified filters
      3) Transform Gamma => pass unified filters
      4) Create Comparison
    """

    # 1) Read Exclusion Table
    ex_path = Path("Ex_Table.xlsx")
    excluded_keys = read_exclusion_table(ex_path)

    # Example: define some filters that match ANY column (Dimension, First, Attribute, Value)
    # This is the only type of filtering: a single approach for include/exclude on columns.
    alfa_includes = [
        ("Dimension", ["AlfaDimension1", "AlfaDimension2"]),
        ("Attribute", ["Department"])
    ]
    alfa_excludes = [
        ("Value", ["External", "Test"])
    ]

    gamma_includes = [
        ("Dimension", ["GammaDimensionA"]),
        ("Attribute", ["Dept", "Status"])
    ]
    gamma_excludes = [
        ("Value", ["Low"]),
        ("First", ["TestUser"])
    ]

    # 2) Transform Alfa
    alfa_path = Path("ALO.xlsx")
    df_alfa = transform_alfa(
        file_path=alfa_path,
        excluded_keys=excluded_keys,
        dimension_rename_dict=None,
        attr_rename_dict=None,
        include_filters=alfa_includes,
        exclude_filters=alfa_excludes,
        sheet_name="Sheet1",
        skip_rows=3
    )
    print("[Alfa] final rows:", len(df_alfa))

    # 3) Transform Gamma
    gamma_zip_path = Path("zip_file.zip")
    df_gamma = transform_gamma(
        zip_file_path=gamma_zip_path,
        excluded_keys=excluded_keys,
        dimension_rename_dict=None,
        attr_rename_dict=None,
        include_filters=gamma_includes,
        exclude_filters=gamma_excludes,
        delimiter=","
    )
    print("[Gamma] final rows:", len(df_gamma))

    # 4) Create comparison
    comparison_out = Path("Comparison.xlsx")
    create_comparison_excel(df_alfa, df_gamma, comparison_out)


if __name__ == "__main__":
    main()
