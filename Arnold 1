Option Explicit

' ----------------------------------------------------------------------------------
' A) LOGGING HELPERS (same approach as before)
' ----------------------------------------------------------------------------------

' 1) Check if a sheet named sheetName exists
Private Function SheetExists(sheetName As String, wb As Workbook) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    SheetExists = Not (ws Is Nothing)
    On Error GoTo 0
End Function

' 2) Create a new log sheet with a unique name, e.g. TEST_LOG_2, etc.
Private Function CreateNewLogSheet(wb As Workbook) As Worksheet
    Dim newSheet As Worksheet
    Dim baseName As String
    Dim suffix As Long
    
    baseName = "TEST_LOG"
    suffix = 2
    
    ' Keep incrementing suffix until we find a name that doesn't exist
    Do While SheetExists(baseName & "_" & suffix, wb)
        suffix = suffix + 1
    Loop
    
    Set newSheet = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
    newSheet.Name = baseName & "_" & suffix
    
    Set CreateNewLogSheet = newSheet
End Function

' 3) Writes a line to the log. If logRow exceeds Excel's max row (1,048,576),
'    it auto-creates a new sheet.
Private Sub WriteLog(ByRef logSheet As Worksheet, ByRef logRow As Long, _
                     stepName As String, details As String)
    
    If logRow > 1048576 Then
        ' Create a new log sheet
        Set logSheet = CreateNewLogSheet(logSheet.Parent)
        ' Initialize header row
        With logSheet
            .Cells(1, 1).Value = "Timestamp"
            .Cells(1, 2).Value = "Step"
            .Cells(1, 3).Value = "Details"
        End With
        logRow = 2
    End If
    
    logSheet.Cells(logRow, 1).Value = Now
    logSheet.Cells(logRow, 2).Value = stepName
    logSheet.Cells(logRow, 3).Value = details
End Sub

' ----------------------------------------------------------------------------------
' B) COLUMN-FINDING HELPER
' ----------------------------------------------------------------------------------
Private Function FindColumnByHeader(ws As Worksheet, headerText As String) As Long
    Dim lastCol As Long, i As Long
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    For i = 1 To lastCol
        If InStr(1, ws.Cells(1, i).Text, headerText, vbTextCompare) > 0 Then
            FindColumnByHeader = i
            Exit Function
        End If
    Next i
    
    FindColumnByHeader = 0
End Function

' ----------------------------------------------------------------------------------
' C) MAIN PROCEDURE: ProcessTerminatorData
' ----------------------------------------------------------------------------------
Sub ProcessTerminatorData()
    ' 1) Define main objects
    Dim budgetWB As Workbook   ' BUDGET (this workbook)
    Dim mapWB As Workbook      ' MAP workbook
    Dim mapSheet As Worksheet
    Dim xrpSheet As Worksheet
    Dim forecastSheet As Worksheet
    Dim logSheet As Worksheet
    Dim termDict As Object     ' dictionary: center => sum of amounts
    Dim mapPath As String
    Dim logRow As Long
    
    Application.ScreenUpdating = False
    On Error GoTo ErrorHandler
    
    ' 2) Instantiate dictionary
    Set termDict = CreateObject("Scripting.Dictionary")
    
    ' 3) Current workbook = BUDGET
    Set budgetWB = ThisWorkbook
    
    ' 4) Setup or clear TEST_LOG
    On Error Resume Next
    Set logSheet = budgetWB.Sheets("TEST_LOG")
    On Error GoTo 0
    
    If logSheet Is Nothing Then
        Set logSheet = budgetWB.Sheets.Add(After:=budgetWB.Sheets(budgetWB.Sheets.Count))
        logSheet.Name = "TEST_LOG"
    Else
        logSheet.Cells.Clear
    End If
    
    ' Initialize log headers
    With logSheet
        .Cells(1, 1).Value = "Timestamp"
        .Cells(1, 2).Value = "Step"
        .Cells(1, 3).Value = "Details"
    End With
    logRow = 2
    
    ' Log start
    WriteLog logSheet, logRow, "Start", "Beginning Terminator process"
    logRow = logRow + 1
    
    ' 5) Open MAP workbook
    mapPath = "C:\Users\alexp\OneDrive\Desktop\MAP.xlsx"  ' <-- Adjust if needed
    WriteLog logSheet, logRow, "Path", "MAP path: " & mapPath
    logRow = logRow + 1
    
    Set mapWB = Workbooks.Open(mapPath)
    Set mapSheet = mapWB.Sheets("MY_MAP_SHEET_NAME")      ' <-- Hardcode your MAP sheet
    WriteLog logSheet, logRow, "Open MAP", "Opened MAP: " & mapWB.Name & _
                               ", sheet: " & mapSheet.Name
    logRow = logRow + 1
    
    ' 6) In BUDGET, reference XRP & FORECAST
    Set xrpSheet = budgetWB.Sheets("XRP")
    Set forecastSheet = budgetWB.Sheets("FORECAST")
    WriteLog logSheet, logRow, "Sheets", "Got XRP & FORECAST from BUDGET"
    logRow = logRow + 1
    
    ' 7) From MAP, gather allowed accounts where desc="terminators"
    Dim mapDescCol As Long, mapAccountCol As Long
    mapDescCol = FindColumnByHeader(mapSheet, "desc")
    mapAccountCol = FindColumnByHeader(mapSheet, "account")
    
    WriteLog logSheet, logRow, "MAP Columns", _
             "desc col: " & mapDescCol & ", account col: " & mapAccountCol
    logRow = logRow + 1
    
    Dim allowedAccounts As New Collection
    Dim lastRow As Long, i As Long
    
    lastRow = mapSheet.Cells(mapSheet.Rows.Count, mapAccountCol).End(xlUp).Row
    WriteLog logSheet, logRow, "MAP Rows", "Last row in MAP: " & lastRow
    logRow = logRow + 1
    
    For i = 1 To lastRow
        If LCase(Trim(mapSheet.Cells(i, mapDescCol).Value)) = "terminators" Then
            On Error Resume Next
            allowedAccounts.Add Trim(mapSheet.Cells(i, mapAccountCol).Value)
            WriteLog logSheet, logRow, "Allowed Account", _
                     "Found Terminator account: " & Trim(mapSheet.Cells(i, mapAccountCol).Value)
            logRow = logRow + 1
            On Error GoTo ErrorHandler
        End If
    Next i
    
    WriteLog logSheet, logRow, "Terminator Accounts", _
             "Found " & allowedAccounts.Count & " terminator accounts"
    logRow = logRow + 1
    
    ' 8) In XRP, find rows with matching account + non-empty "GO Number"
    Dim xrpAccountCol As Long, xrpCenterCol As Long
    Dim xrpAmountCol As Long, xrpGoNumberCol As Long
    Dim matchCount As Long
    
    xrpAccountCol = FindColumnByHeader(xrpSheet, "account")
    xrpCenterCol = FindColumnByHeader(xrpSheet, "CENTER")
    xrpAmountCol = FindColumnByHeader(xrpSheet, "AMOUNT")
    xrpGoNumberCol = FindColumnByHeader(xrpSheet, "GO Number")
    
    WriteLog logSheet, logRow, "XRP Columns", _
             "account: " & xrpAccountCol & ", CENTER: " & xrpCenterCol & _
             ", AMOUNT: " & xrpAmountCol & ", GO Number: " & xrpGoNumberCol
    logRow = logRow + 1
    
    lastRow = xrpSheet.Cells(xrpSheet.Rows.Count, xrpAccountCol).End(xlUp).Row
    WriteLog logSheet, logRow, "XRP Rows", "Last row in XRP: " & lastRow
    logRow = logRow + 1
    
    ' Clear dictionary
    Set termDict = CreateObject("Scripting.Dictionary")
    matchCount = 0
    
    Dim accountVal As String, centerVal As String
    Dim amtValue As Double
    Dim acc As Variant
    Dim goVal As Variant
    
    For i = 2 To lastRow
        accountVal = Trim(CStr(xrpSheet.Cells(i, xrpAccountCol).Value))
        centerVal = Trim(CStr(xrpSheet.Cells(i, xrpCenterCol).Value))
        goVal = xrpSheet.Cells(i, xrpGoNumberCol).Value
        
        ' Only proceed if "GO Number" is not empty
        If Not IsEmpty(goVal) And goVal <> "" Then
            
            ' Check if the account is in our "terminators" list
            Dim isTermAcct As Boolean
            isTermAcct = False
            
            For Each acc In allowedAccounts
                If acc = accountVal Then
                    isTermAcct = True
                    Exit For
                End If
            Next acc
            
            If isTermAcct Then
                amtValue = xrpSheet.Cells(i, xrpAmountCol).Value ' Summing AMOUNT
                matchCount = matchCount + 1
                
                If termDict.Exists(centerVal) Then
                    termDict(centerVal) = termDict(centerVal) + amtValue
                Else
                    termDict.Add centerVal, amtValue
                End If
                
                WriteLog logSheet, logRow, "Match Found", _
                         "Row " & i & ": Account=" & accountVal & _
                         ", GO Number=" & goVal & ", Added Amount=" & amtValue
                logRow = logRow + 1
            End If
        End If
    Next i
    
    WriteLog logSheet, logRow, "Terminator Dict Summary", _
             "Found " & matchCount & " XRP rows w/ GO Number & matching account. " & _
             termDict.Count & " centers total."
    logRow = logRow + 1
    
    ' 9) Now update FORECAST
    Dim lastCol As Long
    lastRow = forecastSheet.UsedRange.Rows.Count
    lastCol = forecastSheet.UsedRange.Columns.Count
    
    WriteLog logSheet, logRow, "FORECAST Dimensions", _
             "Last row: " & lastRow & ", Last col: " & lastCol
    logRow = logRow + 1
    
    Dim updatedCount As Long
    updatedCount = 0
    
    Dim rowPtr As Long
    rowPtr = 1
    
    ' We'll loop to find "October" in blocks
    Do While rowPtr <= lastRow
        Dim foundOctober As Boolean
        foundOctober = False
        
        Dim octRow As Long, octCol As Long
        Dim cellText As String
        
        ' A) Search for "October" scanning row-by-row, all columns
        Dim scanRow As Long, scanCol As Long
        For scanRow = rowPtr To Application.Min(rowPtr + 100, lastRow)
            For scanCol = 1 To lastCol
                cellText = CStr(forecastSheet.Cells(scanRow, scanCol).Value)
                
                WriteLog logSheet, logRow, "Scanning for October", _
                         "R" & scanRow & "C" & scanCol & ": '" & cellText & "'"
                logRow = logRow + 1
                
                If InStr(1, cellText, "October", vbTextCompare) > 0 Then
                    foundOctober = True
                    octRow = scanRow
                    octCol = scanCol
                    WriteLog logSheet, logRow, "October Found", _
                             "Found 'October' at R" & octRow & "C" & octCol
                    logRow = logRow + 1
                    Exit For
                End If
            Next scanCol
            If foundOctober Then Exit For
        Next scanRow
        
        If Not foundOctober Then
            WriteLog logSheet, logRow, "No More October", _
                     "Stopped searching at row " & rowPtr
            logRow = logRow + 1
            Exit Do
        End If
        
        ' B) Look left for Center (up to 50 columns)
        Dim colStart As Long, colEnd As Long
        colEnd = octCol - 1
        colStart = Application.Max(1, octCol - 50)
        
        WriteLog logSheet, logRow, "Check Left Columns", _
                 "From col " & colEnd & " down to " & colStart & " in row " & octRow
        logRow = logRow + 1
        
        Dim colCheck As Long
        For colCheck = colEnd To colStart Step -1
            Dim possibleCenter As String
            possibleCenter = Trim(CStr(forecastSheet.Cells(octRow, colCheck).Value))
            
            If termDict.Exists(possibleCenter) Then
                WriteLog logSheet, logRow, "Center Found", _
                         "R" & octRow & "C" & colCheck & " => Center='" & possibleCenter & "'"
                logRow = logRow + 1
                
                ' C) Look down same column for "Terminator & Arnold" up to 100 rows
                Dim rowTA As Long
                Dim foundTA As Boolean
                foundTA = False
                
                For rowTA = octRow + 1 To Application.Min(octRow + 100, lastRow)
                    cellText = Trim(CStr(forecastSheet.Cells(rowTA, colCheck).Value))
                    
                    If InStr(1, cellText, "Terminator & Arnold", vbTextCompare) > 0 Then
                        foundTA = True
                        
                        ' Overwrite the cell under "October" => (rowTA, octCol)
                        Dim newValue As Double
                        newValue = termDict(possibleCenter)
                        
                        forecastSheet.Cells(rowTA, octCol).Value = newValue
                        updatedCount = updatedCount + 1
                        
                        WriteLog logSheet, logRow, "Terminator Update", _
                                 "Center '" & possibleCenter & "' => R" & rowTA & "C" & octCol & _
                                 " set to " & newValue
                        logRow = logRow + 1
                        
                        Exit For  ' Found & updated
                    End If
                Next rowTA
                
                If Not foundTA Then
                    WriteLog logSheet, logRow, "Missing 'Terminator & Arnold'", _
                             "No 'Terminator & Arnold' found under center '" & possibleCenter & _
                             "' at row " & octRow
                    logRow = logRow + 1
                End If
            End If
        Next colCheck
        
        ' D) Move rowPtr below this "October" to find the next
        rowPtr = octRow + 1
    Loop
    
    ' Log final
    WriteLog logSheet, logRow, "Complete", _
             "Updated " & updatedCount & " 'Terminator & Arnold' cells in FORECAST"
    logRow = logRow + 1
    
    ' Format log sheet
    With logSheet.Range("A1:C1")
        .Font.Bold = True
        .Interior.Color = RGB(200, 200, 200)
    End With
    logSheet.Columns("A:C").AutoFit
    
    ' Close MAP
    mapWB.Close False
    Application.ScreenUpdating = True
    
    MsgBox "Process complete! Updated " & updatedCount & " 'Terminator & Arnold' entries." & vbNewLine & _
           "Check TEST_LOG for details.", vbInformation
    Exit Sub

' ----------------------------------------------------------------------------------
' ERROR HANDLER
' ----------------------------------------------------------------------------------
ErrorHandler:
    If Not logSheet Is Nothing Then
        WriteLog logSheet, logRow, "ERROR", "Error " & Err.Number & ": " & Err.Description
        logRow = logRow + 1
    End If
    
    MsgBox "Error " & Err.Number & ": " & Err.Description & vbNewLine & _
           "Check TEST_LOG sheet for details.", vbCritical
    
    On Error Resume Next
    If Not mapWB Is Nothing Then mapWB.Close False
    Application.ScreenUpdating = True
End Sub
