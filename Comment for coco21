import pandas as pd
import numpy as np
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from collections import defaultdict
from datetime import datetime

def main():
    file_path = r""

    # Read T1/T2
    df_t1 = pd.read_excel(file_path, sheet_name="Coco Coco")
    df_t2 = pd.read_excel(file_path, sheet_name="Coco Coco Land")

    # Clean column names
    df_t1.columns = df_t1.columns.str.strip()
    df_t2.columns = df_t2.columns.str.strip()

    # Parse Noel => (NoelFirst, NoelSecond)
    df_t1["NoelFirst"], df_t1["NoelSecond"] = zip(*df_t1["Noel"].apply(split_noel))
    df_t2["NoelFirst"], df_t2["NoelSecond"] = zip(*df_t2["Noel"].apply(split_noel))

    # Mark "Status" => Active/Inactive
    df_t1["Status"] = df_t1.apply(get_activity_status, axis=1)
    df_t2["Status"] = df_t2.apply(get_activity_status, axis=1)

    # If T2 has extra columns => for BLOC 3
    block3_cols = [
        # e.g. "Fresca Ana", "Fusion Core", ...
    ]

    # The set of all NoelFirst
    all_noels = sorted(set(df_t1["NoelFirst"].dropna()) | set(df_t2["NoelFirst"].dropna()))

    comparison_rows = []
    block1_rows = []
    block2_rows = []
    block3_rows = []

    # We'll group T2 to detect total expansions + how many are active
    t2_map = df_t2.groupby("NoelFirst")

    for noel_first in all_noels:
        sub_t1 = df_t1[df_t1["NoelFirst"]==noel_first].reset_index(drop=True)
        sub_t2 = df_t2[df_t2["NoelFirst"]==noel_first].reset_index(drop=True)

        # Separate active vs. inactive
        t1_active   = sub_t1[sub_t1["Status"]=="Active"].reset_index(drop=True)
        t1_inactive = sub_t1[sub_t1["Status"]!="Active"].reset_index(drop=True)
        t2_active   = sub_t2[sub_t2["Status"]=="Active"].reset_index(drop=True)
        t2_inactive = sub_t2[sub_t2["Status"]!="Active"].reset_index(drop=True)

        # For many-to-many comment logic, we see how many expansions exist in T2 + how many are active
        total_exp = len(sub_t2)
        active_exp = sum(1 for idx in range(len(sub_t2)) if sub_t2.loc[idx,"Status"]=="Active")

        # Cross-join the active expansions
        for i in range(len(t1_active)):
            for j in range(len(t2_active)):
                row_t1 = t1_active.loc[i]
                row_t2 = t2_active.loc[j]

                b1 = build_block1(row_t1, row_t2, total_exp, active_exp)
                b2 = build_block2(row_t1, row_t2)
                b3 = build_block3(row_t2, block3_cols)

                merged = {**b1, **b2, **b3}
                comparison_rows.append(merged)
                block1_rows.append(b1)
                block2_rows.append(b2)
                block3_rows.append(b3)

        # leftover T1_inactive => pair each with blank T2 row
        for i in range(len(t1_inactive)):
            row_t1 = t1_inactive.loc[i]
            b1 = build_block1(row_t1, None, total_exp, active_exp)
            b2 = build_block2(row_t1, None)
            b3 = build_block3(None, block3_cols)
            merged = {**b1, **b2, **b3}
            comparison_rows.append(merged)
            block1_rows.append(b1)
            block2_rows.append(b2)
            block3_rows.append(b3)

        # leftover T2_inactive => pair each with blank T1 row
        for j in range(len(t2_inactive)):
            row_t2 = t2_inactive.loc[j]
            b1 = build_block1(None, row_t2, total_exp, active_exp)
            b2 = build_block2(None, row_t2)
            b3 = build_block3(row_t2, block3_cols)
            merged = {**b1, **b2, **b3}
            comparison_rows.append(merged)
            block1_rows.append(b1)
            block2_rows.append(b2)
            block3_rows.append(b3)

    # Convert to DataFrames
    df_comparison = pd.DataFrame(comparison_rows)
    df_block1 = pd.DataFrame(block1_rows)
    df_block2 = pd.DataFrame(block2_rows)
    df_block3 = pd.DataFrame(block3_rows)

    # Write to Excel
    out_path = r""
    with pd.ExcelWriter(out_path, engine="openpyxl") as writer:
        df_comparison.to_excel(writer, sheet_name="Comparison", index=False)
        df_block1.to_excel(writer, sheet_name="BLOC 1", index=False)
        df_block2.to_excel(writer, sheet_name="BLOC 2", index=False)
        df_block3.to_excel(writer, sheet_name="BLOC 3", index=False)

    # Style
    wb = openpyxl.load_workbook(out_path)
    style_worksheet(wb["Comparison"])
    style_worksheet(wb["BLOC 1"])
    style_worksheet(wb["BLOC 2"])
    style_worksheet(wb["BLOC 3"], block3=True)
    wb.save(out_path)

    print(f"Done. Wrote '{out_path}' with cross-joined active expansions + many-to-many comment in BLOC 1.")


# =============================================================================
# BLOC 1
# =============================================================================
def build_block1(row1, row2, total_exp, active_exp):
    """
    BLOC 1 => columns:
      BLOC 1,
      Table1_Noel, Table1_Daytona, Table1_Elastic Daytona, Table1_Status,
      Table2_Noel, Table2_Daytona, Table2_Elastic Daytona, Table2_Status,
      Missing_in_Table1, Missing_in_Table2,
      Comment1_B1 => e.g. "Table1 Active, Table2 Inactive"
      Comment2_B1 => e.g. "many-to-many multiple active keys" if T2 has multiple expansions
    """
    b1 = {"BLOC 1": None}

    # T1
    if row1 is not None:
        noel_t1    = row1.get("Noel", np.nan)
        dayt_t1    = row1.get("Daytona", np.nan)
        elast_t1   = row1.get("Elastic Daytona", np.nan)
        stat_t1    = row1.get("Status", np.nan)
    else:
        noel_t1    = np.nan
        dayt_t1    = np.nan
        elast_t1   = np.nan
        stat_t1    = np.nan

    b1["Table1_Noel"]             = noel_t1
    b1["Table1_Daytona"]          = dayt_t1
    b1["Table1_Elastic Daytona"]  = elast_t1
    b1["Table1_Status"]           = stat_t1

    # T2
    if row2 is not None:
        noel_t2    = row2.get("Noel", np.nan)
        dayt_t2    = row2.get("Daytona", np.nan)
        elast_t2   = row2.get("Elastic Daytona", np.nan)
        stat_t2    = row2.get("Status", np.nan)
    else:
        noel_t2    = np.nan
        dayt_t2    = np.nan
        elast_t2   = np.nan
        stat_t2    = np.nan

    b1["Table2_Noel"]             = noel_t2
    b1["Table2_Daytona"]          = dayt_t2
    b1["Table2_Elastic Daytona"]  = elast_t2
    b1["Table2_Status"]           = stat_t2

    # Missing columns
    b1["Missing_in_Table1"] = "Yes" if row1 is None else "No"
    b1["Missing_in_Table2"] = "Yes" if row2 is None else "No"

    # Comment1_B1 => e.g. "Table1 Active, Table2 Inactive"
    c1_parts = []
    if not pd.isna(stat_t1):
        c1_parts.append(f"Table1 {stat_t1}")
    if not pd.isna(stat_t2):
        c1_parts.append(f"Table2 {stat_t2}")
    b1["Comment1_B1"] = ", ".join(c1_parts)

    # Comment2_B1 => many-to-many logic
    # If T2 has multiple expansions => total_exp>1 => check how many are active
    # else fallback to missing or one-one
    if total_exp>1:
        if active_exp>1:
            c2 = "many-to-many multiple active keys"
        elif active_exp==1:
            c2 = "many-to-many (only 1 active)"
        else:
            c2 = "many-to-many (none active)"
    else:
        # not multi expansions
        if row1 is None and row2 is not None:
            c2 = "missing in Table1"
        elif row2 is None and row1 is not None:
            c2 = "missing in Table2"
        else:
            c2 = "one-one"

    b1["Comment2_B1"] = c2
    return b1


# =============================================================================
# BLOC 2
# =============================================================================
def build_block2(row1, row2):
    """
    BLOC 2 => columns:
      BLOC 2,
      Table1_{Noel,Daytona,No Thing,Pizza,Pizza No Thing,Thing Noel,
              Pizza Coco Daytona,Sun Daytona,Elastic Daytona,Hero Rome,
              Coco Copo Opa Noel,Coco Coco Opa Elastic Noel}
      Table2_{... same}
      Comment1_B2, Comment2_B2, Comment3_B2
    """
    b2 = {"BLOC 2": None}

    shared_cols = [
        "Noel", "Daytona", "No Thing", "Pizza", "Pizza No Thing",
        "Thing Noel", "Pizza Coco Daytona", "Sun Daytona", "Elastic Daytona",
        "Hero Rome", "Coco Copo Opa Noel", "Coco Coco Opa Elastic Noel"
    ]

    # T1
    if row1 is not None:
        for c in shared_cols:
            b2[f"Table1_{c}"] = row1.get(c, np.nan)
    else:
        for c in shared_cols:
            b2[f"Table1_{c}"] = np.nan

    # T2
    if row2 is not None:
        for c in shared_cols:
            b2[f"Table2_{c}"] = row2.get(c, np.nan)
    else:
        for c in shared_cols:
            b2[f"Table2_{c}"] = np.nan

    # Comments
    noel_t1 = b2["Table1_Noel"]
    noel_t2 = b2["Table2_Noel"]

    # Comment1_B2 => presence
    if pd.isna(noel_t1) and pd.notna(noel_t2):
        b2["Comment1_B2"] = "Missing in Table1"
    elif pd.notna(noel_t1) and pd.isna(noel_t2):
        b2["Comment1_B2"] = "Missing in Table2"
    elif pd.isna(noel_t1) and pd.isna(noel_t2):
        b2["Comment1_B2"] = "No Noel in both?"
    else:
        b2["Comment1_B2"] = "Both present"

    mismatch_flag = False
    diff_cols = []

    if pd.isna(noel_t1) or pd.isna(noel_t2):
        b2["Comment2_B2"] = "N/A"
        b2["Comment3_B2"] = "N/A"
    else:
        for c in shared_cols:
            if c=="Noel": 
                continue
            v1 = b2[f"Table1_{c}"]
            v2 = b2[f"Table2_{c}"]
            if pd.isna(v1) and pd.notna(v2):
                mismatch_flag = True
                diff_cols.append(f"{c} [T1 missing, T2 present]")
            elif pd.notna(v1) and pd.isna(v2):
                mismatch_flag = True
                diff_cols.append(f"{c} [T1 present, T2 missing]")
            else:
                sv1 = safe_str(v1)
                sv2 = safe_str(v2)
                if sv1 != sv2:
                    mismatch_flag = True
                    diff_cols.append(f"{c} [T1={sv1}, T2={sv2}]")

        if mismatch_flag:
            b2["Comment2_B2"] = "shared dimensions GAP"
            if diff_cols:
                b2["Comment3_B2"] = "Diff columns: " + ", ".join(diff_cols)
            else:
                b2["Comment3_B2"] = "Diff columns: ???"
        else:
            b2["Comment2_B2"] = "shared dimensions MATCH"
            b2["Comment3_B2"] = "No differences"

    return b2


# =============================================================================
# BLOC 3
# =============================================================================
def build_block3(row2, block3_cols):
    """
    BLOC 3 => 'BLOC 3' + Table2_{extra columns} no comments
    """
    b3 = {"BLOC 3": None}
    if row2 is None:
        for c in block3_cols:
            b3[f"Table2_{c}"] = np.nan
        return b3

    for c in block3_cols:
        val = row2.get(c, np.nan)
        b3[f"Table2_{c}"] = val
    return b3


# =============================================================================
# STYLING
# =============================================================================
def style_worksheet(ws, block3=False):
    """
    - Both missing => red fill, no border
    - One missing => that side red fill, no border
    - If both exist => if T1 & T2 are Active => purple if match, orange if differ, else no border
    """
    row_count = ws.max_row
    col_count = ws.max_column
    headers = [cell.value for cell in ws[1]]

    green_fill  = PatternFill(start_color="C6E0B4", end_color="C6E0B4", fill_type="solid")
    blue_fill   = PatternFill(start_color="BDD7EE", end_color="BDD7EE", fill_type="solid")
    white_fill  = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")
    dark_fill   = PatternFill(start_color="808080", end_color="808080", fill_type="solid")
    red_fill    = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
    purple_side = Side(style="medium", color="800080")
    orange_side = Side(style="medium", color="FFA500")

    # Find Table1_Status / Table2_Status columns
    col_t1_status = None
    col_t2_status = None
    for i, col_name in enumerate(headers, start=1):
        if col_name=="Table1_Status":
            col_t1_status = i
        elif col_name=="Table2_Status":
            col_t2_status = i

    # Base fill
    for r in range(1, row_count+1):
        for c in range(1, col_count+1):
            cell = ws.cell(row=r, column=c)
            if r==1:
                cell.font = Font(bold=True)
                continue
            col_header = headers[c-1] if c<=len(headers) else ""
            if col_header in ["BLOC 1", "BLOC 2", "BLOC 3"]:
                cell.fill = dark_fill
                cell.font = Font(color="FFFFFF", bold=True)
                continue
            if col_header.startswith("Table1_"):
                cell.fill = green_fill
            elif col_header.startswith("Table2_"):
                cell.fill = blue_fill
            elif ("Comment" in col_header or 
                  "Status" in col_header or 
                  "Missing_in_Table" in col_header):
                cell.fill = white_fill
            else:
                cell.fill = white_fill

    # Pair up columns for orange/purple
    pairs = defaultdict(lambda: {"t1": None, "t2": None})
    for i, h in enumerate(headers, start=1):
        if h.startswith("Table1_"):
            base = h.replace("Table1_","")
            pairs[base]["t1"] = i
        elif h.startswith("Table2_"):
            base = h.replace("Table2_","")
            pairs[base]["t2"] = i

    for base_name, idxs in pairs.items():
        t1_idx = idxs["t1"]
        t2_idx = idxs["t2"]
        if t1_idx and t2_idx:
            for r in range(2, row_count+1):
                cell_t1 = ws.cell(row=r, column=t1_idx)
                cell_t2 = ws.cell(row=r, column=t2_idx)
                v1 = cell_t1.value
                v2 = cell_t2.value

                # read statuses
                status_t1 = None
                status_t2 = None
                if col_t1_status:
                    status_t1 = ws.cell(row=r, column=col_t1_status).value
                if col_t2_status:
                    status_t2 = ws.cell(row=r, column=col_t2_status).value

                # both missing => red fill, no border
                if pd.isna(v1) and pd.isna(v2):
                    cell_t1.fill = red_fill
                    cell_t2.fill = red_fill
                    continue

                # one missing => fill that side red, no border
                if pd.isna(v1) and pd.notna(v2):
                    cell_t1.fill = red_fill
                    continue
                elif pd.isna(v2) and pd.notna(v1):
                    cell_t2.fill = red_fill
                    continue

                # both exist => only do border if both T1 & T2 are Active
                if status_t1=="Active" and status_t2=="Active":
                    s1 = str(v1).strip()
                    s2 = str(v2).strip()
                    if s1 == s2:
                        set_border(cell_t1, purple_side)
                        set_border(cell_t2, purple_side)
                    else:
                        set_border(cell_t1, orange_side)
                        set_border(cell_t2, orange_side)
                else:
                    # skip border if either side inactive
                    pass

    # auto-fit
    for c in range(1, col_count+1):
        max_len = 0
        for r in range(1, row_count+1):
            val = ws.cell(row=r, column=c).value
            s = str(val) if val is not None else ""
            if len(s) > max_len:
                max_len = len(s)
        ws.column_dimensions[get_column_letter(c)].width = min(50, max(10, max_len+2))
        for r in range(1, row_count+1):
            ws.cell(row=r, column=c).alignment = Alignment(vertical="top", wrap_text=True)


def set_border(cell, side):
    """Sets all sides of 'cell' to 'side'."""
    cell.border = Border(left=side, right=side, top=side, bottom=side)


# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

def get_activity_status(row):
    """
    Inactive if 'Daytona' has 'close'/'closed' or if 'Elastic Daytona' is in the past,
    else Active
    """
    dayt = str(row.get("Daytona","")).lower()
    elast = row.get("Elastic Daytona","")
    if "close" in dayt:
        return "Inactive"
    if pd.notna(elast):
        try:
            dt = pd.to_datetime(elast)
            if dt < pd.Timestamp.now():
                return "Inactive"
        except:
            pass
    return "Active"

def split_noel(val):
    """
    'AAAA_0001' => (AAAA,0001), 'AAAA' => (AAAA,None)
    """
    if pd.isna(val):
        return None, None
    s = str(val).strip()
    if "_" in s:
        left, right = s.split("_",1)
        return left, right
    else:
        return s, None

def safe_str(x):
    return "" if pd.isna(x) else str(x).strip()

if __name__ == "__main__":
    main()
