Private Sub WriteLog(logSheet As Worksheet, logRow As Long, step As String, details As String)
    logSheet.Cells(logRow, 1).Value = Now
    logSheet.Cells(logRow, 2).Value = step
    logSheet.Cells(logRow, 3).Value = details
End Sub

Private Function FindColumnByHeader(ws As Worksheet, headerText As String) As Long
    Dim lastCol As Long
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    For i = 1 To lastCol
        If InStr(1, ws.Cells(1, i).Text, headerText, vbTextCompare) > 0 Then
            FindColumnByHeader = i
            Exit Function
        End If
    Next i
    
    FindColumnByHeader = 0
End Function

Sub ProcessExpensesData()
    ' Define variables
    Dim mapWB As Workbook
    Dim financeWB As Workbook
    Dim mapSheet As Worksheet
    Dim sumSheet As Worksheet
    Dim expectedSheet As Worksheet
    Dim logSheet As Worksheet
    Dim expensesDict As Object
    Dim mapPath As String
    Dim logRow As Long
    
    Application.ScreenUpdating = False
    
    ' Create dictionary object
    Set expensesDict = CreateObject("Scripting.Dictionary")
    
    ' Error handling
    On Error GoTo ErrorHandler
    
    ' Set reference to current workbook (FINANCE)
    Set financeWB = ThisWorkbook
    
    ' Create or clear TEST_LOG sheet
    On Error Resume Next
    Set logSheet = financeWB.Sheets("TEST_LOG")
    On Error GoTo 0
    
    If logSheet Is Nothing Then
        Set logSheet = financeWB.Sheets.Add(After:=financeWB.Sheets(financeWB.Sheets.Count))
        logSheet.Name = "TEST_LOG"
    Else
        logSheet.Cells.Clear
    End If
    
    ' Initialize log headers
    logSheet.Cells(1, 1).Value = "Timestamp"
    logSheet.Cells(1, 2).Value = "Step"
    logSheet.Cells(1, 3).Value = "Details"
    logRow = 2
    
    Call WriteLog(logSheet, logRow, "Start", "Beginning process")
    logRow = logRow + 1
    
    ' Set hardcoded path for MAP.xlsx
    mapPath = "C:\Users\alexp\OneDrive\Desktop\MAP.xlsx"
    Call WriteLog(logSheet, logRow, "Path", "MAP path: " & mapPath)
    logRow = logRow + 1
    
    ' Open MAP workbook
    Set mapWB = Workbooks.Open(mapPath)
    Set mapSheet = mapWB.Sheets("MAP")
    Call WriteLog(logSheet, logRow, "Open MAP", "Successfully opened MAP.xlsx, Sheet: " & mapSheet.Name)
    logRow = logRow + 1
    
    Set sumSheet = financeWB.Sheets("SUM")
    Set expectedSheet = financeWB.Sheets("EXPECTED")
    Call WriteLog(logSheet, logRow, "Sheets", "Located SUM and EXPECTED sheets in FINANCE")
    logRow = logRow + 1
    
    ' Get column indices for MAP
    Dim mapDescrCol As Long, mapContulCol As Long
    mapDescrCol = FindColumnByHeader(mapSheet, "Descriere 2")
    mapContulCol = FindColumnByHeader(mapSheet, "Contul")
    Call WriteLog(logSheet, logRow, "MAP Columns", "Descriere 2 col: " & mapDescrCol & ", Contul col: " & mapContulCol)
    logRow = logRow + 1
    
    ' Get allowed accounts from MAP worksheet
    Dim allowedAccounts As New Collection
    Dim lastRow As Long
    lastRow = mapSheet.Cells(mapSheet.Rows.Count, mapContulCol).End(xlUp).Row
    Call WriteLog(logSheet, logRow, "MAP Rows", "Last row in MAP: " & lastRow)
    logRow = logRow + 1
    
    For i = 1 To lastRow
        If LCase(Trim(mapSheet.Cells(i, mapDescrCol).Value)) = "expenses" Then
            On Error Resume Next
            allowedAccounts.Add Trim(mapSheet.Cells(i, mapContulCol).Value)
            Call WriteLog(logSheet, logRow, "Allowed Account", "Found account: " & Trim(mapSheet.Cells(i, mapContulCol).Value))
            logRow = logRow + 1
            On Error GoTo ErrorHandler
        End If
    Next i
    
    Call WriteLog(logSheet, logRow, "Accounts Summary", "Found " & allowedAccounts.Count & " allowed accounts")
    logRow = logRow + 1
    
    ' Process SUM sheet
    Dim sumContulCol As Long, sumCCenterCol As Long, sumAmountCol As Long
    sumContulCol = FindColumnByHeader(sumSheet, "Contul Nat")
    sumCCenterCol = FindColumnByHeader(sumSheet, "CCenter")
    sumAmountCol = FindColumnByHeader(sumSheet, "Amount")
    
    Call WriteLog(logSheet, logRow, "SUM Columns", "Contul Nat col: " & sumContulCol & ", CCenter col: " & sumCCenterCol & ", Amount col: " & sumAmountCol)
    logRow = logRow + 1
    
    lastRow = sumSheet.Cells(sumSheet.Rows.Count, sumContulCol).End(xlUp).Row
    Call WriteLog(logSheet, logRow, "SUM Rows", "Last row in SUM: " & lastRow)
    logRow = logRow + 1
    
    ' Clear dictionary before populating
    Set expensesDict = CreateObject("Scripting.Dictionary")
    
    ' Aggregate expenses by CCenter code
    Dim matchCount As Long
    matchCount = 0
    
    For i = 2 To lastRow
        Dim contulNat As String, ccenter As String
        contulNat = Trim(CStr(sumSheet.Cells(i, sumContulCol).Value))
        ccenter = Trim(CStr(sumSheet.Cells(i, sumCCenterCol).Value))
        
        ' Check if account is in allowed accounts
        Dim isAllowed As Boolean
        isAllowed = False
        For Each acc In allowedAccounts
            If acc = contulNat Then
                isAllowed = True
                Call WriteLog(logSheet, logRow, "Match Found", "Row " & i & ": Account " & contulNat & " matches allowed account")
                logRow = logRow + 1
                matchCount = matchCount + 1
                Exit For
            End If
        Next acc
        
        If isAllowed Then
            Dim expenseValue As Double
            expenseValue = sumSheet.Cells(i, sumAmountCol).Value
            
            If expensesDict.Exists(ccenter) Then
                expensesDict(ccenter) = expensesDict(ccenter) + expenseValue
            Else
                expensesDict.Add ccenter, expenseValue
            End If
            Call WriteLog(logSheet, logRow, "Expense Added", "CCenter " & ccenter & ": Added expense " & expenseValue & " (Total: " & expensesDict(ccenter) & ")")
            logRow = logRow + 1
        End If
    Next i
    
    Call WriteLog(logSheet, logRow, "Dictionary Summary", "Dictionary contains " & expensesDict.Count & " CCenters. Found " & matchCount & " matching rows")
    logRow = logRow + 1
    
    ' Log dictionary contents
    Dim key As Variant
    For Each key In expensesDict.Keys
        Call WriteLog(logSheet, logRow, "CCenter Total", "CCenter: " & key & ", Total Expense: " & expensesDict(key))
        logRow = logRow + 1
    Next key
    
    ' Process EXPECTED sheet
    lastRow = expectedSheet.UsedRange.Rows.Count
    Dim lastCol As Long
    lastCol = expectedSheet.UsedRange.Columns.Count
    
    Call WriteLog(logSheet, logRow, "EXPECTED Dimensions", "Last row: " & lastRow & ", Last col: " & lastCol)
    logRow = logRow + 1
    
    Dim row As Long
    row = 1
    Dim updatedCount As Long
    updatedCount = 0
    
    Do While row <= lastRow
        ' Find "Planned October" cell
        Dim octFound As Boolean
        Dim octCol As Long
        Dim headerRow As Long
        octFound = False
        
        For i = row To Application.Min(row + 10, lastRow)
            For j = 1 To lastCol
                Dim cellText As String
                cellText = CStr(expectedSheet.Cells(i, j).Value)
                Call WriteLog(logSheet, logRow, "Scanning", "Row " & i & ", Col " & j & ": '" & cellText & "'")
                logRow = logRow + 1
                
                If InStr(1, cellText, "Planned October", vbTextCompare) > 0 Then
                    octFound = True
                    octCol = j
                    headerRow = i
                    Call WriteLog(logSheet, logRow, "October Header", "Found 'Planned October' at row " & i & ", col " & j)
                    logRow = logRow + 1
                    Exit For
                End If
            Next j
            If octFound Then Exit For
        Next i
        
        If Not octFound Then
            Call WriteLog(logSheet, logRow, "October Search", "No more 'Planned October' headers found after row " & row)
            logRow = logRow + 1
            Exit Do
        End If
        
        ' Find CCenter code within next 3 rows
        Dim ccenterFound As Boolean
        Dim ccenterCode As String
        Dim ccenterRow As Long
        ccenterFound = False
        
        For i = headerRow - 2 To headerRow + 3
            If i > 0 Then  ' Make sure we don't go below row 1
                For j = 1 To lastCol
                    ccenterCode = Trim(CStr(expectedSheet.Cells(i, j).Value))
                    Call WriteLog(logSheet, logRow, "Checking Cell", "Row " & i & ", Col " & j & ": '" & ccenterCode & "'")
                    logRow = logRow + 1
                    If expensesDict.Exists(ccenterCode) Then
                        ccenterFound = True
                        ccenterRow = i
                        Call WriteLog(logSheet, logRow, "CCenter Found", "Found CCenter code '" & ccenterCode & "' at row " & i)
                        logRow = logRow + 1
                        Exit For
                    End If
                Next j
                If ccenterFound Then Exit For
            End If
        Next i
        
        If ccenterFound Then
            ' Find "Expenses" row
            Dim expFound As Boolean
            Dim expRow As Long
            expFound = False
            
            For i = ccenterRow To Application.Min(ccenterRow + 5, lastRow)
                For j = 1 To lastCol
                    cellText = CStr(expectedSheet.Cells(i, j).Value)
                    If InStr(1, cellText, "Expenses", vbTextCompare) > 0 Then
                        expFound = True
                        expRow = i
                        Call WriteLog(logSheet, logRow, "Expenses Row", "Found 'Expenses' at row " & i)
                        logRow = logRow + 1
                        Exit For
                    End If
                Next j
                If expFound Then Exit For
            Next i
            
            If expFound Then
                ' Update the expenses value
                Dim newValue As Double
                newValue = expensesDict(ccenterCode)
                expectedSheet.Cells(expRow, octCol).Value = newValue
                updatedCount = updatedCount + 1
                Call WriteLog(logSheet, logRow, "Update", "Updated expenses for CCenter " & ccenterCode & " at row " & expRow & ", col " & octCol & " with value " & newValue)
                logRow = logRow + 1
            Else
                Call WriteLog(logSheet, logRow, "Error", "Could not find Expenses row for CCenter " & ccenterCode)
                logRow = logRow + 1
            End If
        Else
            Call WriteLog(logSheet, logRow, "Error", "No valid CCenter code found near Planned October at row " & headerRow)
            logRow = logRow + 1
        End If
        
        row = headerRow + 1
    Loop
    
    Call WriteLog(logSheet, logRow, "Complete", "Updated " & updatedCount & " CCenter expense values")
    logRow = logRow + 1
    
    ' Format log sheet
    With logSheet.Range("A1:C1")
        .Font.Bold = True
        .Interior.Color = RGB(200, 200, 200)
    End With
    logSheet.Columns("A:C").AutoFit
    
    mapWB.Close False
    Application.ScreenUpdating = True
    
    MsgBox "Processing complete! Updated " & updatedCount & " CCenter expense values." & vbNewLine & _
           "Check TEST_LOG sheet for detailed processing information.", vbInformation
    Exit Sub

ErrorHandler:
    Call WriteLog(logSheet, logRow, "ERROR", "Error " & Err.Number & ": " & Err.Description)
    MsgBox "Error " & Err.Number & ": " & Err.Description & vbNewLine & _
           "Check TEST_LOG sheet for details.", vbCritical
    
    On Error Resume Next
    If Not mapWB Is Nothing Then mapWB.Close False
    Application.ScreenUpdating = True
End Sub
