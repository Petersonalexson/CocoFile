Sub RefreshSmartViewTree()

    Dim wsLists As Worksheet
    Dim ws As Worksheet
    Dim arrSheets As Variant
    Dim ConnectionName As String
    
    Dim Ret As Long
    Dim HeaderRow As Long
    Dim LastRow As Long
    Dim LastCol As Long
    Dim i As Long
    Dim ConnStatus As Long
    
    ' 1) Identify the sheet that has nmConnectionName & Hierarchy_Matrix
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    
    With wsLists
        ConnectionName = .Range("nmConnectionName").Value
        arrSheets = .Range("Hierarchy_Matrix").Value
    End With
    
    ' 2) Set your header row
    HeaderRow = 4
    
    ' 3) Loop through each row in Hierarchy_Matrix
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        
        '   A) Get the target worksheet (col A) and the named range to reset (col B)
        Set ws = ThisWorkbook.Worksheets(arrSheets(i, 1))
        
        With ws
            
            ' --- CONNECT to Smart View ---
            Ret = HypUIConnect(.Name, "", "", ConnectionName)
            ConnStatus = HypConnected(.Name)
            If ConnStatus <> -1 Then Stop  ' Debug: Stop if not connected
            
            ' --- FIND LAST ROW & LAST COL BEFORE DELETING ---
            '     We'll assume your data is in column A downward,
            '     but you also want the maximum used columns.
            
            LastRow = .Cells(.Rows.Count, 1).End(xlUp).Row  ' Last used row in Column A
            ' Use FIND to get the truly last used column in the sheet (safer than row-based):
            If Application.WorksheetFunction.CountA(.Cells) = 0 Then
                ' If the sheet is empty, skip
                LastCol = 1
            Else
                LastCol = .Cells.Find("*", , xlFormulas, xlWhole, xlByColumns, xlPrevious).Column
            End If
            
            ' --- DELETE old hierarchy rows EXCEPT the last row ---
            '     We keep row "LastRow" because it might have the final "hierarchy name."
            If LastRow > HeaderRow Then
                If (LastRow - 1) >= (HeaderRow + 1) Then
                    .Range(.Cells(HeaderRow + 1, 1), .Cells(LastRow - 1, LastCol)).Delete Shift:=xlUp
                End If
            End If
            
            ' Recalculate last row after delete
            LastRow = .Cells(.Rows.Count, 1).End(xlUp).Row
            If Application.WorksheetFunction.CountA(.Cells) = 0 Then
                LastCol = 1
            Else
                LastCol = .Cells.Find("*", , xlFormulas, xlWhole, xlByColumns, xlPrevious).Column
            End If
            
            ' --- SET SHEET OPTION (member display) ---
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            
            ' --- ZOOM IN on the final row's Column A ---
            Ret = HypZoomIn(.Name, .Cells(LastRow, 1), 1, False)
            
            ' Recalc last row/col after Zoom
            LastRow = .Cells(.Rows.Count, 1).End(xlUp).Row
            If Application.WorksheetFunction.CountA(.Cells) = 0 Then
                LastCol = 1
            Else
                LastCol = .Cells.Find("*", , xlFormulas, xlWhole, xlByColumns, xlPrevious).Column
            End If
            
            ' --- RESET THE NAMED RANGE (arrSheets(i,2)) ---
            '     Range covers everything from row (HeaderRow+1) to LastRow,
            '     across columns 1..LastCol. This ensures we pick up all columns.
            
            ' If there's truly no data below the header, avoid an invalid reference
            If LastRow < (HeaderRow + 1) Then
                ' No data
                ThisWorkbook.Names(arrSheets(i, 2)).RefersTo = "='" & .Name & "'!A" & (HeaderRow + 1)
            Else
                Dim rngNew As Range
                Set rngNew = .Range(.Cells(HeaderRow + 1, 1), .Cells(LastRow, LastCol))
                
                ThisWorkbook.Names(arrSheets(i, 2)).RefersTo = "='" & .Name & "'!" & rngNew.Address
            End If
            
        End With
        
        Set ws = Nothing
    Next i
    
    MsgBox "Smart View Tree refresh complete!", vbInformation
End Sub
