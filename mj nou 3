Option Explicit

'==========================================================
' MAIN: Refresh Smart View hierarchies, then build queries
'==========================================================
Public Sub RefreshHierarchiesAndCreateQueries()
    LogMessage "RefreshHierarchiesAndCreateQueries", "Starting process"
    
    Dim wsLists As Worksheet
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    
    RefreshSmartViewTree
    CreateHierarchyQueries
    
    LogMessage "RefreshHierarchiesAndCreateQueries", "Process completed"
End Sub

'==========================================================
' REFRESH SMART VIEW HIERARCHIES - ORIGINAL WORKING VERSION
'==========================================================
Public Sub RefreshSmartViewTree()
    Dim arrSheets As Variant
    Dim ws As Worksheet
    Dim wsLists As Worksheet
    Dim ConnectionName As String
    Dim Ret As Long, HeaderRow As Long, LastRow As Long, I As Long
    Dim ConnStatus As Integer
    
    LogMessage "RefreshSmartViewTree", "Starting Smart View refresh"
    
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    
    With wsLists
        ConnectionName = .Range("nmConnectionName").Value
        arrSheets = .Range("Hierarchy_Matrix").Value
    End With
    
    HeaderRow = 4
    
    For I = LBound(arrSheets) To UBound(arrSheets)
        LogMessage "RefreshSmartViewTree", "Processing sheet: " & arrSheets(I, 1)
        
        Set ws = ThisWorkbook.Worksheets(arrSheets(I, 1))
        With ws
            Ret = HypUIConnect(.Name, "", "", ConnectionName)
            ConnStatus = HypConnected(.Name)
            If ConnStatus <> -1 Then 
                LogMessage "RefreshSmartViewTree", "ERROR: Connection failed for " & .Name
                GoTo NextSheet 
            End If
            
            'Calculate last row
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            LogMessage "RefreshSmartViewTree", "Initial LastRow = " & LastRow
            
            'Delete hierarchy rows except hierarchy name
            If LastRow > HeaderRow Then
                .Rows(HeaderRow & ":" & LastRow - 1).Delete Shift:=xlUp
            End If
            
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            Ret = HypZoomIn(.Name, .Range("A" & LastRow), 1, False)
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            
            LogMessage "RefreshSmartViewTree", "After zoom LastRow = " & LastRow
            
            ' Delete the named range if it exists
            On Error Resume Next
            ThisWorkbook.Names(arrSheets(I, 2)).Delete
            On Error GoTo 0
            
            ' Create named range including ALL rows, even Tree/List rows
            ThisWorkbook.Names.Add Name:=arrSheets(I, 2), RefersTo:=.Range("A" & HeaderRow & ":A" & LastRow)
            
            LogMessage "RefreshSmartViewTree", "Created named range " & arrSheets(I, 2) & " with " & (LastRow - HeaderRow + 1) & " rows"
        End With
NextSheet:
    Next I
    
    LogMessage "RefreshSmartViewTree", "Smart View refresh completed"
End Sub

'==========================================================
' CREATE HIERARCHY QUERIES
' Create M queries with bottom-up parent finding
'==========================================================
Public Sub CreateHierarchyQueries()
    Dim wsLists As Worksheet
    Dim arrSheets As Variant
    Dim i As Long
    Dim rangeName As String
    Dim queryName As String
    Dim queryText As String
    Dim sheetName As String
    Dim ws As Worksheet
    Dim treeOrList As String
    
    LogMessage "CreateHierarchyQueries", "Starting to create queries"
    
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    
    For i = LBound(arrSheets) To UBound(arrSheets)
        sheetName = Trim(arrSheets(i, 1))
        rangeName = Trim(arrSheets(i, 2))
        
        ' Skip if empty
        If sheetName = "" Or rangeName = "" Then
            LogMessage "CreateHierarchyQueries", "Skipping empty entry at row " & i
            GoTo NextQuery
        End If
        
        LogMessage "CreateHierarchyQueries", "Processing " & sheetName & " with range " & rangeName
        
        queryName = sheetName & "_FlatTable"
        
        ' Find the worksheet
        Set ws = ThisWorkbook.Worksheets(sheetName)
        
        ' Get Tree/List designation
        treeOrList = UCase(Trim(ws.Range("D7").Value))
        LogMessage "CreateHierarchyQueries", "Sheet type: " & treeOrList
        
        ' Build M code
        queryText = BuildBottomUpParentQuery(rangeName, treeOrList)
        
        ' Update or create query
        On Error Resume Next
        ' Try to update existing query
        ThisWorkbook.Queries(queryName).Formula = queryText
        
        ' If error, the query doesn't exist or another issue occurred
        If Err.Number <> 0 Then
            LogMessage "CreateHierarchyQueries", "Error updating query: " & Err.Description
            
            ' Try to delete if it exists
            On Error Resume Next
            ThisWorkbook.Connections(queryName).Delete
            LogMessage "CreateHierarchyQueries", "Deleted existing connection"
            
            On Error Resume Next
            ' Create new query
            ThisWorkbook.Queries.Add Name:=queryName, Formula:=queryText
            If Err.Number <> 0 Then
                LogMessage "CreateHierarchyQueries", "ERROR creating query: " & Err.Description
            Else
                LogMessage "CreateHierarchyQueries", "Created new query " & queryName
            End If
        Else
            LogMessage "CreateHierarchyQueries", "Updated existing query " & queryName
        End If
        On Error GoTo 0
        
NextQuery:
    Next i
    
    LogMessage "CreateHierarchyQueries", "Query creation completed"
End Sub

'==========================================================
' BUILD BOTTOM-UP INDENT PARENT QUERY
'==========================================================
Public Function BuildBottomUpParentQuery(rangeName As String, treeOrList As String) As String
    Dim skipRows As String
    
    ' Determine how many rows to skip based on Tree/List designation
    If treeOrList = "TREE" Then
        skipRows = "1"
    ElseIf treeOrList = "LIST" Then
        skipRows = "2"
    Else
        skipRows = "0"
    End If
    
    LogMessage "BuildBottomUpParentQuery", "Building query for " & rangeName & " with skipRows=" & skipRows
    
    Dim mCode As String
    
    mCode = "let" & vbCrLf
    mCode = mCode & "    Source = Excel.CurrentWorkbook(){[Name=""" & rangeName & """]}[Content]," & vbCrLf
    
    ' Handle removing last row(s) for Tree/List
    If skipRows <> "0" Then
        mCode = mCode & "    row_count = Table.RowCount(Source)," & vbCrLf
        mCode = mCode & "    data_rows = if row_count > " & skipRows & " then Table.FirstN(Source, row_count - " & skipRows & ") else Source," & vbCrLf
    Else
        mCode = mCode & "    data_rows = Source," & vbCrLf
    End If
    
    mCode = mCode & "    filtered_rows = Table.SelectRows(data_rows, each [Column1] <> null and [Column1] <> """")," & vbCrLf
    mCode = mCode & "    indexed_rows = Table.AddIndexColumn(filtered_rows, ""RowIndex"", 0, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "    with_indent = Table.AddColumn(indexed_rows, ""Indentation"", each Text.Length([Column1]) - Text.Length(Text.TrimStart([Column1])), Int64.Type)," & vbCrLf
    mCode = mCode & "    with_value = Table.AddColumn(with_indent, ""Value"", each Text.Trim([Column1]), type text)," & vbCrLf
    mCode = mCode & "    clean_table = Table.SelectColumns(with_value, {""RowIndex"", ""Indentation"", ""Value""})," & vbCrLf
    mCode = mCode & "    buffered_table = Table.Buffer(clean_table)," & vbCrLf
    
    ' Add parent detection - BOTTOM-UP approach (parents are BELOW current row)
    mCode = mCode & "    with_parent = Table.AddColumn(buffered_table, ""Parent"", (current_row) => let" & vbCrLf
    mCode = mCode & "        current_indent = current_row[Indentation]," & vbCrLf
    mCode = mCode & "        current_index = current_row[RowIndex]," & vbCrLf
    mCode = mCode & "        potential_parents = Table.SelectRows(buffered_table, each [RowIndex] > current_index and [Indentation] < current_indent)," & vbCrLf
    mCode = mCode & "        sorted_parents = Table.Sort(potential_parents, {{""Indentation"", Order.Descending}, {""RowIndex"", Order.Ascending}})," & vbCrLf
    mCode = mCode & "        parent_value = if Table.IsEmpty(sorted_parents) then """" else sorted_parents{0}[Value]" & vbCrLf
    mCode = mCode & "    in" & vbCrLf
    mCode = mCode & "        parent_value)," & vbCrLf
    
    mCode = mCode & "    final_table = Table.SelectColumns(with_parent, {""Value"", ""Parent""})" & vbCrLf
    mCode = mCode & "in" & vbCrLf
    mCode = mCode & "    final_table"
    
    BuildBottomUpParentQuery = mCode
End Function

'==========================================================
' LOGGING FUNCTION
'==========================================================
Public Sub LogMessage(procName As String, message As String)
    Dim wsLog As Worksheet
    Dim nextRow As Long
    
    ' Create or get the log sheet
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("Log")
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "Log"
        ' Create headers
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "Procedure"
        wsLog.Range("C1").Value = "Message"
        wsLog.Range("A1:C1").Font.Bold = True
    End If
    On Error GoTo 0
    
    ' Find the next empty row
    nextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Log the message
    wsLog.Cells(nextRow, 1).Value = Format(Now, "yyyy-mm-dd HH:mm:ss")
    wsLog.Cells(nextRow, 2).Value = procName
    wsLog.Cells(nextRow, 3).Value = message
    
    ' Format the sheet for readability
    wsLog.Columns("A:C").AutoFit
End Sub
