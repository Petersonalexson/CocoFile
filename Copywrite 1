import logging
import pandas as pd
import warnings
from openpyxl import load_workbook
from openpyxl.comments import Comment

# -----------------------------------------------------------------------------
# 1. Logging and warnings setup
# -----------------------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

# -----------------------------------------------------------------------------
# 2. File paths and sheet names (adjust to match your environment)
# -----------------------------------------------------------------------------
MAP_FILE_PATH = r"C:\Users\alexp\OneDrive\Desktop\MAP.xlsx"
BANI_FILE_PATH = r"C:\Users\alexp\OneDrive\Desktop\BANI.xlsx"

MAPPING_SHEET = "Mapping Main"
XRP_SHEET     = "XRP"
COPYWRITE_SHEET_NAME = "Copywrite"

# -----------------------------------------------------------------------------
# 3. Load the mapping data (MAP.xlsx) and filter for "Copywrite" accounts
# -----------------------------------------------------------------------------
logging.info("Loading mapping data from MAP.xlsx...")
map_df = pd.read_excel(MAP_FILE_PATH, sheet_name=MAPPING_SHEET)

# Drop rows where 'Account' is missing
map_df = map_df.dropna(subset=["Account"])

# Convert 'Account' to string
map_df["Account"] = map_df["Account"].astype(str).str.strip()
map_df["Description 2"] = map_df["Description 2"].astype(str).str.strip()

# Keep only those where 'Description 2' == "Copywrite"
copywrite_map = map_df[map_df["Description 2"] == "Copywrite"]
if copywrite_map.empty:
    logging.warning("No mapping rows found for 'Copywrite'. Exiting.")
    exit()

# Build a set of valid "Copywrite" accounts
copywrite_accounts = set(copywrite_map["Account"].unique())
logging.info(f"Found {len(copywrite_accounts)} 'Copywrite' account(s).")

# -----------------------------------------------------------------------------
# 4. Load the BANI (XRP) data
#    We need columns: Nat Account, Amount, XO number, Journal Description,
#    plus XO CC if it exists. (User mentioned 'order by XO CC' â€” we assume it's
#    in a column named 'XO CC' or 'Centru' or something similar. If not, adapt.)
# -----------------------------------------------------------------------------
logging.info("Loading BANI (XRP) data...")
xrp_df = pd.read_excel(BANI_FILE_PATH, sheet_name=XRP_SHEET)

# Let's assume the columns are: ["Nat Account", "Amount", "XO number", "Journal Description", "XO CC"]
# If "XO CC" is called something else (e.g., "Centru"), adapt accordingly.
needed_cols = ["Nat Account", "Amount", "XO number", "Journal Description", "XO CC"]
xrp_df = xrp_df[needed_cols].dropna(subset=["Nat Account", "Amount"])

# Convert types
xrp_df["Nat Account"] = xrp_df["Nat Account"].astype(str).str.strip()
xrp_df["XO number"] = xrp_df["XO number"].fillna("").astype(str).str.strip()
xrp_df["Journal Description"] = xrp_df["Journal Description"].fillna("").astype(str).str.strip()
xrp_df["XO CC"] = xrp_df["XO CC"].fillna("").astype(str).str.strip()

xrp_df["Amount"] = xrp_df["Amount"].astype(float)

# Filter to only those rows where 'Nat Account' is in copywrite_accounts
filtered_df = xrp_df[xrp_df["Nat Account"].isin(copywrite_accounts)]
if filtered_df.empty:
    logging.info("No rows in XRP match the 'Copywrite' accounts. Exiting.")
    exit()

logging.info(f"Filtered down to {len(filtered_df)} row(s) matching 'Copywrite' accounts.")

# -----------------------------------------------------------------------------
# 5. Some rows have no XO number, but they might match by Journal Description
#    We'll define a small dictionary of {keyword -> XO number}, just as an example.
#    If the row has no XO number, we look for any of these keywords in the Journal
#    Description. If found, we assign that XO number. Otherwise, "Unmapped".
# -----------------------------------------------------------------------------
# Example: let's say if the Journal Description has the word "royalty", we treat it as XO number "9999".
# Expand or adapt to your real scenario.
keyword_to_xo = {
    "royalty": "9999",
    "fee": "8888",
    "abc": "7777"  # etc.
}

def assign_xo_number(row):
    """Returns the best XO number for a given row.
       1) If row['XO number'] is not blank, use it.
       2) Else, check row['Journal Description'] for a known keyword -> XO map.
       3) If not found, return "" (meaning unmapped).
    """
    raw_xo = row["XO number"].strip()
    if raw_xo:
        return raw_xo
    
    # Otherwise, search for keywords
    jdesc = row["Journal Description"].lower()
    for kw, forced_xo in keyword_to_xo.items():
        if kw in jdesc:
            return forced_xo
    
    return ""  # no match, remain unmapped

# Create a column "Resolved XO number"
filtered_df["Resolved XO number"] = filtered_df.apply(assign_xo_number, axis=1)

# -----------------------------------------------------------------------------
# 6. Now we can group by (Resolved XO number, XO CC) and sum Amount
#    We'll skip rows where Resolved XO number is blank (unmapped).
# -----------------------------------------------------------------------------
groupable_df = filtered_df[filtered_df["Resolved XO number"] != ""].copy()

aggregated = (
    groupable_df
    .groupby(["Resolved XO number", "XO CC"], dropna=False)["Amount"]
    .sum()
    .reset_index()
)

logging.info(f"Aggregated {len(aggregated)} row(s).")

# We'll build a dict keyed by (xo_number, xo_cc) -> total
aggregator = {}
for _, row in aggregated.iterrows():
    xnum = row["Resolved XO number"]
    xcc  = row["XO CC"]
    amt  = row["Amount"]
    aggregator[(xnum, xcc)] = amt

logging.info(f"Created aggregator with {len(aggregator)} (XO number, XO CC) entries.")

# -----------------------------------------------------------------------------
# 7. Open the Copywrite sheet in BANI.xlsx and update "Jun Actual" in col S,
#    with XO number in col D, XO CC in col E, row 15 is header, data from row 16 down.
# -----------------------------------------------------------------------------
wb = load_workbook(BANI_FILE_PATH)
if COPYWRITE_SHEET_NAME not in wb.sheetnames:
    logging.warning(f"Sheet '{COPYWRITE_SHEET_NAME}' not found in {BANI_FILE_PATH}. Exiting.")
    wb.close()
    exit()

ws_copy = wb[COPYWRITE_SHEET_NAME]
logging.info(f"Updating sheet '{COPYWRITE_SHEET_NAME}'...")

# Hard-code columns:
col_xo_number = 4  # D
col_xo_cc     = 5  # E
col_jun_actual= 19 # S

header_row = 15
start_row  = 16
max_row    = ws_copy.max_row

for r in range(start_row, max_row + 1):
    val_xo_num = ws_copy.cell(row=r, column=col_xo_number).value
    val_xo_cc  = ws_copy.cell(row=r, column=col_xo_cc).value

    # Convert to strings
    xnum = str(val_xo_num).strip() if val_xo_num else ""
    xcc  = str(val_xo_cc).strip()  if val_xo_cc  else ""

    if not xnum and not xcc:
        # blank row, skip
        continue

    key = (xnum, xcc)
    if key in aggregator:
        sum_val = aggregator[key]

        target_cell = ws_copy.cell(row=r, column=col_jun_actual)
        target_cell.value = sum_val

        # Clear old comment
        if target_cell.comment:
            target_cell.comment = None

        # Add new comment
        target_cell.comment = Comment("Updated by script", "Script")

        logging.info(f"Row {r}: (XO number='{xnum}', XO CC='{xcc}') => {sum_val}")
    else:
        # Not found in aggregator
        logging.debug(f"Row {r}: (XO number='{xnum}', XO CC='{xcc}') not mapped in aggregator; skipping.")

# -----------------------------------------------------------------------------
# 8. Save the workbook
# -----------------------------------------------------------------------------
logging.info("Saving updates to BANI workbook...")
wb.save(BANI_FILE_PATH)
wb.close()
logging.info("All done.")
