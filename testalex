def transform_alfa(
    file_path: Path,
    excluded_keys: set,
    pre_melt_exclude_rules: list = None,
    post_melt_bad_dimensions: list = None,
    post_melt_bad_attributes: list = None,
    dimension_rename_dict: dict = None,
    attribute_rename_dict: dict = None,
    sheet_name: str = "Sheet1",
    skip_rows: int = 3
) -> pd.DataFrame:
    """
    Transforms the Alfa (Excel) data.

    Steps:
      1) Read Excel
      2) Pre-melt filter (remove rows by certain columns)
      3) Rename 'Dimension_Name' to 'Name'
      4) Melt DataFrame to include 'Name' as an attribute
      5) Assign 'NameID' based on 'Name' attribute
      6) Build 'Key' and exclude based on exclusion table
      7) Remove duplicates
      8) Return final DataFrame with [Key, Dimension, NameID, Attribute, Value]
    """
    if not file_path.is_file():
        print(f"[Alfa] File not found: {file_path}")
        return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

    # 1) Read Excel
    df = pd.read_excel(file_path, sheet_name=sheet_name, skiprows=skip_rows)
    print(f"[Alfa] Initial rows: {len(df)}")
    if df.shape[1] < 4:
        print("[Alfa] Warning: fewer than 4 columns. Returning empty.")
        return pd.DataFrame(columns=["Key", "Dimension", "NameID", "Attribute", "Value"])

    # 2) Pre-melt exclude
    df = filter_pre_melt(df, pre_melt_exclude_rules)

    # 3) Rename 'Dimension_Name' to 'Name'
    df.rename(columns={
        df.columns[2]: "Name",  # Assuming the third column is 'Dimension_Name'
        df.columns[3]: "First"  # Rename if necessary; adjust based on actual data
    }, inplace=True)
    print(f"[Alfa] Columns after renaming: {df.columns.tolist()}")  # **Debug**

    # 4) Melt DataFrame to include 'Name' as an attribute
    # Assuming 'Dimension' is another column in the DataFrame
    if 'Dimension' not in df.columns:
        print("[Alfa] Warning: 'Dimension' column not found.")
        # Handle accordingly, e.g., assign a default value or skip processing
        df['Dimension'] = pd.NA  # Assign NaN if 'Dimension' is missing

    id_vars = ["Dimension"]  # Columns to keep fixed during melt
    # Include all columns except 'Dimension' as value_vars, including 'Name'
    val_vars = [c for c in df.columns if c not in id_vars]
    print(f"[Alfa] id_vars: {id_vars}, val_vars: {val_vars}")  # **Debug**

    df_melt = df.melt(
        id_vars=id_vars,
        value_vars=val_vars,
        var_name="Attribute",
        value_name="Value"
    )
    print(f"[Alfa] Rows after melt: {len(df_melt)}")  # **Debug**

    # 5) Rename dimension/attribute if needed
    if dimension_rename_dict:
        df_melt["Dimension"] = df_melt["Dimension"].replace(dimension_rename_dict)
        print(f"[Alfa] Dimensions after renaming: {df_melt['Dimension'].unique()}")  # **Debug**
    if attribute_rename_dict:
        df_melt["Attribute"] = df_melt["Attribute"].replace(attribute_rename_dict)
        print(f"[Alfa] Attributes after renaming: {df_melt['Attribute'].unique()}")  # **Debug**

    # 6) Exclude certain Dimensions or Attributes
    df_melt = exclude_dimension_attribute(
        df_melt,
        bad_dimensions=post_melt_bad_dimensions,
        bad_attributes=post_melt_bad_attributes
    )
    print(f"[Alfa] Rows after post-melt exclusion: {len(df_melt)}")  # **Debug**

    # 7) Assign NameID from 'Name' attribute
    # Locate rows where Attribute is 'Name' and assign NameID
    name_mask = (df_melt["Attribute"] == "Name")
    df_melt.loc[name_mask, "NameID"] = df_melt.loc[name_mask, "Value"]
    # Forward fill NameID within each Dimension group to propagate NameID to other attributes
    df_melt["NameID"] = df_melt.groupby("Dimension")["NameID"].ffill()
    print(f"[Alfa] Rows after assigning NameID:\n{df_melt[['Dimension', 'NameID']].drop_duplicates().head()}")  # **Debug**

    # 8) Build Key
    df_melt["Key"] = df_melt.apply(
        lambda row: f"{row['Dimension']} | {row['NameID']} | {row['Attribute']} | {row['Value']}",
        axis=1
    )
    print(f"[Alfa] Sample Keys:\n{df_melt['Key'].head()}")  # **Debug**

    # 9) Exclude rows based on Keys
    before_exclusion = len(df_melt)
    df_melt = df_melt[~df_melt["Key"].isin(excluded_keys)]
    after_exclusion = len(df_melt)
    print(f"[Alfa] Excluded {before_exclusion - after_exclusion} rows based on excluded_keys.")  # **Debug**

    # 10) Remove duplicates if necessary
    before_dedup = len(df_melt)
    df_melt.drop_duplicates(subset=["Key"], inplace=True)
    after_dedup = len(df_melt)
    print(f"[Alfa] Removed {before_dedup - after_dedup} duplicate rows.")  # **Debug**

    # 11) Final DataFrame
    final_df = df_melt[["Key", "Dimension", "NameID", "Attribute", "Value"]]
    print(f"[Alfa] Final rows: {len(final_df)}")  # **Debug**
    return final_df
