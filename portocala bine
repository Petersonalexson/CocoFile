import pandas as pd
import numpy as np

def categorize_row(description, min_threshold=3):

    if not isinstance(description, str):

        return "No Description"

    desc_lower = description.lower()


    acc_count = desc_lower.count("accural")   
    rev_count = desc_lower.count("reversal")

    total = acc_count + rev_count

    if total < min_threshold:

        return description
    else:
        # We have enough hits; figure out which category
        if acc_count > 0 and rev_count > 0:
            return "Accural + Reversal"
        elif acc_count > 0:
            return "Accural"
        else:
            return "Reversal"

# part 2

import pandas as pd

df = pd.read_excel("your_file.xlsx")

df_pivot = df.pivot_table(
    index=["CC", "XO", "VOICE DATE", "JL Description"], 
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

df_pivot = df_pivot.sort_values(by="XO", ascending=True)

print(df_pivot)
df_pivot.to_excel("output.xlsx", index=False)

# part 3

import pandas as pd

df = pd.read_excel("your_file.xlsx")

has_voice_date = df["VOICE DATE"].notna()

missing_xo = df["XO"].isna()

desc_lower = df["JL Description"].astype(str).str.lower()
has_acc_or_rev = desc_lower.str.contains("accural") | desc_lower.str.contains("reversal")

rows_to_keep = has_voice_date | ((df["VOICE DATE"].isna() | missing_xo) & has_acc_or_rev)

df_filtered = df[rows_to_keep]

df_pivot = df_filtered.pivot_table(
    index=["CC", "XO", "VOICE DATE", "JL Description"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

df_pivot = df_pivot.sort_values(by="XO", ascending=True)

print(df_pivot)
df_pivot.to_excel("output.xlsx", index=False)

# part 4

import pandas as pd

df = pd.read_excel("your_file.xlsx")

missing_xo = df["XO"].isna()
missing_voice_date = df["VOICE DATE"].isna()
missing_voice_num = df["VOICE NUM"].isna()

all_missing = missing_xo & missing_voice_date & missing_voice_num

combined_text = (
    df["JN Writing"].fillna("").astype(str) + " " +
    df["JL Description"].fillna("").astype(str)
).str.lower()

has_acc_or_rev = combined_text.str.contains("accrual") | combined_text.str.contains("reversal")

rows_to_keep = (~all_missing) | (all_missing & has_acc_or_rev)

df_filtered = df[rows_to_keep].copy()

pivot_index = ["CC", "XO", "VOICE DATE", "VOICE NUM", "JN Writing", "JL Description"]

df_pivot = df_filtered.pivot_table(
    index=pivot_index,
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
)

df_pivot = df_pivot.reset_index()

df_pivot = df_pivot.sort_values(by="XO", ascending=True)

print(df_pivot)
df_pivot.to_excel("output.xlsx", index=False)

# part 4

import pandas as pd

df = pd.read_excel("your_file.xlsx")
mx = df["XO"].isna()
md = df["VOICE DATE"].isna()
mn = df["VOICE NUM"].isna()
am = mx & md & mn
t = (df["JN Writing"].fillna("") + " " + df["JL Description"].fillna("")).str.lower()
r = t.str.contains("accrual|accural|reversal|reversals", case=False, regex=True)
k = (~am) | (am & r)
f = df[k]
p = f.pivot_table(index=["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description"],
                  columns="Period",
                  values="Amount",
                  aggfunc="sum",
                  fill_value=0).reset_index()
p.to_excel("output.xlsx", index=False)

# part 5

import pandas as pd

df = pd.read_excel("your_file.xlsx")

# Part 1: Original aggregation with whatever columns exist
possible_index_cols = ["CC","JN Writing","JL Description","XO","VOICE DATE","VOICE NUM"]
index_cols = [c for c in possible_index_cols if c in df.columns]

p1 = df.pivot_table(
    index=index_cols,
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

p1.to_excel("output_original.xlsx", index=False)

# Part 2: Filter rows that contain "accrual"/"accural"/"reversal"/"reversals" in either JN or JL
if ("JN Writing" in df.columns) and ("JL Description" in df.columns):
    combined = (df["JN Writing"].fillna("") + " " + df["JL Description"].fillna("")).str.lower()
    mask = combined.str.contains("accrual|accural|reversal|reversals", case=False, regex=True)
    df2 = df[mask]
else:
    df2 = df.iloc[0:0]  # empty if those columns don't exist

p2 = df2.pivot_table(
    index=index_cols,
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

p2.to_excel("output_accrual_reversal.xlsx", index=False)

# part 6

import pandas as pd

df = pd.read_excel("your_file.xlsx")
mx = df["XO"].isna()
md = df["VOICE DATE"].isna()
mn = df["VOICE NUM"].isna()
am = mx & md & mn
t = (df["JN Writing"].fillna("") + " " + df["JL Description"].fillna("")).str.lower()
r = t.str.contains("accrual|accural|reversal|reversals", case=False, regex=True)
k = (~am) | (am & r)
f = df[k]
p = f.pivot_table(
    index=["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

def highlight_acc_r(row):
    jn = str(row["JN Writing"]).lower()
    jl = str(row["JL Description"]).lower()
    if any(x in jn for x in ["accrual","accural","reversal","reversals"]) \
       or any(x in jl for x in ["accrual","accural","reversal","reversals"]):
        return ["background-color: yellow"] * len(row)
    return ["" for _ in row]

styled = p.style.apply(highlight_acc_r, axis=1)
styled.to_excel("output.xlsx", index=False)

# part 7

import pandas as pd

df = pd.read_excel("your_file.xlsx")

for c in ["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Period","Amount"]:
    if c not in df.columns:
        df[c] = ""
df[["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]] = df[["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]].fillna("")

df["combined"] = (df["JN Writing"].astype(str) + " " + df["JL Description"].astype(str)).str.lower()

mask_accrual_rev = df["combined"].str.contains("accrual|accural|reversal|reversals", case=False, regex=True)
df_accrual_rev = df[mask_accrual_rev].copy()

p1 = df_accrual_rev.pivot_table(
    index=["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()
p1["Section"] = "Accrual/Reversal"

df_voice_date = df[df["VOICE DATE"] != ""].copy()

p2 = df_voice_date.pivot_table(
    index=["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()
p2["Section"] = "Voice Date"

final = pd.concat([p1, p2], ignore_index=True)

cols = ["Section","JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"]
remaining = [c for c in final.columns if c not in cols]
final = final[cols + remaining]

final.to_excel("output.xlsx", index=False)

# part 8

import pandas as pd

df = pd.read_excel("your_file.xlsx")

# Make sure these columns exist; if missing, create them as blank
needed_cols = ["Period","CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]
for c in needed_cols:
    if c not in df.columns:
        df[c] = ""
df[needed_cols] = df[needed_cols].fillna("")

# Combine JN + JL for searching
df["combined"] = (df["JN Writing"].astype(str) + " " + df["JL Description"].astype(str)).str.lower()

# PART 1: Accrual/Reversal detection
mask_accrual_rev = df["combined"].str.contains("accrual|accural|reversal|reversals", case=False, regex=True)
df_accrual_rev = df[mask_accrual_rev].copy()

p1 = df_accrual_rev.pivot_table(
    index=["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

p1["Section"] = "Accrual/Reversal"

# PART 2: Voice Date present
df_voice_date = df[df["VOICE DATE"] != ""].copy()

p2 = df_voice_date.pivot_table(
    index=["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

p2["Section"] = "Voice Date"

# Combine both pivot results
final_pivot = pd.concat([p1, p2], ignore_index=True)

# Now "Period" is currently across columns. We want to "separate amounts by Period"
# by melting so that each (row + period) is a separate row.
# After the melt, we'll have columns: 
# [JN Writing, JL Description, CC, XO, VOICE DATE, VOICE NUM, Section, Period, Amount]

id_vars = ["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM","Section"]
melted = final_pivot.melt(
    id_vars=id_vars,
    var_name="PeriodHeaderA1",  # rename the pivoted column
    value_name="Amount"
)

# Reorder columns if desired
final_cols = ["Section","JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM","PeriodHeaderA1","Amount"]
melted = melted[final_cols]

# Write out
melted.to_excel("output.xlsx", index=False)

# part 7

import pandas as pd

df = pd.read_excel("your_file.xlsx")

for c in ["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Period","Amount"]:
    if c not in df.columns:
        df[c] = ""
df[["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]] = df[["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]].fillna("")

df["combined"] = (df["JN Writing"].astype(str) + " " + df["JL Description"].astype(str)).str.lower()

mask_accrual_rev = df["combined"].str.contains("accrual|accural|reversal|reversals", case=False, regex=True)
df_accrual_rev = df[mask_accrual_rev].copy()

p1 = df_accrual_rev.pivot_table(
    index=["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()
p1["Section"] = "Accrual/Reversal"

df_voice_date = df[df["VOICE DATE"] != ""].copy()

p2 = df_voice_date.pivot_table(
    index=["JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()
p2["Section"] = "Voice Date"

final = pd.concat([p1, p2], ignore_index=True)

cols = ["Section","JN Writing","JL Description","CC","XO","VOICE DATE","VOICE NUM"]
remaining = [c for c in final.columns if c not in cols]
final = final[cols + remaining]

final.to_excel("output.xlsx", index=False)

# part 7

import pandas as pd
from difflib import SequenceMatcher

def similarity(a, b):
    """Return a float in [0,1] measuring how similar strings a and b are."""
    return SequenceMatcher(None, a, b).ratio()

def best_fuzzy_match(text_to_match, df2_names, min_ratio=0.7):
    """
    Given a single string `text_to_match` and a Series `df2_names` of possible names,
    find the best match (highest ratio). If best ratio < min_ratio, return None.
    Returns (best_index_in_df2, best_ratio) or (None, 0).
    """
    best_idx = None
    best_ratio = 0.0
    for idx, candidate in df2_names.items():
        r = similarity(text_to_match, candidate)
        if r > best_ratio:
            best_ratio = r
            best_idx = idx
    if best_ratio >= min_ratio:
        return best_idx, best_ratio
    else:
        return None, 0

# ----------------------------------------------------------------
# 1) Read Sheet1, filter rows, pivot so Period is multiple columns
# ----------------------------------------------------------------
df1 = pd.read_excel("your_file.xlsx", sheet_name="Sheet1")

# Make sure columns exist
need1 = ["Period","CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]
for c in need1:
    if c not in df1.columns:
        df1[c] = ""
df1[need1] = df1[need1].fillna("")

# Detect accrual/reversal text
df1["combined"] = (
    df1["JN Writing"].astype(str).str.lower() 
    + " " 
    + df1["JL Description"].astype(str).str.lower()
)
mask_accrual_rev = df1["combined"].str.contains("accrual|accural|reversal|reversals", case=False, regex=True)

# Keep rows if XO, VOICE DATE, or VOICE NUM present, OR (all missing but text has accrual/reversal)
mx = df1["XO"].eq("")
md = df1["VOICE DATE"].eq("")
mn = df1["VOICE NUM"].eq("")
all_missing = mx & md & mn
keep_mask = (~all_missing) | (all_missing & mask_accrual_rev)
df_filtered = df1[keep_mask].copy()

# Pivot on (CC, XO, VOICE DATE, VOICE NUM, JN Writing, JL Description), summing Amount by Period
pvt = df_filtered.pivot_table(
    index=["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description"],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

# Now we "melt" the pivot so that we get a single row per [CC,XO,VOICE...,Period],
# since we want to do fuzzy matching per line.
df_long = pvt.melt(
    id_vars=["CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description"],
    var_name="Period",
    value_name="Amount"
)

# Create a lowercased text for matching with names
df_long["combined_jn_jl"] = (
    df_long["JN Writing"].fillna("").str.lower().str.strip() + " " +
    df_long["JL Description"].fillna("").str.lower().str.strip()
)

# ----------------------------------------------------------------
# 2) Read Sheet2 (Name in col B, PO in col O, CC in col P)
# ----------------------------------------------------------------
df2 = pd.read_excel("your_file.xlsx", sheet_name="Sheet2")

# Make sure the columns are there
need2 = ["Name","PO","CC"]
col_map = {"B":"Name","O":"PO","P":"CC"}  # we expect B1=Name, O1=PO, P1=CC in your actual file
for old_col, new_col in col_map.items():
    if old_col not in df2.columns:
        df2[old_col] = ""
    df2.rename(columns={old_col: new_col}, inplace=True)

df2[need2] = df2[need2].fillna("")

# Also create a lowercased version for matching
df2["NameLower"] = df2["Name"].str.lower().str.strip()

# ----------------------------------------------------------------
# 3) For each row in df_long, find best fuzzy match in df2["NameLower"]
#    Keep all unmatched rows from df_long, with blank name/po/cc.
# ----------------------------------------------------------------
df2_names = df2["NameLower"]

# Prepare columns to hold our matched info
df_long["MatchedName"] = ""
df_long["MatchedPO"] = ""
df_long["MatchedCC"] = ""
df_long["MatchRatio"] = 0.0

for i, row in df_long.iterrows():
    # combined_jn_jl is the text we compare
    text = row["combined_jn_jl"]
    if not text.strip():
        # If there's literally no text, skip matching
        continue

    best_idx, ratio = best_fuzzy_match(text, df2_names, min_ratio=0.70)
    if best_idx is not None:
        # We found a match above threshold
        df_long.at[i, "MatchedName"] = df2.at[best_idx, "Name"]
        df_long.at[i, "MatchedPO"]   = df2.at[best_idx, "PO"]
        df_long.at[i, "MatchedCC"]   = df2.at[best_idx, "CC"]
        df_long.at[i, "MatchRatio"]  = ratio
    # else leave them blank => "unmatched"

# ----------------------------------------------------------------

# ----------------------------------------------------------------
final = df_long.pivot_table(
    index=[
        "CC","XO","VOICE DATE","VOICE NUM",
        "JN Writing","JL Description",
        "MatchedName","MatchedPO","MatchedCC"
    ],
    columns="Period",
    values="Amount",
    aggfunc="sum",
    fill_value=0
).reset_index()

# ----------------------------------------------------------------
# 5) Write to Excel
# ----------------------------------------------------------------
with pd.ExcelWriter("output.xlsx", engine="openpyxl") as writer:
    # "LongFormat" sheet: one row per Period
    df_long.to_excel(writer, sheet_name="LongFormat_WithFuzzy", index=False)

    # "FinalPivot" sheet: wide by Period
    final.to_excel(writer, sheet_name="FinalPivot", index=False)

# part 8

import pandas as pd
from difflib import SequenceMatcher

def similarity(a, b):
    """Return a float in [0,1], measuring how similar two strings are."""
    return SequenceMatcher(None, a, b).ratio()

def find_best_fuzzy_match(text_to_match, df2_names, min_ratio=0.70):
    """
    Given a single string `text_to_match` (already lowercased)
    and a Series `df2_names` (also lowercased),
    return (best_index, best_ratio) if there's a match >= min_ratio, else (None, 0.0).
    """
    best_idx = None
    best_ratio = 0.0
    for idx, candidate in df2_names.items():
        r = similarity(text_to_match, candidate)
        if r > best_ratio:
            best_ratio = r
            best_idx = idx
    if best_ratio >= min_ratio:
        return best_idx, best_ratio
    else:
        return None, 0.0

# ----------------------------------------------------------------
# 1) Read Sheet1, filter rows
# ----------------------------------------------------------------
df1 = pd.read_excel("your_file.xlsx", sheet_name="Sheet1")

# Ensure columns exist; fill missing
need1 = ["Period","CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount"]
for c in need1:
    if c not in df1.columns:
        df1[c] = ""
df1[need1] = df1[need1].fillna("")

# Detect accrual/reversal text
df1["combined"] = (
    df1["JN Writing"].astype(str).str.lower() 
    + " " 
    + df1["JL Description"].astype(str).str.lower()
)
mask_accrual_rev = df1["combined"].str.contains("accrual|accural|reversal|reversals", case=False, regex=True)

# Keep rows if XO, VOICE DATE, or VOICE NUM present, OR (all missing but text has accrual/reversal)
mx = df1["XO"].eq("")
md = df1["VOICE DATE"].eq("")
mn = df1["VOICE NUM"].eq("")
all_missing = mx & md & mn
keep_mask = (~all_missing) | (all_missing & mask_accrual_rev)
df_filtered = df1[keep_mask].copy()

# We'll match by looking at phrases in df_filtered["JL Description"].
# Create a lowercased column for matching.
df_filtered["JL_desc_lower"] = df_filtered["JL Description"].fillna("").str.lower().str.strip()

# ----------------------------------------------------------------
# 2) Read Sheet2 (which already has columns: Name, PO, CC)
# ----------------------------------------------------------------
df2 = pd.read_excel("your_file.xlsx", sheet_name="Sheet2")

need2 = ["Name","PO","CC"]
for c in need2:
    if c not in df2.columns:
        df2[c] = ""
df2[need2] = df2[need2].fillna("")

# Create a lowercased column for Name
df2["NameLower"] = df2["Name"].str.lower().str.strip()

# ----------------------------------------------------------------
# 3) Two-step matching: 
#    A) Check if Name is a SUBSTRING of JL Description (case-insensitive)
#    B) If no substring match, do fuzzy
# ----------------------------------------------------------------
df_filtered["MatchedName"] = ""
df_filtered["MatchedPO"]   = ""
df_filtered["MatchedCC"]   = ""
df_filtered["MatchMethod"] = ""    # "substring" or "fuzzy"
df_filtered["MatchRatio"]  = 0.0

for i, row in df_filtered.iterrows():
    desc_text = row["JL_desc_lower"]
    if not desc_text:
        # If there's no text at all, skip
        continue

    # ---- Step A: Substring check ----
    # We'll scan each name in df2["NameLower"].
    matched = False
    for idx, name_l in df2["NameLower"].items():
        if name_l and (name_l in desc_text):
            # Found a substring match
            df_filtered.at[i, "MatchedName"] = df2.at[idx, "Name"]
            df_filtered.at[i, "MatchedPO"]   = df2.at[idx, "PO"]
            df_filtered.at[i, "MatchedCC"]   = df2.at[idx, "CC"]
            df_filtered.at[i, "MatchMethod"] = "substring"
            df_filtered.at[i, "MatchRatio"]  = 1.0
            matched = True
            break  # stop at the first substring match we find

    if matched:
        continue  # No fuzzy needed

    # ---- Step B: Fuzzy match if no substring match was found ----
    best_idx, best_ratio = find_best_fuzzy_match(desc_text, df2["NameLower"], min_ratio=0.70)
    if best_idx is not None:
        df_filtered.at[i, "MatchedName"] = df2.at[best_idx, "Name"]
        df_filtered.at[i, "MatchedPO"]   = df2.at[best_idx, "PO"]
        df_filtered.at[i, "MatchedCC"]   = df2.at[best_idx, "CC"]
        df_filtered.at[i, "MatchMethod"] = "fuzzy"
        df_filtered.at[i, "MatchRatio"]  = best_ratio
    # else remain blank => unmatched

# ----------------------------------------------------------------
# 4) Write out to Excel - single sheet with "names next to amount"
# ----------------------------------------------------------------
output_cols = [
    "Period","CC","XO","VOICE DATE","VOICE NUM","JN Writing","JL Description","Amount",
    "MatchedName","MatchedPO","MatchedCC","MatchMethod","MatchRatio"
]
df_output = df_filtered[output_cols].copy()

with pd.ExcelWriter("output.xlsx", engine="openpyxl") as writer:
    df_output.to_excel(writer, sheet_name="FinalWithNames", index=False)




















