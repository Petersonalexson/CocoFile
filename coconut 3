Option Explicit

' Main procedure to refresh Smart View hierarchies and create query tables
Sub RefreshSmartViewHierarchiesAndCreateTables()
    ' First refresh all the Smart View hierarchies
    RefreshSmartViewHierarchies
    
    ' Then create query tables using Power Query
    CreateQueryTablesFromHierarchies
End Sub

' Procedure to refresh Smart View hierarchies
Sub RefreshSmartViewHierarchies()
    Dim arrSheets As Variant
    Dim ws As Worksheet
    Dim ConnectionName As String
    Dim Ret As Long, HeaderRow As Long, LastRow As Long, i As Long
    Dim ConnStatus As Integer
    
    With wsLists
        ConnectionName = .Range("nmConnectionName")
        arrSheets = .Range("Hierarchy_Matrix")
    End With
    
    HeaderRow = 4
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    For i = LBound(arrSheets) To UBound(arrSheets)
        Set ws = ThisWorkbook.Worksheets(arrSheets(i, 1))
        
        With ws
            Ret = HypUIConnect(.Name, "", "", ConnectionName)
            ConnStatus = HypConnected(.Name)
            
            If ConnStatus <> -1 Then
                MsgBox "Connection failed for sheet: " & .Name, vbExclamation
                GoTo NextSheet
            End If
            
            ' Calculate last row
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            
            ' Delete hierarchy rows except hierarchy name
            If LastRow > HeaderRow Then
                .Rows(HeaderRow & ":" & LastRow - 1).Delete Shift:=xlUp
            End If
            
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            Ret = HypZoomIn(.Name, .Range("A" & LastRow), 1, False) ' Drilldown on node
            
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            
            ' Create named range with trimmed name (no spaces)
            Dim rangeName As String
            rangeName = Trim(arrSheets(i, 2))
            
            ' Check if range name exists and delete it if needed
            On Error Resume Next
            ThisWorkbook.Names(rangeName).Delete
            On Error GoTo 0
            
            ' Create the named range
            ThisWorkbook.Names.Add Name:=rangeName, RefersTo:=ws.Range("A" & HeaderRow & ":A" & LastRow)
        End With
        
NextSheet:
        Set ws = Nothing
    Next i
    
    ' Turn screen updating back on
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

' Procedure to create query tables using Power Query
Sub CreateQueryTablesFromHierarchies()
    Dim arrSheets As Variant
    Dim i As Long
    Dim rangeName As String
    Dim queryName As String
    Dim conn As WorkbookConnection
    Dim queryText As String
    Dim sheetName As String
    Dim ws As Worksheet
    Dim querySheet As Worksheet
    
    ' Get the hierarchy matrix
    With wsLists
        arrSheets = .Range("Hierarchy_Matrix")
    End With
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' Loop through each hierarchy
    For i = LBound(arrSheets) To UBound(arrSheets)
        rangeName = Trim(arrSheets(i, 2))
        sheetName = Trim(arrSheets(i, 1))
        queryName = sheetName & "_Table"
        
        ' Check if the worksheet exists
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(sheetName)
        On Error GoTo 0
        
        If ws Is Nothing Then
            MsgBox "Sheet " & sheetName & " does not exist. Skipping this hierarchy.", vbExclamation
            GoTo NextQuery
        End If
        
        ' Check if query sheet exists, if not, create it
        On Error Resume Next
        Set querySheet = ThisWorkbook.Worksheets(queryName)
        On Error GoTo 0
        
        If querySheet Is Nothing Then
            ' Create a new sheet for the query table
            Set querySheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
            querySheet.Name = queryName
        Else
            ' Clear existing content
            querySheet.UsedRange.Clear
        End If
        
        ' Build the Power Query M code
        queryText = BuildQueryText(rangeName)
        
        ' Check if the connection already exists
        Dim queryDef As QueryTable
        Dim connExists As Boolean
        connExists = False
        
        On Error Resume Next
        For Each conn In ThisWorkbook.Connections
            If conn.Name = queryName Then
                connExists = True
                Exit For
            End If
        Next conn
        On Error GoTo 0
        
        ' Create or update the query
        If connExists Then
            ' Remove existing query
            On Error Resume Next
            ThisWorkbook.Connections(queryName).Delete
            On Error GoTo 0
        End If
        
        ' Create the query
        Set queryDef = querySheet.QueryTables.Add( _
            Connection:="OLEDB;Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=" & queryName & ";Extended Properties=""""", _
            Destination:=querySheet.Range("A1"))
        
        ' Create the workbook connection for Power Query
        Set conn = ThisWorkbook.Connections.Add2( _
            Name:=queryName, _
            Description:="", _
            ConnectionString:="OLEDB;Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=" & queryName, _
            CommandText:=queryText, _
            lCmdtype:=5, _
            CreateModelConnection:=False, _
            ImportRelationships:=False)
        
        ' Link the query to the worksheet
        queryDef.CommandType = xlCmdSql
        queryDef.CommandText = queryName
        queryDef.BackgroundQuery = False
        queryDef.RefreshStyle = xlOverwriteCells
        queryDef.SaveData = True
        queryDef.PreserveFormatting = True
        queryDef.AdjustColumnWidth = True
        
        ' Refresh the query to load the data
        On Error Resume Next
        queryDef.Refresh BackgroundQuery:=False
        On Error GoTo 0
        
        ' Autofit columns
        querySheet.Columns("A:Z").AutoFit
        
NextQuery:
    Next i
    
    ' Turn screen updating back on
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    MsgBox "Query tables created/updated successfully!", vbInformation, "Process Complete"
End Sub

' Function to build the Power Query M code
Function BuildQueryText(rangeName As String) As String
    Dim mCode As String
    
    mCode = "let" & vbCrLf & _
            "    Source = Excel.CurrentWorkbook(){[Name=""" & rangeName & """]}[Content]," & vbCrLf & _
            "    remove_nulls = Table.SelectRows(Source, each [Column1] <> null and [Column1] <> """")," & vbCrLf & _
            "    #""Duplicated Column"" = Table.DuplicateColumn(remove_nulls, ""Column1"", ""Value"")," & vbCrLf & _
            "    #""Added Custom"" = Table.AddColumn(#""Duplicated Column"", ""Nb Levels"", each List.Count(Text.PositionOfAny([Value], {"" ""}, Occurrence.All))/4, Int64.Type)," & vbCrLf & _
            "    #""Trimmed Text"" = Table.TransformColumns(#""Added Custom"", {{""Value"", Text.Trim, type text}})," & vbCrLf & _
            "    #""Changed Type"" = Table.TransformColumnTypes(#""Trimmed Text"", {{""Column1"", type text}})," & vbCrLf & _
            "    #""Added Index"" = Table.AddIndexColumn(#""Changed Type"", ""Index"", 1, 1, Int64.Type)," & vbCrLf & _
            "    #""Sorted Rows"" = Table.Sort(#""Added Index"", {{""Index"", Order.Descending}})," & vbCrLf & _
            "    max_levels = List.Max(#""Sorted Rows""[Nb Levels])," & vbCrLf & _
            "    list_of_code_levels = List.Generate(" & vbCrLf & _
            "        () => 1," & vbCrLf & _
            "        each _ <= max_levels," & vbCrLf & _
            "        each _ + 1," & vbCrLf & _
            "        each ""Level"" & Text.From(_)" & vbCrLf & _
            "    )," & vbCrLf & _
            "    #""Split Column by Delimiter"" = Table.SplitColumn(#""Sorted Rows"", ""Column1"", Splitter.SplitTextByDelimiter("" "", QuoteStyle.Csv), list_of_code_levels)," & vbCrLf & _
            "    #""Removed Columns1"" = Table.RemoveColumns(#""Split Column by Delimiter"", {""Index"", ""Nb Levels""})," & vbCrLf & _
            "    #""Removed Top Rows"" = Table.Skip(#""Removed Columns1"", 1)," & vbCrLf

    ' Add the unflatten_hierarchy function
    mCode = mCode & _
            "    fnUnflattenHierarchy = let" & vbCrLf & _
            "        unflatten_hierarchy = (data_table as table, value_column_name as text) as table =>" & vbCrLf & _
            "            let" & vbCrLf & _
            "                Source = data_table," & vbCrLf & _
            "                added_index_from_0 = Table.AddIndexColumn(Source, ""GP_Idx"", 0, 1, Int64.Type)," & vbCrLf & _
            "                demote_headers = Table.DemoteHeaders(added_index_from_0)," & vbCrLf & _
            "                transpose_table = Table.Transpose(demote_headers)," & vbCrLf & _
            "                column_names = Table.ColumnNames(transpose_table)," & vbCrLf & _
            "                replace_empty_by_null = Table.ReplaceValue(transpose_table, """", null, Replacer.ReplaceValue, column_names)," & vbCrLf & _
            "                first_fill_down = Table.FillDown(replace_empty_by_null, column_names)," & vbCrLf & _
            "                transpose_table_back = Table.Transpose(first_fill_down)," & vbCrLf & _
            "                promote_headers = Table.PromoteHeaders(transpose_table_back, [PromoteAllScalars=true])," & vbCrLf

    ' Add the helper functions
    mCode = mCode & _
            "                fnGetListOfLevelsColumns = (data_table as table) as list =>" & vbCrLf & _
            "                    let" & vbCrLf & _
            "                        Source = data_table," & vbCrLf & _
            "                        columns_names = List.Buffer(Table.ColumnNames(Source))," & vbCrLf & _
            "                        convert_to_table = Table.FromList(Table.ColumnNames(Source), Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf & _
            "                        filter_level_rows = Table.SelectRows(convert_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level ""))," & vbCrLf & _
            "                        convert_to_list = filter_level_rows[Column1]" & vbCrLf & _
            "                    in" & vbCrLf & _
            "                        convert_to_list," & vbCrLf & _
            "                fnGetMinLevel = (data_table as table) as number =>" & vbCrLf & _
            "                    let" & vbCrLf & _
            "                        Source = data_table," & vbCrLf & _
            "                        get_list_of_columns = Table.ColumnNames(Source)," & vbCrLf & _
            "                        convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf & _
            "                        filtered_levels_to_fill_down = Table.SelectRows(convert_list_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf & _
            "                        split_by_space = Table.SplitColumn(filtered_levels_to_fill_down, ""Column1"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Column1.1"", ""Column1.2""})," & vbCrLf & _
            "                        convert_to_number = Table.TransformColumnTypes(split_by_space, {{""Column1.2"", type number}})," & vbCrLf & _
            "                        min_level = List.Min(convert_to_number[Column1.2])" & vbCrLf & _
            "                    in" & vbCrLf & _
            "                        min_level," & vbCrLf & _
            "                fnGetMaxLevel = (data_table as table) as number =>" & vbCrLf & _
            "                    let" & vbCrLf & _
            "                        Source = data_table," & vbCrLf & _
            "                        get_list_of_columns = Table.ColumnNames(Source)," & vbCrLf & _
            "                        convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf & _
            "                        filtered_levels_to_fill_down = Table.SelectRows(convert_list_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf & _
            "                        split_by_space = Table.SplitColumn(filtered_levels_to_fill_down, ""Column1"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Column1.1"", ""Column1.2""})," & vbCrLf & _
            "                        convert_to_number = Table.TransformColumnTypes(split_by_space, {{""Column1.2"", type number}})," & vbCrLf & _
            "                        max_level = List.Max(convert_to_number[Column1.2])" & vbCrLf & _
            "                    in" & vbCrLf & _
            "                        max_level," & vbCrLf & _
            "                fnGetListOfNonLevelsColumns = (data_table as table) as list =>" & vbCrLf & _
            "                    let" & vbCrLf & _
            "                        Source = data_table," & vbCrLf & _
            "                        get_list_of_columns = List.Buffer(Table.ColumnNames(Source))," & vbCrLf & _
            "                        convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf & _
            "                        filtered_columns_other_than_levels = Table.SelectRows(convert_list_to_table, each not Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf & _
            "                        convert_to_list = filtered_columns_other_than_levels[Column1]" & vbCrLf & _
            "                    in" & vbCrLf & _
            "                        convert_to_list," & vbCrLf

    ' Finish the unflatten_hierarchy function
    mCode = mCode & _
            "                list_of_levels = fnGetListOfLevelsColumns(Source)," & vbCrLf & _
            "                second_fill_down = Table.FillDown(promote_headers, list_of_levels)," & vbCrLf & _
            "                min_level = fnGetMinLevel(Source)," & vbCrLf & _
            "                max_level = fnGetMaxLevel(Source)," & vbCrLf & _
            "                Min_Level_Column_Name = ""Level "" & Number.ToText(min_level)," & vbCrLf & _
            "                Max_Level_Column_Name = ""Level "" & Number.ToText(max_level)," & vbCrLf & _
            "                Columns_Not_To_Unpivot = fnGetListOfNonLevelsColumns(Source)," & vbCrLf & _
            "                unpivoted_levels_columns = Table.UnpivotOtherColumns(second_fill_down, List.Combine({{Max_Level_Column_Name, ""GP_Idx""}, Columns_Not_To_Unpivot}), ""Attribute"", ""NameID"")," & vbCrLf & _
            "                check_if_direct_parent = Table.AddColumn(unpivoted_levels_columns, ""Direct Parent"", each if Record.Field(_, Max_Level_Column_Name) = [NameID] then ""no"" else ""yes"")," & vbCrLf & _
            "                filter_first_level_rows_without_parents = Table.SelectRows(check_if_direct_parent, each ([Direct Parent] = ""no"") and ([Attribute] = Min_Level_Column_Name))," & vbCrLf & _
            "                replace_parent_by_null = Table.ReplaceValue(filter_first_level_rows_without_parents, each [NameID], null, Replacer.ReplaceValue, {""NameID""})," & vbCrLf & _
            "                filter_rows_with_parents = Table.SelectRows(check_if_direct_parent, each [Direct Parent] = ""yes"")," & vbCrLf & _
            "                append_level_0_with_others = Table.Combine({replace_parent_by_null, filter_rows_with_parents})," & vbCrLf & _
            "                duplicate_attribute_column = Table.DuplicateColumn(append_level_0_with_others, ""Attribute"", ""Attribute2"")," & vbCrLf & _
            "                split_to_remove_labels = Table.SplitColumn(duplicate_attribute_column, ""Attribute2"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Attribute2.1"", ""Attribute2.2""})," & vbCrLf & _
            "                convert_to_a_number = Table.TransformColumnTypes(split_to_remove_labels, {{""Attribute2.2"", Int64.Type}})," & vbCrLf & _
            "                get_max_level_for_each_value = Table.Group(convert_to_a_number, {Max_Level_Column_Name}, {(""Max"", each List.Max([Attribute2.2]), type nullable number)})," & vbCrLf & _
            "                convert_max_level_to_text = Table.TransformColumnTypes(get_max_level_for_each_value, {""Max"", type text})," & vbCrLf & _
            "                merge_queries_to_filter = Table.NestedJoin(append_level_0_with_others, {Max_Level_Column_Name}, convert_max_level_to_text, {Max_Level_Column_Name}, ""TableToExpand"", JoinKind.LeftOuter)," & vbCrLf & _
            "                max_level_expanded_column_name = Max_Level_Column_Name & ""_expanded""," & vbCrLf & _
            "                expand_the_merged_result = Table.ExpandTableColumn(merge_queries_to_filter, ""TableToExpand"", {""Max""}, {max_level_expanded_column_name})," & vbCrLf & _
            "                sorted_rows = Table.Sort(expand_the_merged_result, {{""GP_Idx"", Order.Ascending}})," & vbCrLf & _
            "                remove_nulls = Table.SelectRows(sorted_rows, each Record.Field(_, max_level_expanded_column_name) <> null)," & vbCrLf & _
            "                removed_columns = Table.RemoveColumns(remove_nulls, {max_level_expanded_column_name, ""Attribute"", ""Direct Parent"", ""GP_Idx"", value_column_name})," & vbCrLf & _
            "                renamed_columns = Table.RenameColumns(removed_columns, {{Max_Level_Column_Name, value_column_name}, {""NameID"", ""Parent""}})" & vbCrLf & _
            "            in" & vbCrLf & _
            "                renamed_columns" & vbCrLf & _
            "    in" & vbCrLf & _
            "        unflatten_hierarchy," & vbCrLf & _
            "    Result = fnUnflattenHierarchy(#""Removed Top Rows"", ""Value"")" & vbCrLf & _
            "in" & vbCrLf & _
            "    Result"

    BuildQueryText = mCode
End Function

' Helper function to check if a worksheet exists
Function SheetExists(sheetName As String) As Boolean
    Dim ws As Worksheet
    
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets(sheetName)
    On Error GoTo 0
    
    SheetExists = Not ws Is Nothing
End Function
