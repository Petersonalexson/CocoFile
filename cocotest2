import os
import zipfile
from pathlib import Path
import pandas as pd


def transform_alfa_in_memory(
    file_path: Path,
    sheet_name: str = "Sheet1",
    skip_rows: int = 3,
    app_rename_dict: dict = None,
    attribute_rename_dict: dict = None,
    excluded_attributes: list = None,
    include_filters: list = None,
    exclude_filters: list = None
) -> pd.DataFrame:
    df = pd.read_excel(file_path, sheet_name=sheet_name, skiprows=skip_rows)
    df.rename(
        columns={
            df.columns[2]: "App",
            df.columns[3]: "First"
        },
        inplace=True
    )
    if app_rename_dict:
        df["App"] = df["App"].replace(app_rename_dict)
    df["row_id"] = df.index
    if excluded_attributes:
        all_cols = set(df.columns)
        must_keep = {"App", "row_id"}
        to_drop = [
            c for c in all_cols
            if c in excluded_attributes and c not in must_keep
        ]
        df.drop(columns=to_drop, inplace=True, errors="ignore")
    id_vars = ["App", "row_id"]
    value_vars = [c for c in df.columns if c not in id_vars]
    df_melt = df.melt(
        id_vars=id_vars,
        value_vars=value_vars,
        var_name="Attribute",
        value_name="Value"
    )
    original_first_map = df.set_index("row_id")["First"].to_dict()
    df_melt["First"] = df_melt["row_id"].map(original_first_map)
    if attribute_rename_dict:
        df_melt["Attribute"] = df_melt["Attribute"].replace(attribute_rename_dict)

    def find_row_ids_for_filter_list(df_long, filter_list):
        if not filter_list:
            return set()
        matched_ids = set()
        for (f_attr, f_values) in filter_list:
            mask = (df_long["Attribute"] == f_attr) & (df_long["Value"].isin(f_values))
            new_ids = df_long.loc[mask, "row_id"].unique()
            matched_ids.update(new_ids)
        return matched_ids

    all_row_ids = set(df_melt["row_id"].unique())
    if include_filters:
        include_ids = find_row_ids_for_filter_list(df_melt, include_filters)
        all_row_ids = all_row_ids.intersection(include_ids)
    if exclude_filters:
        exclude_ids = find_row_ids_for_filter_list(df_melt, exclude_filters)
        all_row_ids = all_row_ids.difference(exclude_ids)
    df_melt = df_melt[df_melt["row_id"].isin(all_row_ids)]
    df_melt["Key"] = df_melt.apply(
        lambda row: f"{row['App']} | {row['First']} | {row['Attribute']} | {row['Value']}",
        axis=1
    )
    df_melt.drop(columns=["row_id"], inplace=True)
    df_melt = df_melt[["Key", "App", "First", "Attribute", "Value"]]
    df_melt.drop_duplicates(subset=["Key"], inplace=True)
    return df_melt


def compute_app_key(filename: str, remove_substring: str = "_ceaster.txt") -> str:
    base = os.path.basename(filename)
    if remove_substring in base:
        base = base.replace(remove_substring, "")
    else:
        base, _ = os.path.splitext(base)
    return base.replace("_", " ")


def transform_gamma_from_zip_in_memory(zip_file_path: Path) -> pd.DataFrame:
    if not zip_file_path.is_file():
        raise FileNotFoundError(f"ZIP file not found: {zip_file_path}")

    def transform_dataframe(df: pd.DataFrame, app_key: str) -> pd.DataFrame:
        first_col = df.columns[0]
        df = df.copy()
        df["First"] = df[first_col]
        df_melted = df.melt(id_vars=["First"], var_name="Attribute", value_name="Value")
        df_melted.insert(0, "App", app_key)
        df_melted["Key"] = df_melted.apply(
            lambda row: f"{row['App']} | {row['First']} | {row['Attribute']} | {row['Value']}",
            axis=1
        )
        df_melted = df_melted[["Key", "App", "First", "Attribute", "Value"]]
        return df_melted

    combined_df_list = []
    try:
        with zipfile.ZipFile(zip_file_path, "r") as z:
            txt_files = [f for f in z.namelist() if f.endswith(".txt")]
            for txt_file in txt_files:
                app_key = compute_app_key(txt_file)
                with z.open(txt_file) as file_obj:
                    df = pd.read_csv(file_obj, delimiter=",")
                transformed_df = transform_dataframe(df, app_key)
                combined_df_list.append(transformed_df)
        if combined_df_list:
            result_df = pd.concat(combined_df_list, ignore_index=True)
        else:
            result_df = pd.DataFrame(columns=["Key", "App", "First", "Attribute", "Value"])
        return result_df
    except zipfile.BadZipFile:
        return pd.DataFrame(columns=["Key", "App", "First", "Attribute", "Value"])


def read_ex_table(ex_path: Path) -> pd.DataFrame:
    df_ex = pd.read_excel(ex_path, sheet_name="Sheet1")
    return df_ex


def create_comparison_excel(df_alfa: pd.DataFrame, df_gamma: pd.DataFrame, df_ex: pd.DataFrame, comparison_path: Path):
    keys_to_hide = set(df_ex.loc[df_ex["Hide Special"] == "yes", "Key"])
    df_merged = pd.merge(df_alfa, df_gamma, on="Key", how="outer", suffixes=("_Alfa", "_Gamma"))
    df_merged = df_merged[~df_merged["Key"].isin(keys_to_hide)]

    def get_status(row):
        in_alfa = pd.notnull(row["App_Alfa"])
        in_gamma = pd.notnull(row["App_Gamma"])
        if in_alfa and in_gamma:
            return "Matching"
        elif in_alfa:
            return "Missing in Gamma"
        else:
            return "Missing in Alfa"

    df_merged["Status"] = df_merged.apply(get_status, axis=1)
    extra_cols = [c for c in df_ex.columns if c not in ["Key", "Hide Special"]]
    if extra_cols:
        df_merged = pd.merge(df_merged, df_ex[["Key"] + extra_cols], on="Key", how="left")
    final_cols = [
        "Key",
        "App_Alfa", "First_Alfa", "Attribute_Alfa", "Value_Alfa",
        "App_Gamma", "First_Gamma", "Attribute_Gamma", "Value_Gamma",
        "Status"
    ] + extra_cols
    df_merged = df_merged[final_cols]
    df_merged.to_excel(comparison_path, sheet_name="Comparison", index=False)


def main():
    alfa_input = Path("ALO.xlsx")
    df_alfa = transform_alfa_in_memory(
        file_path=alfa_input,
        sheet_name="Sheet1",
        skip_rows=3
    )
    gamma_zip_file = Path("your_zip_file.zip")
    df_gamma = transform_gamma_from_zip_in_memory(gamma_zip_file)
    ex_table_path = Path("Ex_Table.xlsx")
    df_ex = read_ex_table(ex_table_path)
    comparison_file = Path("Comparison.xlsx")
    create_comparison_excel(df_alfa, df_gamma, df_ex, comparison_file)


if __name__ == "__main__":
    main()
