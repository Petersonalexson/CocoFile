"""
Script Name: xpaispe Data Comparison with Canary Power-of-10 Formatting

Description:
    This script reads and filters the Master (Alfa) file for specified dimensions,
    applying special formatting for 'Atlanta 1' (e.g. 'abc123' => 'a-b-ABC-123')
    in the Master file. It then processes an xpaispe Excel file from multiple sheets 
    (e.g. xpaispe_Atlanta_1, xpaispe_Australia, xpaispe_Cuba, etc.). For the xpaispe sheet whose 
    dimension is "Canary", a manual remapping is applied via a mapping dictionary 
    (CANARY_VALUE_MAP). The two datasets are merged (using an outer join) to show 
    matches and missing records. Exceptions are annotated from an Exceptions file.
    Finally, the results are written to an existing OUTPUT.xlsx file in a specified 
    sheet ("PAISPE OUTPUT") with color-coded columns and a thin-bordered header row.

Usage:
    1. Update FILE_PATHS for your Master, xpaispe, Exceptions, and OUTPUT files.
    2. Adjust SHEET_NAMES and SHEET_DIMENSION_MAPPING as required.
    3. Run:
         python script.py
    4. Check the 'PAISPE OUTPUT' sheet in OUTPUT.xlsx for results.

Author: Alex
Date: 2024-12-31
"""

import logging
import math
import pandas as pd
from openpyxl import load_workbook, Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from openpyxl.utils.dataframe import dataframe_to_rows

# ----------------------------------------------------------------------------
# Configuration and Logging Setup
# ----------------------------------------------------------------------------

FILE_PATHS = {
    'master':
    'xpaispe': 
    'exceptions': 
    'output': 
}

SHEET_NAMES = {
    'master': 'Main',
    'xpaispe_sheets': [
        'xpaispe_Atlanta_1',
        'xpaispe_Australia',
        'xpaispe_Cuba',
        'xpaispe_Portugal',
        'xpaispe_C',
        'xpaispe_Canary'
    ],
    'exceptions': 'Paispe',
    'output_sheet': 'PAISPE OUTPUT'
}

SHEET_DIMENSION_MAPPING = {
    "xpaispe_Atlanta_1": "Atlanta 1",
    "xpaispe_Australia": "Australia",
    "xpaispe_Cuba": "Cuba",
    "xpaispe_Portugal": "Portugal",
    "xpaispe_C": "Conrad",
    "xpaispe_Canary": "Canary"
}

# For xpaispe, when the dimension is "Canary" use this mapping (manual remap)
CANARY_VALUE_MAP = {
    "1E02": "Custom_100",   
    "1E03": "Custom_1000"  
}

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

# ----------------------------------------------------------------------------
# Helper Functions
# ----------------------------------------------------------------------------

def auto_fit_columns(ws, min_width=12, max_width=50):
    for col_cells in ws.columns:
        max_len = 0
        col_letter = get_column_letter(col_cells[0].column)
        for cell in col_cells:
            if cell.value is not None:
                try:
                    length = len(str(cell.value))
                    if length > max_len:
                        max_len = length
                except Exception as e:
                    logging.debug(f"Error measuring cell length: {e}")
        adjusted_width = max(max_len + 2, min_width)
        if adjusted_width > max_width:
            adjusted_width = max_width
        ws.column_dimensions[col_letter].width = adjusted_width

def remap_canary_value(value: str, remap_dict: dict) -> str:
    """
    For the xpaispe side when the dimension is 'Canary', if the value exists in the
    remap dictionary, return the mapped value; otherwise, return the original value.
    """
    if value in remap_dict:
        return remap_dict[value]
    return value

def format_alfa_v3(name: str) -> str:
    """
    Applies specific formatting to 'Atlanta 1' dimension values.
    Example: 'abc123' -> 'a-b-ABC-123'
    """
    if pd.notna(name):
        name = str(name)
        first = name[0] if len(name) > 0 else ""
        second = name[1] if len(name) > 1 else ""
        third = name[2:5] if len(name) > 2 else ""
        fourth = name[5:] if len(name) > 5 else ""
        formatted_name = f"{first}-{second}-{third.upper()}-{fourth.upper()}"
        if len(fourth) == 0 or fourth == "-":
            formatted_name = formatted_name[:-1]
        if len(fourth) == 2:
            return formatted_name
        return formatted_name.rstrip("-")
    return name

def read_master_file_filtered_v4(file_path: str, sheet_name: str, dimensions: list) -> pd.DataFrame:
    """
    Reads the Master (Alfa) file, filtering for the given dimensions, applying:
      - 'Atlanta 1' formatting to the 'N' column
      - For 'Canary', applies the power-of-ten conversion (formula-based) on the Master side.
    Assumes columns E, F, K correspond to [DIM, N, ED].
    """
    logging.info(f"Reading Master file from {file_path}, sheet={sheet_name}")
    try:
        df_master = pd.read_excel(file_path, sheet_name=sheet_name, usecols="E,F,K", header=5, dtype=str)
    except Exception as e:
        logging.error(f"Error loading Master file: {e}")
        return pd.DataFrame()
    
    df_master.columns = ['DIM', 'N', 'ED']
    df_master.dropna(how='all', inplace=True)

    # For 'Atlanta 1'
    atlanta_mask = df_master['DIM'] == 'Atlanta 1'
    df_master.loc[atlanta_mask, 'N'] = df_master.loc[atlanta_mask, 'N'].apply(format_alfa_v3)

    # For 'Canary' on the Master side, assume we use the normal power-of-ten conversion
    # (if you want to keep Master unchanged, you could comment this out)
    canary_mask = df_master['DIM'] == 'Canary'
    df_master.loc[canary_mask, 'N'] = df_master.loc[canary_mask, 'N'].apply(lambda x: x)  # keep as-is

    # Filter by valid dimensions
    df_filtered = df_master[df_master['DIM'].isin(dimensions)].copy().reset_index(drop=True)
    logging.info(f"Master file after filtering => {len(df_filtered)} rows.")
    return df_filtered

def read_xpaispe_file_trimmed_v2(file_path: str, sheet_names: list, sheet_mapping: dict) -> pd.DataFrame:
    """
    Reads multiple xpaispe sheets from the xpaispe file.
    - Reads column A (raw strings preserved) starting from row 3 (skip first 2 rows).
    - Trims leading and trailing spaces from 'V xpaispe'.
    - Inserts a 'DIM xpaispe' column based on the sheet_mapping.
    - For the sheet mapped to 'Canary', applies remap_canary_value.
    """
    logging.info(f"Reading xpaispe file from {file_path}")
    try:
        xls = pd.ExcelFile(file_path)
    except Exception as e:
        logging.error(f"Error loading xpaispe file: {e}")
        return pd.DataFrame(columns=['DIM xpaispe', 'V xpaispe'])

    frames = []
    for sheet in sheet_names:
        if sheet in xls.sheet_names:
            logging.info(f"Processing sheet: {sheet}")
            try:
                df_temp = pd.read_excel(xls, sheet_name=sheet, usecols="A", skiprows=2, header=None, dtype=str)
                df_temp.columns = ['V xpaispe']
                df_temp['V xpaispe'] = df_temp['V xpaispe'].astype(str).str.strip()
                #sheet_mapping.
                df_temp.insert(0, 'DIM xpaispe', sheet_mapping[sheet])
                # apply manual remap.
                if sheet_mapping[sheet] == "Canary":
                    df_temp['V xpaispe'] = df_temp['V xpaispe'].apply(lambda x: remap_canary_value(x, CANARY_VALUE_MAP))
                frames.append(df_temp)
            except Exception as e:
                logging.error(f"Error reading xpaispe sheet '{sheet}': {e}")
        else:
            logging.warning(f"Sheet '{sheet}' not found in xpaispe file. Skipping.")
    if frames:
        df_final = pd.concat(frames, ignore_index=True)
        logging.info(f"xpaispe file processed => {len(df_final)} rows total.")
        return df_final
    else:
        logging.error("No valid xpaispe sheets found or all empty.")
        return pd.DataFrame(columns=['DIM xpaispe', 'V xpaispe'])

def compare_data_v2(df_master: pd.DataFrame, df_xpaispe: pd.DataFrame) -> pd.DataFrame:
    """
    Compares Master vs. xpaispe by constructing keys:
      - Master key: DIM + '|' + N
      - xpaispe key: DIM xpaispe + '|' + V xpaispe
    Uses an outer join and adds a Status column and a blank Flag column.
    """
    logging.info("Merging Master and xpaispe data for comparison.")
    df_master['Key_Master'] = df_master['DIM'].astype(str) + '|' + df_master['N'].astype(str)
    df_xpaispe['Key_xpaispe'] = df_xpaispe['DIM xpaispe'].astype(str) + '|' + df_xpaispe['V xpaispe'].astype(str)
    
    merged = pd.merge(
        df_master,
        df_xpaispe,
        left_on='Key_Master',
        right_on='Key_xpaispe',
        how='outer',
        indicator=True
    )
    merged['Status'] = merged['_merge'].map({
        'both': 'Match',
        'left_only': 'Missing in xpaispe',
        'right_only': 'Missing in Master'
    })
    merged['Comment'] = ''
    merged['Flag'] = ''
    logging.info(f"Comparison => {len(merged)} total rows.")
    return merged

def read_exceptions_with_matching(file_path: str, sheet_name: str) -> pd.DataFrame:
    """
    Reads the Exceptions file.
    Expects columns [D, V, ER] (after removing spaces) and builds a Key = D|V.
    """
    logging.info(f"Reading exceptions from {file_path}, sheet={sheet_name}")
    try:
        df_exc = pd.read_excel(file_path, sheet_name=sheet_name, header=0)
    except Exception as e:
        logging.error(f"Error loading exceptions file: {e}")
        return pd.DataFrame()
        
    df_exc.columns = [c.replace(" ", "") for c in df_exc.columns]
    required = {'D', 'V', 'ER'}
    if not required.issubset(set(df_exc.columns)):
        logging.error(f"Missing columns in exceptions: {required - set(df_exc.columns)}")
        return pd.DataFrame()
        
    df_exc = df_exc[['D', 'V', 'ER']].rename(columns={'ER': 'Comment'})
    df_exc.dropna(subset=['D', 'V'], inplace=True)
    df_exc['Key'] = df_exc['D'].astype(str).str.strip() + '|' + df_exc['V'].astype(str).str.strip()
    logging.info(f"Exceptions => {len(df_exc)} records after cleaning.")
    return df_exc

def populate_comments_with_matching_v3(df: pd.DataFrame, df_exc: pd.DataFrame) -> pd.DataFrame:
    """
    Populates the 'Comment' column by looking up keys from exceptions.
    Builds keys from both sides:
        - Master: DIM + '|' + N
        - xpaispe: DIM xpaispe + '|' + V xpaispe
    """
    logging.info("Populating Comments from exceptions.")
    if 'Comment' not in df.columns:
        df['Comment'] = ''

    df['Key_Master2'] = df['DIM'].astype(str).str.strip() + '|' + df['N'].astype(str).str.strip()
    df['Key_xpaispe_2'] = df['DIM xpaispe'].astype(str).str.strip() + '|' + df['V xpaispe'].astype(str).str.strip()

    exc_map = df_exc.set_index('Key')['Comment'].to_dict()
    df['Comment'] = df['Key_Master2'].map(exc_map).fillna(df['Key_xpaispe_2'].map(exc_map)).fillna(df['Comment'])

    df.drop(['Key_Master2', 'Key_xpaispe_2'], axis=1, inplace=True)
    logging.info("Comments populated.")
    return df

def write_to_existing_excel_with_custom_column_formatting(df: pd.DataFrame, output_path: str, sheet_name: str) -> None:
    """
    Writes the final DataFrame to an existing Excel workbook (or new file) with the columns arranged as:
      1. Alfa Dimension, 2. Alfa Name, 3. xpaispe Dimension, 4. xpaispe Name, 5. End Date Alfa, 6. Status, 7. Comment, 8. Flag.
    Also applies custom color-coded formatting and a thin border on the header.
    """
    logging.info(f"Writing data to '{output_path}' in sheet '{sheet_name}'.")
    try:
        try:
            wb = load_workbook(output_path)
            logging.info(f"Opened workbook: {output_path}")
        except FileNotFoundError:
            wb = Workbook()
            ws = wb.active
            ws.title = sheet_name
            logging.warning(f"Output file '{output_path}' does not exist. Created a new one.")
        if sheet_name in wb.sheetnames:
            ws_to_remove = wb[sheet_name]
            wb.remove(ws_to_remove)
            logging.info(f"Removed existing sheet '{sheet_name}'.")
        ws = wb.create_sheet(sheet_name)

        # Arrange columns in the desired order:
        desired_columns = ['DIM', 'N', 'DIM xpaispe', 'V xpaispe', 'ED', 'Status', 'Comment', 'Flag']
        df_out = df.copy()
        df_out = df_out[desired_columns]
        # Rename columns for output:
        df_out.rename(columns={
            'DIM': 'Alfa Dimension',
            'N': 'Alfa Name',
            'DIM xpaispe': 'xpaispe Dimension',
            'V xpaispe': 'xpaispe Name',
            'ED': 'End Date Alfa'
        }, inplace=True)

        rows = dataframe_to_rows(df_out, index=False, header=True)
        for r_idx, row_data in enumerate(rows, start=1):
            for c_idx, val in enumerate(row_data, start=1):
                ws.cell(row=r_idx, column=c_idx, value=val)

        # Define color fills and header border.
        header_fill = PatternFill(start_color="D9D9D9", end_color="D9D9D9", fill_type="solid")
        green_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # Alfa columns
        blue_fill = PatternFill(start_color="DDEBF7", end_color="DDEBF7", fill_type="solid")   # xpaispe columns
        yellow_fill = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")  # End Date
        red_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")     # Status if missing
        white_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")

        thin_side = Side(border_style="thin", color="000000")
        thin_border = Border(left=thin_side, right=thin_side, top=thin_side, bottom=thin_side)

        # Format header row.
        header_row = ws[1]
        for cell in header_row:
            cell.fill = header_fill
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center")
            cell.border = thin_border

        # Expected column positions:
        # 1: Alfa Dimension (green)
        # 2: Alfa Name (green)
        # 3: xpaispe Dimension (blue)
        # 4: xpaispe Name (blue)
        # 5: End Date Alfa (yellow)
        # 6: Status (green if Match, red otherwise)
        # 7: Comment (white)
        # 8: Flag (white)
        status_colors = {
            'Match': green_fill,
            'Missing in xpaispe': red_fill,
            'Missing in Master': red_fill
        }
        for row in ws.iter_rows(min_row=2):
            row[0].fill = green_fill
            row[1].fill = green_fill
            row[2].fill = blue_fill
            row[3].fill = blue_fill
            row[4].fill = yellow_fill
            status_cell = row[5]
            cell_color = status_colors.get(status_cell.value, white_fill)
            status_cell.fill = cell_color
            row[6].fill = white_fill
            row[7].fill = white_fill

        # Auto-fit columns.
        for col_cells in ws.columns:
            max_len = 0
            col_letter = get_column_letter(col_cells[0].column)
            for cell in col_cells:
                if cell.value is not None:
                    try:
                        length = len(str(cell.value))
                        if length > max_len:
                            max_len = length
                    except Exception as e:
                        logging.debug(f"Error measuring cell length: {e}")
            ws.column_dimensions[col_letter].width = max(max_len + 2, 12)

        wb.save(output_path)
        logging.info("Excel file updated successfully with custom formatting.")
    except Exception as e:
        logging.error(f"Error writing data to Excel: {e}", exc_info=True)

# ----------------------------------------------------------------------------
# Main Code Execution
# ----------------------------------------------------------------------------

def main():
    """
    Main flow:
      1. Reads & filters the Master (Alfa) file for the dimensions specified in SHEET_DIMENSION_MAPPING.
      2. Reads the xpaispe file from multiple sheets. For the sheet mapped to Canary,
         values in 'V xpaispe' are remapped using CANARY_VALUE_MAP.
      3. Merges the datasets using an outer join on constructed keys.
      4. Reads the Exceptions file and populates the 'Comment' column for matching keys.
      5. Reorders/renames columns as:
             Alfa Dimension, Alfa Name, xpaispe Dimension, xpaispe Name, End Date Alfa, Status, Comment, Flag.
      6. Writes the output to the OUTPUT.xlsx file (sheet specified in SHEET_NAMES['output_sheet']),
         applying color-coded formatting and auto-fitted columns.
    """
    try:
        # Step 1: Read & filter Master.
        master_dimensions = list(SHEET_DIMENSION_MAPPING.values())
        df_master = read_master_file_filtered_v4(
            file_path=FILE_PATHS['master'],
            sheet_name=SHEET_NAMES['master'],
            dimensions=master_dimensions
        )

        # Step 2: Read xpaispe file.
        df_xpaispe = read_xpaispe_file_trimmed_v2(
            file_path=FILE_PATHS['xpaispe'],
            sheet_names=SHEET_NAMES['xpaispe_sheets'],
            sheet_mapping=SHEET_DIMENSION_MAPPING
        )

        # Step 3: Compare.
        merged_df = compare_data_v2(df_master, df_xpaispe)

        # Step 4: Read exceptions.
        exceptions_df = read_exceptions_with_matching(
            file_path=FILE_PATHS['exceptions'],
            sheet_name=SHEET_NAMES['exceptions']
        )

        # Step 5: Populate comments.
        if not exceptions_df.empty:
            merged_df = populate_comments_with_matching_v3(merged_df, exceptions_df)

        # Step 6: Rename columns for final output.
        # In Master, the column 'N' is used for Alfa Name and 'ED' for End Date.
        # Arrange columns as: Alfa Dimension, Alfa Name, xpaispe Dimension, xpaispe Name, End Date, Status, Comment, Flag.
        final_df = merged_df.rename(columns={
            'DIM': 'DIM Master',
            'N': 'N Master',
            'DIM xpaispe': 'DIM xpaispe',
            'V xpaispe': 'V xpaispe',
            'ED': 'End Date'
        })
        final_df = final_df[['DIM Master', 'N Master', 'DIM xpaispe', 'V xpaispe', 'End Date', 'Status', 'Comment', 'Flag']]

        # Step 7: Write to output Excel.
        write_to_existing_excel_with_custom_column_formatting(
            df=final_df,
            output_path=FILE_PATHS['output'],
            sheet_name=SHEET_NAMES['output_sheet']
        )

        logging.info("Script executed successfully with xpaispe remap on Canary and color-coded output.")

    except Exception as e:
        logging.error(f"An error occurred in main(): {e}", exc_info=True)

if __name__ == "__main__":
    main()
