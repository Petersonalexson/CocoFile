def transform_alfa(
    file_path: Path,
    excluded_keys: set,
    sheet_name: str = "Sheet1",
    skip_rows: int = 3,
    dimension_rename_dict: dict = None,
    attr_rename_dict: dict = None,
    keep_attributes: list = None,
    ignore_attributes: list = None,
    include_filters: list = None,
    exclude_filters: list = None
) -> pd.DataFrame:
    """
    Transforms Excel file (Alfa). 
    Column C is 'Dimension', Column D is 'First'. 
    The result is a DataFrame with columns: [Key, Dimension, First, Attribute, Value].

    Steps:
      - Reads the Excel, skipping 'skip_rows' so row (skip_rows+1) is a header.
      - Renames column C -> 'Dimension', column D -> 'First'.
      - Melts remaining columns into [Attribute, Value].
      -    renames dimension values (dimension_rename_dict).
      -    renames attribute names (attr_rename_dict).
      -    keeps or ignores certain attributes.
      -    applies include/exclude filters based on (Attribute, Value).
      - Removes rows whose 'Key' is in excluded_keys.
      - Drops duplicates by 'Key'.
      - Returns the final DataFrame.
    """

    df = pd.read_excel(file_path, sheet_name=sheet_name, skiprows=skip_rows)
    if df.shape[1] < 4:
        print("[Alfa] Warning: fewer than 4 columns in the Excel. Returning empty DataFrame.")
        return pd.DataFrame(columns=["Key", "Dimension", "First", "Attribute", "Value"])

    # Renaming columns: C -> 'Dimension', D -> 'First'
    df.rename(columns={
        df.columns[2]: "Dimension",
        df.columns[3]: "First"
    }, inplace=True)

    # Rename dimension values  
    if dimension_rename_dict:
        df["Dimension"] = df["Dimension"].replace(dimension_rename_dict)

    # Melt columns except 'Dimension' and 'First'
    id_vars = ["Dimension", "First"]
    melt_cols = [c for c in df.columns if c not in id_vars]

    df_melt = df.melt(
        id_vars=id_vars,
        value_vars=melt_cols,
        var_name="Attribute",
        value_name="Value"
    )

    # Rename attribute names  
    if attr_rename_dict:
        df_melt["Attribute"] = df_melt["Attribute"].replace(attr_rename_dict)

    # Keep or ignore certain attributes
    if keep_attributes is not None:
        df_melt = df_melt[df_melt["Attribute"].isin(keep_attributes)]
    if ignore_attributes is not None:
        df_melt = df_melt[~df_melt["Attribute"].isin(ignore_attributes)]

    # Include/Exclude filters
    # Matches a row if (Attribute == X) & (Value in [list_of_vals])
    def match_any_filter(dfa, filters):
        if not filters:
            return pd.Series([False] * len(dfa), index=dfa.index)
        combined_mask = pd.Series([False] * len(dfa), index=dfa.index)
        for (attr, val_list) in filters:
            sub_mask = (dfa["Attribute"] == attr) & (dfa["Value"].isin(val_list))
            combined_mask = combined_mask | sub_mask
        return combined_mask

    if include_filters:
        inc_mask = match_any_filter(df_melt, include_filters)
        df_melt = df_melt[inc_mask]

    if exclude_filters:
        exc_mask = match_any_filter(df_melt, exclude_filters)
        df_melt = df_melt[~exc_mask]

    # Create Key
    df_melt["Key"] = df_melt.apply(
        lambda row: f"{row['Dimension']} | {row['First']} | {row['Attribute']} | {row['Value']}",
        axis=1
    )

    # Exclude based on the excluded_keys set
    df_melt = df_melt[~df_melt["Key"].isin(excluded_keys)]

    # Reorder columns
    df_melt = df_melt[["Key", "Dimension", "First", "Attribute", "Value"]]

    # Drop duplicates by Key
    df_melt.drop_duplicates(subset=["Key"], inplace=True)

    return df_melt
