import pandas as pd



import logging
import pandas as pd
from openpyxl import load_workbook
from openpyxl.comments import Comment

# ---------------------------------------------------------------------------
# 1. Setup Logging
# ---------------------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ---------------------------------------------------------------------------
# 2. File Paths (Adjust to your actual paths)
# ---------------------------------------------------------------------------
# File Paths
MAP_FILE_PATH = r"C:\Users\alexp\OneDrive\Desktop\MAP.xlsx"
BANI_FILE_PATH  = r"C:\Users\alexp\OneDrive\Desktop\BANI.xlsx"
MAPPING_SHEET = "Mapping Main"
XRP_SHEET = "XRP"
FORCAST_SHEET = "Forcast"

# ---------------------------------------------------------------------------
# 3. Load Mapping Data (MAP.xlsx - "Mapping Main")
# ---------------------------------------------------------------------------
logging.info("Loading mapping data...")
map_df = pd.read_excel(MAP_FILE_PATH, sheet_name=MAPPING_SHEET)

# Keep only rows where Account is not NaN, and convert Account to int
map_df.dropna(subset=["Account"], inplace=True)
map_df["Account"] = map_df["Account"].astype(int)

# ---------------------------------------------------------------------------
# 4. Load and Clean BANI Data (BANI.xlsx - "XRP")
# ---------------------------------------------------------------------------
logging.info("Loading BANI (XRP) data...")
bani_df = pd.read_excel(BANI_FILE_PATH, sheet_name=XRP_SHEET)

# Keep only relevant columns (Nat Cont, Centru, Quantitate) and drop NaN
bani_df = bani_df[["Nat Cont", "Centru", "Quantitate"]].dropna()

# Convert columns to integer where possible
bani_df["Nat Cont"] = bani_df["Nat Cont"].astype(int)
bani_df["Centru"] = bani_df["Centru"].astype(int)
bani_df["Quantitate"] = bani_df["Quantitate"].astype(int)

# ---------------------------------------------------------------------------
# 5. Filter by Allowed Accounts from the Mapping
# ---------------------------------------------------------------------------
allowed_accounts = dict(zip(map_df["Account"], map_df["Description 2"].dropna()))
filtered_bani_df = bani_df[bani_df["Nat Cont"].isin(allowed_accounts.keys())]

# ---------------------------------------------------------------------------
# 6. Merge in "Description 2" from Mapping, then Aggregate
# ---------------------------------------------------------------------------
logging.info("Merging with map and aggregating by (Centru, Description2)...")
bani_with_desc = filtered_bani_df.merge(
    map_df[["Account", "Description 2"]], 
    left_on="Nat Cont",
    right_on="Account",
    how="left"
)

# Manually rename certain descriptions to match how they appear in Forcast
rename_map = {
    "Arnold": "Arnold & Mercenari",
    "Activitati/o": "Activitati/O"
}
bani_with_desc["Description 2"] = bani_with_desc["Description 2"].replace(rename_map)

# Aggregate the sum of Quantitate by Centru + Description 2
aggregated_df = bani_with_desc.groupby(["Centru", "Description 2"], dropna=True, as_index=False)["Quantitate"].sum()

logging.info("Aggregated data:\n%s", aggregated_df)

# ---------------------------------------------------------------------------
# 7. Open BANI.xlsx with openpyxl, Access "Forcast" Sheet
# ---------------------------------------------------------------------------
logging.info("Opening workbook to update Forcast sheet...")
wb = load_workbook(BANI_FILE_PATH)
ws_forcast = wb[FORCAST_SHEET]

# ---------------------------------------------------------------------------
# 8. Find the Column Containing "Oct Actual"
#    We scan all rows & columns looking for a cell exactly matching that phrase.
# ---------------------------------------------------------------------------
logging.info("Locating 'Oct Actual' column...")
oct_actual_col = None
max_row = ws_forcast.max_row
max_col = ws_forcast.max_column

# Search entire sheet for "Oct Actual"
for r in range(1, max_row + 1):
    for c in range(1, max_col + 1):
        cell_value = ws_forcast.cell(row=r, column=c).value
        if cell_value and str(cell_value).strip().lower() == "oct actual":
            oct_actual_col = c
            logging.info(f"'Oct Actual' found at row={r}, col={c}")
            break
    if oct_actual_col:
        break

if not oct_actual_col:
    logging.warning("Could not find 'Oct Actual' column. Exiting without updates.")
    wb.save(BANI_FILE_PATH)
    exit()

# ---------------------------------------------------------------------------
# 9. Identify Rows that Mark the Start of Each "Centru Block"
#    We'll define a row as a "Centru row" if it has exactly one numeric cell
#    (and presumably that numeric cell is the Centru).
# ---------------------------------------------------------------------------
logging.info("Scanning rows to find numeric Centru blocks...")

centru_rows = []  # Will hold tuples: (row_index, centru_value)
for r in range(1, max_row + 1):
    numeric_values = []
    for c in range(1, max_col + 1):
        val = ws_forcast.cell(row=r, column=c).value
        # Check if it's an integer or float that has no decimal part
        if isinstance(val, (int, float)) and not pd.isnull(val):
            # Also skip if it's a float with a decimal.
            if float(val).is_integer():
                numeric_values.append(int(val))
    # If exactly one numeric found in the row, treat that as our Centru
    if len(numeric_values) == 1:
        centru_rows.append((r, numeric_values[0]))

logging.info("Found Centru blocks at: %s", centru_rows)

# ---------------------------------------------------------------------------
# 10. For each Centru block, gather the data from the aggregated_df,
#     find each "Description 2" row in the block, update "Oct Actual" + comment
# ---------------------------------------------------------------------------
for i, (centru_row_index, centru_value) in enumerate(centru_rows):
    logging.info(f"Processing Centru={centru_value} at row={centru_row_index}...")
    # Figure out how far the block goes (start row is current centru_row_index + 1)
    # If there's a "next" centru row, the block ends right above that
    if i + 1 < len(centru_rows):
        next_centru_row_index = centru_rows[i + 1][0]
        block_end_row = next_centru_row_index - 1
    else:
        block_end_row = max_row

    # Get the relevant rows
    # We'll search for the Description text in the leftmost cells of this block
    # or generally across columns if needed
    block_row_range = range(centru_row_index + 1, block_end_row + 1)
    
    # Filter the aggregated data for this centru
    sub_df = aggregated_df[aggregated_df["Centru"] == centru_value]
    if sub_df.empty:
        logging.info("No aggregated data found for this Centru. Skipping.")
        continue

    for _, row_data in sub_df.iterrows():
        desc_2 = str(row_data["Description 2"]).strip()
        quantity_value = row_data["Quantitate"]

        # Try to find the row in the block that has 'desc_2' in at least one cell
        target_row = None
        for r in block_row_range:
            for c in range(1, max_col + 1):
                cell_val = ws_forcast.cell(row=r, column=c).value
                if cell_val and str(cell_val).strip().lower() == desc_2.lower():
                    target_row = r
                    break
            if target_row:
                break

        # If we found the row, update the "Oct Actual" column
        if target_row:
            target_cell = ws_forcast.cell(row=target_row, column=oct_actual_col)
            target_cell.value = quantity_value
            # Add a comment to indicate we updated it
            comment_text = "Updated by script"
            target_cell.comment = Comment(comment_text, "Script")
            logging.info(f"Updated {desc_2} (row={target_row}, col={oct_actual_col}) with {quantity_value}")
        else:
            logging.info(f"Description '{desc_2}' not found in Centru block {centru_value}")

# ---------------------------------------------------------------------------
# 11. Save the Updated Workbook
# ---------------------------------------------------------------------------
logging.info("Saving updates to workbook...")
wb.save(BANI_FILE_PATH)
logging.info("Done. All updates saved.")
