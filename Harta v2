import openpyxl
from openpyxl.utils import get_column_letter
import warnings

# Suppress openpyxl user warnings (for example about data validation).
warnings.simplefilter("ignore", UserWarning)

def main():
    """
    Main driver function.
    Scans 'MAP.xlsx' for allowed accounts and 'BANI.xlsx' to aggregate
    values, then writes to the 'Forcast' sheet under the user-chosen column.
    """

    # ----------------------------------------------------------------
    # 1) USER CONFIGURATIONS
    # ----------------------------------------------------------------
    # Paths to your files
    path_map_xlsx = r"C:\Path\to\MAP.xlsx"     # MAP file
    path_bani_xlsx = r"C:\Path\to\BANI.xlsx"   # BANI file

    # Sheet names
    map_sheet_name = "MAIN MAP"    # The sheet in MAP.xlsx
    xrp_sheet_name = "XRP"         # The sheet in BANI.xlsx containing transactions
    forecast_sheet_name = "Forcast"# The target sheet in BANI.xlsx to update

    # Column names (as they appear in the header or to search for) in MAP sheet
    map_col_account_header = "accounts"
    map_col_descriere_header = "Descriere 2"

    # Column names (as they appear in the header or to search for) in XRP sheet
    xrp_col_nat_cont_header = "nat cont"
    xrp_col_center_header   = "Center"
    xrp_col_quantitate_header = "Quantitate"

    # The forecast column title in the Forcast sheet where we need to put aggregated data
    forecast_column_header = "Oct Actual"

    # If your "Descriere 2" from MAP must map differently in Forcast, define here:
    # e.g. "Mercenari" -> "Mercenari & Arnold"
    descriere_map_to_forecast = {
        # "Mercenari": "Mercenari & Arnold",
        # "Antrnament": "Antrenament",
        # etc. If they match exactly, you can leave this empty.
    }

    # ----------------------------------------------------------------
    # 2) READ the MAP workbook to build dictionary {account -> descriere}
    # ----------------------------------------------------------------
    map_wb = openpyxl.load_workbook(path_map_xlsx, data_only=True)
    map_ws = map_wb[map_sheet_name]

    # Identify columns "accounts" and "Descriere 2" from the first row (header).
    header_row = next(map_ws.iter_rows(min_row=1, max_row=1, values_only=True))
    map_col_account_index = None
    map_col_descriere_index = None

    for idx, col_value in enumerate(header_row, start=1):
        if col_value and str(col_value).strip().lower() == map_col_account_header.lower():
            map_col_account_index = idx
        elif col_value and str(col_value).strip().lower() == map_col_descriere_header.lower():
            map_col_descriere_index = idx

    if not map_col_account_index or not map_col_descriere_index:
        raise ValueError(
            f"Could not find columns '{map_col_account_header}' or "
            f"'{map_col_descriere_header}' in the MAP sheet's header."
        )

    # Build dictionary of allowed accounts => descriere
    allowed_accounts = {}
    for row in map_ws.iter_rows(min_row=2, values_only=True):
        acc = row[map_col_account_index - 1]
        desc = row[map_col_descriere_index - 1]
        if acc and desc:
            allowed_accounts[str(acc).strip()] = str(desc).strip()

    map_wb.close()

    # ----------------------------------------------------------------
    # 3) READ the BANI -> XRP sheet to filter + aggregate
    #    aggregator[center][descriere] = sum of Quantitate
    # ----------------------------------------------------------------
    bani_wb = openpyxl.load_workbook(path_bani_xlsx)
    xrp_ws = bani_wb[xrp_sheet_name]

    # Identify column indexes for nat cont, center, quantitate from the first row
    xrp_header_row = next(xrp_ws.iter_rows(min_row=1, max_row=1, values_only=True))
    col_nat_cont_idx = None
    col_center_idx   = None
    col_quantitate_idx = None

    for idx, val in enumerate(xrp_header_row, start=1):
        if val and str(val).strip().lower() == xrp_col_nat_cont_header.lower():
            col_nat_cont_idx = idx
        elif val and str(val).strip().lower() == xrp_col_center_header.lower():
            col_center_idx = idx
        elif val and str(val).strip().lower() == xrp_col_quantitate_header.lower():
            col_quantitate_idx = idx

    if not col_nat_cont_idx or not col_center_idx or not col_quantitate_idx:
        raise ValueError(
            f"Could not find columns '{xrp_col_nat_cont_header}', '{xrp_col_center_header}', "
            f"or '{xrp_col_quantitate_header}' in the XRP sheet's header."
        )

    # Build aggregator
    aggregator = {}  # aggregator[center][descriere] = float sum

    # Iterate over rows in XRP, ignoring the first (header)
    for row in xrp_ws.iter_rows(min_row=2, values_only=True):
        nat_cont  = row[col_nat_cont_idx - 1]
        center    = row[col_center_idx - 1]
        quantitate= row[col_quantitate_idx - 1]

        if not (nat_cont and center and quantitate):
            continue

        nat_cont = str(nat_cont).strip()
        center = str(center).strip()

        if nat_cont in allowed_accounts:
            descriere = allowed_accounts[nat_cont]
            if center not in aggregator:
                aggregator[center] = {}
            if descriere not in aggregator[center]:
                aggregator[center][descriere] = 0
            aggregator[center][descriere] += quantitate

    # ----------------------------------------------------------------
    # 4) WRITE to the Forcast sheet
    #    We'll do a big net search:
    #       - find forecast_column by scanning all cells for 'Oct Actual'
    #       - find center row by scanning all cells in entire sheet
    #       - find descriere row by scanning all cells below that center row
    # ----------------------------------------------------------------

    forecast_ws = bani_wb[forecast_sheet_name]

    # 4.1) Find the column index containing forecast_column_header anywhere in the sheet
    # We just take the first match we find
    forecast_column_idx = None
    found_forecast_header_cell = None
    for row in forecast_ws.iter_rows():
        for cell in row:
            val = cell.value
            if val and str(val).strip().lower() == forecast_column_header.lower():
                forecast_column_idx = cell.column  # integer index
                found_forecast_header_cell = cell
                break
        if forecast_column_idx is not None:
            break

    if not forecast_column_idx:
        raise ValueError(
            f"Could not find a cell with value '{forecast_column_header}' in the Forcast sheet."
        )

    # 4.2) Helper: find row containing certain value scanning the entire sheet
    # We pick the first occurrence
    def find_row_for_value(sheet, search_value, start_row=1):
        """
        Scan from start_row to the bottom, all columns, for a cell
        whose string equals `search_value` (case-insensitive).
        Return that row index if found, else None.
        """
        search_value = str(search_value).strip().lower()
        for r in range(start_row, sheet.max_row + 1):
            row_cells = sheet[r]
            for cell in row_cells:
                cell_val = cell.value
                if cell_val and str(cell_val).strip().lower() == search_value:
                    return r
        return None

    # 4.3) Another helper: after finding the row for center, we then search for the descriere
    # starting from (center_row + 1), scanning all columns down. 
    # If your layout always has the descriere *some* lines below the center, this is typical.
    def find_row_for_descriere_after(sheet, start_row, descriere_value, max_search=100):
        """
        From row (start_row+1) to (start_row+max_search),
        scan all columns for a cell matching `descriere_value`.
        Return the row index if found, else None.
        """
        descriere_value = str(descriere_value).strip().lower()
        end_row = min(sheet.max_row, start_row + max_search)
        for r in range(start_row + 1, end_row + 1):
            row_cells = sheet[r]
            for cell in row_cells:
                cell_val = cell.value
                if cell_val and str(cell_val).strip().lower() == descriere_value:
                    return r
        return None

    # 4.4) Update the forecast sheet
    for center, descriere_dict in aggregator.items():
        # 1) find row of center
        center_row = find_row_for_value(forecast_ws, center, start_row=1)
        if center_row is None:
            # skip if center not found
            continue

        # 2) for each descriere => total, put in the row below center
        for descriere, total_val in descriere_dict.items():
            # if there's a special override
            final_descriere = descriere_map_to_forecast.get(descriere, descriere)
            # find row
            descriere_row = find_row_for_descriere_after(forecast_ws, center_row, final_descriere)
            if descriere_row is None:
                continue

            # 3) place value in forecast_column_idx
            forecast_ws.cell(row=descriere_row, column=forecast_column_idx, value=total_val)

    # ----------------------------------------------------------------
    # 5) Save changes
    # ----------------------------------------------------------------
    bani_wb.save(path_bani_xlsx)
    bani_wb.close()

    print("Done! Data was aggregated and the Forcast sheet updated.")


if __name__ == "__main__":
    main()
