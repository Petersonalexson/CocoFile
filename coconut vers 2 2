Option Explicit

'--------------------------------------------------------------------------------------------
' MAIN WRAPPER
' 1) Refresh each sheet via Smart View
' 2) For each sheet, skip final row(s) if D7 says "Tree"/"List", and update named range
' 3) Create/Update queries named "<SheetName>_FlatTable" using indentation-based M code
'--------------------------------------------------------------------------------------------
Public Sub RefreshBuildArraysParentChild()
    On Error GoTo errHandler
    
    LogMessage "RefreshBuildArraysParentChild", "INFO", "Process started."
    
    ' 1) Smart View refresh
    RefreshSmartViewHierarchies
    
    ' 2) Update the named ranges to skip final row(s)
    UpdateNamedRanges_SkipRows
    
    ' 3) Create or update queries referencing those named ranges
    CreateOrUpdateFlatTableQueries
    
    LogMessage "RefreshBuildArraysParentChild", "INFO", "Process completed successfully."
    Exit Sub

errHandler:
    LogError "RefreshBuildArraysParentChild", Err.Number, Err.Description
End Sub


'--------------------------------------------------------------------------------------------
' STEP (1) REFRESH SMART VIEW
'  - Connect, delete old rows except final one, zoom in
'  - Recreate named range from row4..lastRow
'--------------------------------------------------------------------------------------------
Public Sub RefreshSmartViewHierarchies()
    On Error GoTo errHandler
    
    Dim wsLists        As Worksheet
    Dim arrSheets      As Variant
    Dim ConnectionName As String
    
    Dim i              As Long
    Dim Ret            As Long
    Dim ConnStatus     As Long
    Dim HeaderRow      As Long
    Dim LastRow        As Long
    
    LogMessage "RefreshSmartViewHierarchies", "INFO", "Starting Smart View refresh..."
    
    On Error Resume Next
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    On Error GoTo errHandler
    
    If wsLists Is Nothing Then
        LogError "RefreshSmartViewHierarchies", 0, "No 'Lists' sheet found."
        Exit Sub
    End If
    
    ConnectionName = Trim(wsLists.Range("nmConnectionName").Value)
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    
    If Len(ConnectionName) = 0 Then
        LogError "RefreshSmartViewHierarchies", 0, "'nmConnectionName' is empty."
        Exit Sub
    End If
    If IsEmpty(arrSheets) Then
        LogError "RefreshSmartViewHierarchies", 0, "'Hierarchy_Matrix' missing or empty."
        Exit Sub
    End If
    
    HeaderRow = 4
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim totalRows As Long
    totalRows = UBound(arrSheets, 1) - LBound(arrSheets, 1) + 1
    LogMessage "RefreshSmartViewHierarchies", "INFO", "Found " & totalRows & " row(s) in Hierarchy_Matrix."
    
    Dim sheetName As String, rangeName As String
    Dim ws As Worksheet
    
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        sheetName = Trim(arrSheets(i, 1))
        rangeName = Trim(arrSheets(i, 2))
        
        If sheetName = "" Or rangeName = "" Then
            LogMessage "RefreshSmartViewHierarchies", "INFO", _
                       "Skipping row " & i & " - blank sheet or range name."
            GoTo NextItem
        End If
        
        ' Connect / Zoom
        Set ws = Nothing
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(sheetName)
        On Error GoTo errHandler
        
        If ws Is Nothing Then
            LogError "RefreshSmartViewHierarchies", 0, "Sheet '" & sheetName & "' not found."
            GoTo NextItem
        End If
        
        Ret = HypUIConnect(ws.Name, "", "", ConnectionName)
        ConnStatus = HypConnected(ws.Name)
        If ConnStatus <> -1 Then
            LogError "RefreshSmartViewHierarchies", 0, "Failed connecting on '" & ws.Name & "'."
            GoTo NextItem
        End If
        
        LogMessage "RefreshSmartViewHierarchies", "INFO", "Connected to Smart View on " & ws.Name
        
        With ws
            LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
            If LastRow > HeaderRow Then
                .Rows(HeaderRow & ":" & (LastRow - 1)).Delete Shift:=xlUp
            End If
            
            LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            Ret = HypZoomIn(.Name, .Range("A" & LastRow), 1, False)
            
            ' Recalc last row after zoom
            LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
            
            ' Recreate named range from row4..LastRow
            On Error Resume Next
            ThisWorkbook.Names(rangeName).Delete
            On Error GoTo errHandler
            ThisWorkbook.Names.Add Name:=rangeName, RefersTo:="='" & .Name & "'!A" & HeaderRow & ":A" & LastRow
        End With
        
        LogMessage "RefreshSmartViewHierarchies", "INFO", _
                   "Named range '" & rangeName & "' set on sheet '" & ws.Name & "'."
NextItem:
        Set ws = Nothing
    Next i
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    LogMessage "RefreshSmartViewHierarchies", "INFO", "Smart View refresh done."
    Exit Sub

errHandler:
    LogError "RefreshSmartViewHierarchies", Err.Number, Err.Description
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub


'--------------------------------------------------------------------------------------------
' STEP (2) UPDATE NAMED RANGES BY SKIPPING FINAL ROW(S)
'   If D7="Tree", skip 1
'   If D7="List", skip 2
'   Then redefine the named range from row 4..(LastRow - skipCount)
'--------------------------------------------------------------------------------------------
Public Sub UpdateNamedRanges_SkipRows()
    On Error GoTo errHandler
    
    LogMessage "UpdateNamedRanges_SkipRows", "INFO", "Starting to skip final rows for each named range..."
    
    Dim wsLists As Worksheet
    Dim arrSheets As Variant
    
    Dim i As Long
    
    On Error Resume Next
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    On Error GoTo errHandler
    
    If wsLists Is Nothing Then
        LogError "UpdateNamedRanges_SkipRows", 0, "No 'Lists' sheet found."
        Exit Sub
    End If
    
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    If IsEmpty(arrSheets) Then
        LogError "UpdateNamedRanges_SkipRows", 0, "'Hierarchy_Matrix' missing or empty."
        Exit Sub
    End If
    
    Dim totalRows As Long
    totalRows = UBound(arrSheets, 1) - LBound(arrSheets, 1) + 1
    LogMessage "UpdateNamedRanges_SkipRows", "INFO", "Found " & totalRows & " row(s) in Hierarchy_Matrix."
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim sheetName As String, rangeName As String
    Dim ws As Worksheet
    Dim skipCount As Long
    Dim lastRow As Long, finalRow As Long
    Dim treeOrList As String
    Dim HeaderRow As Long
    HeaderRow = 4
    
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        
        sheetName = Trim(arrSheets(i, 1))
        rangeName = Trim(arrSheets(i, 2))
        
        If sheetName = "" Or rangeName = "" Then
            LogMessage "UpdateNamedRanges_SkipRows", "INFO", _
                       "Skipping row " & i & " - blank sheet or range name."
            GoTo NextItem
        End If
        
        Set ws = Nothing
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(sheetName)
        On Error GoTo errHandler
        
        If ws Is Nothing Then
            LogError "UpdateNamedRanges_SkipRows", 0, "Cannot find sheet '" & sheetName & "'."
            GoTo NextItem
        End If
        
        ' Check D7 to see if "Tree" or "List"
        treeOrList = Trim(ws.Range("D7").Value)
        skipCount = 0
        If UCase(treeOrList) = "TREE" Then
            skipCount = 1
        ElseIf UCase(treeOrList) = "LIST" Then
            skipCount = 2
        End If
        
        lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
        finalRow = lastRow - skipCount
        If finalRow < HeaderRow Then
            LogError "UpdateNamedRanges_SkipRows", 0, _
                     "After skipping, no data left on sheet='" & sheetName & "'."
            GoTo NextItem
        End If
        
        ' Redefine the named range
        On Error Resume Next
        ThisWorkbook.Names(rangeName).Delete
        On Error GoTo errHandler
        
        ThisWorkbook.Names.Add Name:=rangeName, _
           RefersTo:="='" & ws.Name & "'!A" & HeaderRow & ":A" & finalRow
        
        LogMessage "UpdateNamedRanges_SkipRows", "INFO", _
                   "Sheet='" & sheetName & "' skip=" & skipCount & ". NamedRange='" & rangeName & _
                   "' => A" & HeaderRow & ":A" & finalRow
        
NextItem:
        Set ws = Nothing
    Next i
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    LogMessage "UpdateNamedRanges_SkipRows", "INFO", "Finished skipping final rows in named ranges."
    Exit Sub

errHandler:
    LogError "UpdateNamedRanges_SkipRows", Err.Number, Err.Description
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub


'--------------------------------------------------------------------------------------------
' STEP (3) CREATE OR UPDATE QUERIES NAMED "<SheetName>_FlatTable"
'   - M code references that named range, uses indentation-based parent detection
'--------------------------------------------------------------------------------------------
Public Sub CreateOrUpdateFlatTableQueries()
    On Error GoTo errHandler
    
    LogMessage "CreateOrUpdateFlatTableQueries", "INFO", "Starting to create/update queries <SheetName>_FlatTable..."
    
    Dim wsLists  As Worksheet
    Dim arrSheets As Variant
    Dim i        As Long
    
    On Error Resume Next
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    On Error GoTo errHandler
    
    If wsLists Is Nothing Then
        LogError "CreateOrUpdateFlatTableQueries", 0, "No 'Lists' sheet found."
        Exit Sub
    End If
    
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    If IsEmpty(arrSheets) Then
        LogError "CreateOrUpdateFlatTableQueries", 0, "'Hierarchy_Matrix' missing or empty."
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim totalRows As Long
    totalRows = UBound(arrSheets, 1) - LBound(arrSheets, 1) + 1
    LogMessage "CreateOrUpdateFlatTableQueries", "INFO", _
               "Found " & totalRows & " row(s) in Hierarchy_Matrix."
    
    Dim sheetName As String, rangeName As String
    Dim finalQueryName As String
    Dim queryText As String
    Dim existingConn As Boolean
    Dim c As WorkbookConnection
    
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        
        sheetName = Trim(arrSheets(i, 1))
        rangeName = Trim(arrSheets(i, 2))
        
        If sheetName = "" Or rangeName = "" Then
            LogMessage "CreateOrUpdateFlatTableQueries", "INFO", _
                       "Skipping row " & i & " - blank sheet or range."
            GoTo NextItem
        End If
        
        finalQueryName = sheetName & "_FlatTable"
        
        ' Build M code referencing "rangeName"
        queryText = BuildParentChildQueryText(rangeName)
        If queryText = "" Then
            LogError "CreateOrUpdateFlatTableQueries", 0, _
                     "M code generation failed for " & rangeName
            GoTo NextItem
        End If
        
        existingConn = False
        For Each c In ThisWorkbook.Connections
            If c.Name = finalQueryName Then
                existingConn = True
                Exit For
            End If
        Next c
        
        If existingConn Then
            On Error Resume Next
            ThisWorkbook.Queries(finalQueryName).Formula = queryText
            If Err.Number <> 0 Then
                ' remove old
                ThisWorkbook.Connections(finalQueryName).Delete
                existingConn = False
            End If
            Err.Clear
        End If
        
        If Not existingConn Then
            On Error Resume Next
            ThisWorkbook.Queries.Add Name:=finalQueryName, Formula:=queryText
            If Err.Number <> 0 Then
                LogError "CreateOrUpdateFlatTableQueries", Err.Number, _
                         "Error creating query: " & finalQueryName & " - " & Err.Description
                GoTo NextItem
            End If
            Err.Clear
        End If
        
        LogMessage "CreateOrUpdateFlatTableQueries", "INFO", _
                   "Processed query: " & finalQueryName
        
NextItem:
    Next i
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    LogMessage "CreateOrUpdateFlatTableQueries", "INFO", "Finished creating/updating <SheetName>_FlatTable queries."
    Exit Sub

errHandler:
    LogError "CreateOrUpdateFlatTableQueries", Err.Number, Err.Description
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub


'--------------------------------------------------------------------------------------------
' M CODE: "BuildParentChildQueryText" for Indentation-Based Parent
'
' 1) LeadingSpaces = #leading spaces
' 2) ParentID = row above with fewer leadingSpaces, picking the row with the greatest leadingSpaces
' 3) Expand to get parent's Value
'--------------------------------------------------------------------------------------------
Public Function BuildParentChildQueryText(namedRange As String) As String
    On Error GoTo errHandler
    
    LogMessage "BuildParentChildQueryText", "INFO", "Building M code for range: " & namedRange
    
    Dim mCode As String
    
    mCode = mCode & "let" & vbCrLf
    mCode = mCode & "    Source = Excel.CurrentWorkbook(){[Name=""" & namedRange & """]}[Content]," & vbCrLf
    mCode = mCode & "    remove_nulls = Table.SelectRows(Source, each [Column1] <> null and [Column1] <> """")," & vbCrLf
    mCode = mCode & "    #""Add RowIndex"" = Table.AddIndexColumn(remove_nulls, ""RowIndex"", 0, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // leadingSpaces = number of leading spaces" & vbCrLf
    mCode = mCode & "    #""Added leadingSpaces"" = Table.AddColumn(#""Add RowIndex"", ""leadingSpaces"", each " & vbCrLf
    mCode = mCode & "        Text.Length([Column1]) - Text.Length(Text.TrimStart([Column1]))" & vbCrLf
    mCode = mCode & "    , Int64.Type)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Value = trimmed text" & vbCrLf
    mCode = mCode & "    #""Added Value"" = Table.AddColumn(#""Added leadingSpaces"", ""Value"", each Text.TrimStart([Column1]), type text)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    #""Prep for parent"" = Table.SelectColumns(#""Added Value"", {""RowIndex"", ""leadingSpaces"", ""Value""})," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    #""Add ParentID"" = Table.AddColumn(#""Prep for parent"", ""ParentID"", (thisRow) =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            myIndex = thisRow[RowIndex]," & vbCrLf
    mCode = mCode & "            mySpaces = thisRow[leadingSpaces]," & vbCrLf
    mCode = mCode & "            candidates = Table.SelectRows(#""Prep for parent"", each [RowIndex] < myIndex and [leadingSpaces] < mySpaces)," & vbCrLf
    mCode = mCode & "            ordered = Table.Sort(candidates, {{""leadingSpaces"", Order.Descending}, {""RowIndex"", Order.Descending}})," & vbCrLf
    mCode = mCode & "            topRow = if Table.IsEmpty(ordered) then null else ordered{0}," & vbCrLf
    mCode = mCode & "            parentID = if topRow=null then null else topRow[RowIndex]" & vbCrLf
    mCode = mCode & "        in parentID" & vbCrLf
    mCode = mCode & "    )," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    #""Join parent table"" = Table.NestedJoin(" & vbCrLf
    mCode = mCode & "        #""Add ParentID"", " & vbCrLf
    mCode = mCode & "        {""ParentID""}," & vbCrLf
    mCode = mCode & "        #""Add ParentID"", " & vbCrLf
    mCode = mCode & "        {""RowIndex""}," & vbCrLf
    mCode = mCode & "        ""ParentTable""," & vbCrLf
    mCode = mCode & "        JoinKind.LeftOuter" & vbCrLf
    mCode = mCode & "    )," & vbCrLf
    mCode = mCode & "    #""Expanded parent"" = Table.ExpandTableColumn(" & vbCrLf
    mCode = mCode & "        #""Join parent table""," & vbCrLf
    mCode = mCode & "        ""ParentTable"", " & vbCrLf
    mCode = mCode & "        {""Value""}, " & vbCrLf
    mCode = mCode & "        {""Parent""}" & vbCrLf
    mCode = mCode & "    )," & vbCrLf
    mCode = mCode & "    #""Cleaned Columns"" = Table.SelectColumns(#""Expanded parent"", {""RowIndex"", ""leadingSpaces"", ""Value"", ""Parent""})" & vbCrLf
    mCode = mCode & "in" & vbCrLf
    mCode = mCode & "    #""Cleaned Columns"""
    
    BuildParentChildQueryText = mCode
    
    LogMessage "BuildParentChildQueryText", "INFO", "M code built for range: " & namedRange
    Exit Function

errHandler:
    LogError "BuildParentChildQueryText", Err.Number, Err.Description
    BuildParentChildQueryText = ""
End Function


'--------------------------------------------------------------------------------------------
' LOGGING
'--------------------------------------------------------------------------------------------
Public Sub LogMessage(procName As String, msgType As String, message As String)
    Dim wsLog As Worksheet
    Dim nxtRow As Long
    
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("Log")
    On Error GoTo 0
    
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "Log"
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "Procedure"
        wsLog.Range("C1").Value = "Type"
        wsLog.Range("D1").Value = "Message"
    End If
    
    nxtRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    wsLog.Cells(nxtRow, 1).Value = Format(Now, "yyyy-mm-dd HH:mm:ss")
    wsLog.Cells(nxtRow, 2).Value = procName
    wsLog.Cells(nxtRow, 3).Value = msgType
    wsLog.Cells(nxtRow, 4).Value = message
    
    If UCase(msgType) = "ERROR" Then
        wsLog.Range("A" & nxtRow & ":D" & nxtRow).Interior.Color = RGB(255, 200, 200)
    Else
        wsLog.Range("A" & nxtRow & ":D" & nxtRow).Interior.Color = xlNone
    End If
End Sub

Public Sub LogError(procName As String, errNumber As Long, errDescription As String)
    LogMessage procName, "ERROR", "Error #" & errNumber & ": " & errDescription
End Sub
