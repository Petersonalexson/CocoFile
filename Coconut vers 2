Option Explicit

'--------------------------------------------------------------------------------------------
' MAIN WORKFLOW: Refresh Smart View hierarchies, then build queries (no output sheets)
'--------------------------------------------------------------------------------------------
Public Sub RefreshSmartViewHierarchiesAndCreateQueries()
    On Error GoTo errHandler
    
    LogMessage "RefreshSmartViewHierarchiesAndCreateQueries", "INFO", "Process started."
    
    ' 1) Refresh Smart View hierarchies
    RefreshSmartViewHierarchies
    
    ' 2) Create or update Power Queries named <SheetName>_Query
    CreateOrUpdateQueries
    
    LogMessage "RefreshSmartViewHierarchiesAndCreateQueries", "INFO", "Process completed successfully."
    Exit Sub
    
errHandler:
    LogMessage "RefreshSmartViewHierarchiesAndCreateQueries", "ERROR", _
               "Unhandled error: " & Err.Number & " - " & Err.Description
End Sub


'--------------------------------------------------------------------------------------------
' 1) REFRESH SMART VIEW HIERARCHIES
'    Deletes old rows, zooms in, recreates named ranges.
'    Also handles "Tree" vs "List" logic from Column D of Hierarchy_Matrix.
'--------------------------------------------------------------------------------------------
Public Sub RefreshSmartViewHierarchies()
    On Error GoTo errHandler
    
    Dim wsLists        As Worksheet
    Dim arrSheets      As Variant
    Dim ws             As Worksheet
    Dim ConnectionName As String
    Dim Ret            As Long
    Dim ConnStatus     As Long
    Dim HeaderRow      As Long
    Dim LastRow        As Long
    Dim i              As Long
    
    LogMessage "RefreshSmartViewHierarchies", "INFO", "Starting hierarchy refresh..."
    
    ' 1) Locate "Lists" sheet
    Set wsLists = Nothing
    On Error Resume Next
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    On Error GoTo errHandler
    
    If wsLists Is Nothing Then
        LogMessage "RefreshSmartViewHierarchies", "ERROR", "No sheet named 'Lists' found."
        Exit Sub
    End If
    
    ' 2) Read named ranges
    ConnectionName = Trim(wsLists.Range("nmConnectionName").Value)
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    
    If Len(ConnectionName) = 0 Then
        LogMessage "RefreshSmartViewHierarchies", "ERROR", "'nmConnectionName' is empty or missing."
        Exit Sub
    End If
    If IsEmpty(arrSheets) Then
        LogMessage "RefreshSmartViewHierarchies", "ERROR", "'Hierarchy_Matrix' is empty or missing."
        Exit Sub
    End If
    
    ' 3) Assume the table header row is 4
    HeaderRow = 4
    
    ' 4) Performance tweaks
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' 5) Process each row in Hierarchy_Matrix
    Dim totalRows As Long
    totalRows = UBound(arrSheets, 1) - LBound(arrSheets, 1) + 1
    LogMessage "RefreshSmartViewHierarchies", "INFO", _
               "Found " & totalRows & " hierarchy entries to process."
    
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        
        Dim targetSheetName As String
        Dim rangeName       As String
        Dim treeOrList      As String
        Dim skipRows        As Long
        
        targetSheetName = Trim(arrSheets(i, 1))  ' Sheet name (col A)
        rangeName       = Trim(arrSheets(i, 2))  ' Named range  (col B)
        ' We assume col D has "Tree" or "List"
        '   If it's "Tree", skipRows=1
        '   If it's "List", skipRows=2
        treeOrList      = vbNullString
        On Error Resume Next
        treeOrList = Trim(arrSheets(i, 4))       ' "Tree" or "List" from Column D
        On Error GoTo 0
        
        If targetSheetName = "" Or rangeName = "" Then
            LogMessage "RefreshSmartViewHierarchies", "INFO", _
                       "Skipping row " & i & " because sheet name or range name is blank."
            GoTo NextItem
        End If
        
        ' Determine how many "bottom" rows to keep
        skipRows = 1    ' default for "Tree"
        If LCase(treeOrList) = "list" Then skipRows = 2
        
        ' Attempt to get the worksheet
        Set ws = Nothing
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(targetSheetName)
        On Error GoTo errHandler
        
        If ws Is Nothing Then
            LogMessage "RefreshSmartViewHierarchies", "ERROR", _
                       "Sheet '" & targetSheetName & "' not found. Skipping."
            GoTo NextItem
        End If
        
        ' Connect to Smart View
        Ret = HypUIConnect(ws.Name, "", "", ConnectionName)
        ConnStatus = HypConnected(ws.Name)
        
        If ConnStatus <> -1 Then
            LogMessage "RefreshSmartViewHierarchies", "ERROR", _
                       "Could not connect Smart View on sheet '" & ws.Name & "'."
            GoTo NextItem
        End If
        
        LogMessage "RefreshSmartViewHierarchies", "INFO", _
                   "Connected to Smart View on sheet '" & ws.Name & "', skipRows=" & skipRows & ", Mode=" & treeOrList
        
        ' Delete old hierarchy rows except the last 'skipRows' rows
        With ws
            LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
            If LastRow > HeaderRow Then
                Dim deleteUntil As Long
                deleteUntil = LastRow - skipRows
                If deleteUntil >= HeaderRow Then
                    .Rows(HeaderRow & ":" & deleteUntil).Delete Shift:=xlUp
                End If
            End If
            
            ' Recalc last row
            LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
            
            ' Optional: set member display
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            
            ' Zoom in from bottom cell
            Ret = HypZoomIn(.Name, .Range("A" & LastRow), 1, False)
            
            ' Recalc last row after zoom
            LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
            
            ' Recreate the named range
            On Error Resume Next
            ThisWorkbook.Names(rangeName).Delete
            On Error GoTo errHandler
            
            ThisWorkbook.Names.Add _
                Name:=rangeName, _
                RefersTo:="='" & .Name & "'!A" & HeaderRow & ":A" & LastRow
        End With
        
        LogMessage "RefreshSmartViewHierarchies", "INFO", _
                   "Named range '" & rangeName & "' reset on sheet '" & ws.Name & "'."
        
NextItem:
        Set ws = Nothing
    Next i
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    LogMessage "RefreshSmartViewHierarchies", "INFO", "Hierarchy refresh completed."
    Exit Sub
    
errHandler:
    LogMessage "RefreshSmartViewHierarchies", "ERROR", _
               "Unhandled error: " & Err.Number & " - " & Err.Description
    ' Attempt to restore environment
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub


'--------------------------------------------------------------------------------------------
' 2) CREATE OR UPDATE QUERIES (NO OUTPUT SHEETS!)
'    We create or update queries named <SheetName>_Query in the workbook, referencing named ranges
'--------------------------------------------------------------------------------------------
Public Sub CreateOrUpdateQueries()
    On Error GoTo errHandler
    
    Dim wsLists     As Worksheet
    Dim arrSheets   As Variant
    Dim i           As Long
    
    LogMessage "CreateOrUpdateQueries", "INFO", "Starting query creation/update..."
    
    ' 1) Find the "Lists" sheet
    Set wsLists = Nothing
    On Error Resume Next
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    On Error GoTo errHandler
    
    If wsLists Is Nothing Then
        LogMessage "CreateOrUpdateQueries", "ERROR", "No sheet named 'Lists'."
        Exit Sub
    End If
    
    ' 2) Read Hierarchy_Matrix
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    If IsEmpty(arrSheets) Then
        LogMessage "CreateOrUpdateQueries", "ERROR", "'Hierarchy_Matrix' is empty or missing."
        Exit Sub
    End If
    
    ' 3) Performance settings
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' 4) For each row, build or update a query named <SheetName>_Query
    Dim totalRows As Long
    totalRows = UBound(arrSheets, 1) - LBound(arrSheets, 1) + 1
    LogMessage "CreateOrUpdateQueries", "INFO", "Found " & totalRows & " items to create queries for."
    
    Dim sheetName As String, rangeName As String, queryName As String, queryText As String
    Dim existingConn As Boolean
    Dim conn As WorkbookConnection
    
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        
        sheetName = Trim(arrSheets(i, 1))
        rangeName = Trim(arrSheets(i, 2))
        
        ' If blank, skip
        If sheetName = "" Or rangeName = "" Then
            LogMessage "CreateOrUpdateQueries", "INFO", _
                       "Skipping row " & i & " because of blank sheet or range name."
            GoTo NextItem
        End If
        
        ' The query name is <SheetName>_Query
        queryName = sheetName & "_Query"
        
        ' Check if named range actually exists
        Dim namedRangeExists As Boolean: namedRangeExists = False
        On Error Resume Next
        If Not ThisWorkbook.Names(rangeName) Is Nothing Then
            namedRangeExists = True
        End If
        On Error GoTo errHandler
        
        If Not namedRangeExists Then
            LogMessage "CreateOrUpdateQueries", "ERROR", _
                       "Named range '" & rangeName & "' not found. Did you refresh hierarchies?"
            GoTo NextItem
        End If
        
        ' Build the M script for this named range
        queryText = BuildQueryText(rangeName)
        
        ' Check if a connection named <sheetName>_Query already exists
        existingConn = False
        For Each conn In ThisWorkbook.Connections
            If conn.Name = queryName Then
                existingConn = True
                Exit For
            End If
        Next conn
        
        ' If it exists, try updating the M formula
        If existingConn Then
            On Error Resume Next
            ThisWorkbook.Queries(queryName).Formula = queryText
            If Err.Number <> 0 Then
                ' If fails, remove old connection & recreate
                ThisWorkbook.Connections(queryName).Delete
                existingConn = False
            End If
            Err.Clear
            On Error GoTo errHandler
            
            If existingConn Then
                LogMessage "CreateOrUpdateQueries", "INFO", _
                           "Updated existing query '" & queryName & "'."
            End If
        End If
        
        ' If it doesn't exist, create a new query
        If Not existingConn Then
            On Error Resume Next
            ThisWorkbook.Queries.Add Name:=queryName, Formula:=queryText
            If Err.Number <> 0 Then
                LogMessage "CreateOrUpdateQueries", "ERROR", _
                           "Error creating query '" & queryName & "': " & Err.Description
                GoTo NextItem
            End If
            Err.Clear
            On Error GoTo errHandler
            
            LogMessage "CreateOrUpdateQueries", "INFO", "Created new query '" & queryName & "'."
        End If
        
NextItem:
        ' Move to the next
    Next i
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    LogMessage "CreateOrUpdateQueries", "INFO", "Query creation/update completed."
    Exit Sub
    
errHandler:
    LogMessage "CreateOrUpdateQueries", "ERROR", _
               "Unhandled error: " & Err.Number & " - " & Err.Description
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub


'--------------------------------------------------------------------------------------------
' FUNCTION: BuildQueryText(rangeName As String)
' This uses your advanced M snippet for "ERP hierarchy with parent" plus your helper functions.
'--------------------------------------------------------------------------------------------
Public Function BuildQueryText(rangeName As String) As String
    Dim mCode As String
    
    mCode = ""
    mCode = mCode & "let" & vbCrLf
    mCode = mCode & "    // All helper functions + main function in one script," & vbCrLf
    
    ' fnGetListOfLevelsColumns
    mCode = mCode & "    fnGetListOfLevelsColumns = (data_table as table) as list =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            columns_names = List.Buffer(Table.ColumnNames(data_table))," & vbCrLf
    mCode = mCode & "            filter_level_rows = List.Select(columns_names, each Text.StartsWith(Text.Lower(_), ""level ""))" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            filter_level_rows," & vbCrLf & vbCrLf
    
    ' fnGetMinLevel
    mCode = mCode & "    fnGetMinLevel = (data_table as table) as number =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            get_list_of_columns = Table.ColumnNames(data_table)," & vbCrLf
    mCode = mCode & "            convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    mCode = mCode & "            filtered_levels = Table.SelectRows(convert_list_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf
    mCode = mCode & "            split_by_space = Table.SplitColumn(filtered_levels, ""Column1"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Column1.1"", ""Column1.2""})," & vbCrLf
    mCode = mCode & "            convert_to_number = Table.TransformColumnTypes(split_by_space, {{""Column1.2"", Int64.Type}})," & vbCrLf
    mCode = mCode & "            min_level = List.Min(convert_to_number[Column1.2])" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            min_level," & vbCrLf & vbCrLf
    
    ' fnGetMaxLevel
    mCode = mCode & "    fnGetMaxLevel = (data_table as table) as number =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            get_list_of_columns = Table.ColumnNames(data_table)," & vbCrLf
    mCode = mCode & "            convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    mCode = mCode & "            filtered_levels = Table.SelectRows(convert_list_to_table, each Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf
    mCode = mCode & "            split_by_space = Table.SplitColumn(filtered_levels, ""Column1"", Splitter.SplitTextByEachDelimiter({"" ""}, QuoteStyle.None, true), {""Column1.1"", ""Column1.2""})," & vbCrLf
    mCode = mCode & "            convert_to_number = Table.TransformColumnTypes(split_by_space, {{""Column1.2"", Int64.Type}})," & vbCrLf
    mCode = mCode & "            max_level = List.Max(convert_to_number[Column1.2])" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            max_level," & vbCrLf & vbCrLf
    
    ' fnGetListOfNonLevelsColumns
    mCode = mCode & "    fnGetListOfNonLevelsColumns = (data_table as table) as list =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            get_list_of_columns = List.Buffer(Table.ColumnNames(data_table))," & vbCrLf
    mCode = mCode & "            convert_list_to_table = Table.FromList(get_list_of_columns, Splitter.SplitByNothing(), null, null, ExtraValues.Ignore)," & vbCrLf
    mCode = mCode & "            filtered_columns = Table.SelectRows(convert_list_to_table, each not Text.StartsWith(Text.Lower([Column1]), ""level""))," & vbCrLf
    mCode = mCode & "            convert_to_list = filtered_columns[Column1]" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            convert_to_list," & vbCrLf & vbCrLf
    
    ' fnUnflattenHierarchy
    mCode = mCode & "    fnUnflattenHierarchy = (data_table as table, value_column_name as text) as table =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            Source = data_table," & vbCrLf
    mCode = mCode & "            added_index_from_1 = Table.AddIndexColumn(Source, ""GP_Idx"", 0, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "            demote_headers = Table.DemoteHeaders(added_index_from_1)," & vbCrLf
    mCode = mCode & "            transpose_table = Table.Transpose(demote_headers)," & vbCrLf
    mCode = mCode & "            column_names = Table.ColumnNames(transpose_table)," & vbCrLf
    mCode = mCode & "            replace_empty_by_null = Table.ReplaceValue(transpose_table, """", null, Replacer.ReplaceValue, column_names)," & vbCrLf
    mCode = mCode & "            first_fill_down = Table.FillDown(replace_empty_by_null, column_names)," & vbCrLf
    mCode = mCode & "            transpose_table_back = Table.Transpose(first_fill_down)," & vbCrLf
    mCode = mCode & "            promote_headers = Table.PromoteHeaders(transpose_table_back, [PromoteAllScalars=true])," & vbCrLf
    mCode = mCode & "            list_of_levels = fnGetListOfLevelsColumns(Source)," & vbCrLf
    mCode = mCode & "            second_fill_down = Table.FillDown(promote_headers, list_of_levels)," & vbCrLf
    mCode = mCode & "            min_level = fnGetMinLevel(Source)," & vbCrLf
    mCode = mCode & "            max_level = fnGetMaxLevel(Source)," & vbCrLf
    mCode = mCode & "            Min_Level_Column_Name = ""Level "" & Number.ToText(min_level)," & vbCrLf
    mCode = mCode & "            Max_Level_Column_Name = ""Level "" & Number.ToText(max_level)," & vbCrLf
    mCode = mCode & "            Columns_Not_To_Unpivot = fnGetListOfNonLevelsColumns(Source)," & vbCrLf
    mCode = mCode & "            unpivoted_levels_columns =" & vbCrLf
    mCode = mCode & "                Table.UnpivotOtherColumns(" & vbCrLf
    mCode = mCode & "                    second_fill_down," & vbCrLf
    mCode = mCode & "                    List.Combine({{Max_Level_Column_Name, ""GP_Idx""}, Columns_Not_To_Unpivot})," & vbCrLf
    mCode = mCode & "                    ""Attribute""," & vbCrLf
    mCode = mCode & "                    ""NameID""" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            check_if_direct_parent =" & vbCrLf
    mCode = mCode & "                Table.AddColumn(" & vbCrLf
    mCode = mCode & "                    unpivoted_levels_columns," & vbCrLf
    mCode = mCode & "                    ""Direct Parent""," & vbCrLf
    mCode = mCode & "                    each if Record.Field(_, Max_Level_Column_Name) = [NameID] then ""no"" else ""yes""" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            filter_first_level_rows_without_parents =" & vbCrLf
    mCode = mCode & "                Table.SelectRows(" & vbCrLf
    mCode = mCode & "                    check_if_direct_parent," & vbCrLf
    mCode = mCode & "                    each ([Direct Parent] = ""no"") and ([Attribute] = Min_Level_Column_Name)" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            replace_parent_by_null =" & vbCrLf
    mCode = mCode & "                Table.ReplaceValue(" & vbCrLf
    mCode = mCode & "                    filter_first_level_rows_without_parents," & vbCrLf
    mCode = mCode & "                    each [NameID]," & vbCrLf
    mCode = mCode & "                    null," & vbCrLf
    mCode = mCode & "                    Replacer.ReplaceValue," & vbCrLf
    mCode = mCode & "                    {""NameID""}" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            filter_rows_with_parents =" & vbCrLf
    mCode = mCode & "                Table.SelectRows(" & vbCrLf
    mCode = mCode & "                    check_if_direct_parent," & vbCrLf
    mCode = mCode & "                    each ([Direct Parent] = ""yes"")" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            append_level_0_with_others =" & vbCrLf
    mCode = mCode & "                Table.Combine({replace_parent_by_null, filter_rows_with_parents})," & vbCrLf
    mCode = mCode & "            duplicate_attribute_column =" & vbCrLf
    mCode = mCode & "                Table.DuplicateColumn(append_level_0_with_others, ""Attribute"", ""Attribute2"")," & vbCrLf
    mCode = mCode & "            split_to_remove_labels =" & vbCrLf
    mCode = mCode & "                Table.SplitColumn(" & vbCrLf
    mCode = mCode & "                    duplicate_attribute_column," & vbCrLf
    mCode = mCode & "                    ""Attribute2""," & vbCrLf
    mCode = mCode & "                    Splitter.SplitTextByDelimiter("" "", QuoteStyle.None, true)," & vbCrLf
    mCode = mCode & "                    {""Attribute2.1"", ""Attribute2.2""}" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            convert_to_a_number =" & vbCrLf
    mCode = mCode & "                Table.TransformColumnTypes(split_to_remove_labels, {{""Attribute2.2"", Int64.Type}})," & vbCrLf
    mCode = mCode & "            get_max_level_for_each_value =" & vbCrLf
    mCode = mCode & "                Table.Group(" & vbCrLf
    mCode = mCode & "                    convert_to_a_number," & vbCrLf
    mCode = mCode & "                    {Max_Level_Column_Name}," & vbCrLf
    mCode = mCode & "                    {{""Max"", each List.Max([Attribute2.2]), type nullable number}}" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            convert_max_level_to_text =" & vbCrLf
    mCode = mCode & "                Table.TransformColumnTypes(get_max_level_for_each_value, {{""Max"", type text}})," & vbCrLf
    mCode = mCode & "            added_labels_back =" & vbCrLf
    mCode = mCode & "                Table.AddColumn(convert_max_level_to_text, ""Unique Level"", each ""Level"" & [Max])," & vbCrLf
    mCode = mCode & "            merge_queries_to_filter =" & vbCrLf
    mCode = mCode & "                Table.NestedJoin(" & vbCrLf
    mCode = mCode & "                    append_level_0_with_others," & vbCrLf
    mCode = mCode & "                    {Max_Level_Column_Name, ""Attribute""}," & vbCrLf
    mCode = mCode & "                    added_labels_back," & vbCrLf
    mCode = mCode & "                    {Max_Level_Column_Name, ""Unique Level""}," & vbCrLf
    mCode = mCode & "                    ""TableToExpand""," & vbCrLf
    mCode = mCode & "                    JoinKind.LeftOuter" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            max_level_expanded_column_name = Max_Level_Column_Name & ""_expanded""," & vbCrLf
    mCode = mCode & "            expand_the_merged_result =" & vbCrLf
    mCode = mCode & "                Table.ExpandTableColumn(" & vbCrLf
    mCode = mCode & "                    merge_queries_to_filter," & vbCrLf
    mCode = mCode & "                    ""TableToExpand""," & vbCrLf
    mCode = mCode & "                    {Max_Level_Column_Name}," & vbCrLf
    mCode = mCode & "                    {max_level_expanded_column_name}" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            sorted_rows = Table.Sort(expand_the_merged_result, {{""GP_Idx"", Order.Ascending}})," & vbCrLf
    mCode = mCode & "            remove_nulls = Table.SelectRows(sorted_rows, each Record.Field(_, max_level_expanded_column_name) <> null)," & vbCrLf
    mCode = mCode & "            removed_columns = Table.RemoveColumns(remove_nulls, {max_level_expanded_column_name, ""Attribute"", ""Direct Parent"", ""GP_Idx"", value_column_name})," & vbCrLf
    mCode = mCode & "            renamed_columns =" & vbCrLf
    mCode = mCode & "                Table.RenameColumns(" & vbCrLf
    mCode = mCode & "                    removed_columns," & vbCrLf
    mCode = mCode & "                    {{Max_Level_Column_Name, value_column_name}, {""NameID"", ""Parent""}}" & vbCrLf
    mCode = mCode & "                )" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            renamed_columns," & vbCrLf & vbCrLf
    
    ' fnGetERPHierarchySmartViewParent
    mCode = mCode & "    fnGetERPHierarchySmartViewParent = (range_name as text) as table =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            Source = Excel.CurrentWorkbook(){[Name=range_name]}[Content]," & vbCrLf
    mCode = mCode & "            remove_nulls = Table.SelectRows(Source, each [Column1] <> null and [Column1] <> """")," & vbCrLf
    mCode = mCode & "            #""Duplicated Column"" = Table.DuplicateColumn(remove_nulls, ""Column1"", ""Value"")," & vbCrLf
    mCode = mCode & "            #""Added Custom"" = Table.AddColumn(#""Duplicated Column"", ""Nb Levels"", each List.Count(Text.PositionOfAny([Value], {"" ""}, Occurrence.All))/5, Int64.Type)," & vbCrLf
    mCode = mCode & "            #""Trimmed Text"" = Table.TransformColumns(#""Added Custom"", {{""Value"", Text.Trim, type text}})," & vbCrLf
    mCode = mCode & "            #""Changed Type"" = Table.TransformColumnTypes(#""Trimmed Text"", {{""Column1"", type text}})," & vbCrLf
    mCode = mCode & "            #""Added Index"" = Table.AddIndexColumn(#""Changed Type"", ""Index"", 1, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "            #""Sorted Rows"" = Table.Sort(#""Added Index"", {{""Index"", Order.Descending}})," & vbCrLf
    mCode = mCode & "            max_levels = List.Max(#""Sorted Rows""[Nb Levels])," & vbCrLf
    mCode = mCode & "            list_of_code_levels =" & vbCrLf
    mCode = mCode & "                List.Generate(" & vbCrLf
    mCode = mCode & "                    () => 0," & vbCrLf
    mCode = mCode & "                    each _ <= max_levels," & vbCrLf
    mCode = mCode & "                    each _ + 1," & vbCrLf
    mCode = mCode & "                    each ""Level "" & Text.From(_)" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            #""Split Column by Delimiter"" =" & vbCrLf
    mCode = mCode & "                Table.SplitColumn(" & vbCrLf
    mCode = mCode & "                    #""Sorted Rows""," & vbCrLf
    mCode = mCode & "                    ""Column1""," & vbCrLf
    mCode = mCode & "                    Splitter.SplitTextByDelimiter("" "", QuoteStyle.Csv)," & vbCrLf
    mCode = mCode & "                    list_of_code_levels" & vbCrLf
    mCode = mCode & "                )," & vbCrLf
    mCode = mCode & "            #""Removed Columns1"" = Table.RemoveColumns(#""Split Column by Delimiter"", {""Level 0"", ""Index"", ""Nb Levels""})," & vbCrLf
    mCode = mCode & "            #""Removed Top Rows"" = Table.Skip(#""Removed Columns1"", 1)," & vbCrLf
    mCode = mCode & "            result = fnUnflattenHierarchy(#""Removed Top Rows"", ""Value"")" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            result," & vbCrLf & vbCrLf
    
    mCode = mCode & "    // Return the final table from fnGetERPHierarchySmartViewParent" & vbCrLf
    mCode = mCode & "    Output = fnGetERPHierarchySmartViewParent(""" & rangeName & """)" & vbCrLf
    mCode = mCode & "in" & vbCrLf
    mCode = mCode & "    Output"
    
    BuildQueryText = mCode
End Function


'--------------------------------------------------------------------------------------------
' LOGGING SYSTEM
'  - Ensures there's a "Log" sheet
'  - Appends a row with [Timestamp, Procedure, Type, Message]
'  - Errors get highlighted in red
'--------------------------------------------------------------------------------------------
Public Sub LogMessage(ByVal procName As String, ByVal msgType As String, ByVal msg As String)
    Dim wsLog As Worksheet
    Dim nextRow As Long
    
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("Log")
    On Error GoTo 0
    
    If wsLog Is Nothing Then
        ' Create a Log sheet if it doesn't exist
        Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "Log"
        ' Add headers
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "Procedure"
        wsLog.Range("C1").Value = "Type"
        wsLog.Range("D1").Value = "Message"
    End If
    
    ' Find the next empty row
    nextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Write log entry
    wsLog.Cells(nextRow, 1).Value = Format(Now, "yyyy-mm-dd HH:mm:ss")
    wsLog.Cells(nextRow, 2).Value = procName
    wsLog.Cells(nextRow, 3).Value = msgType
    wsLog.Cells(nextRow, 4).Value = msg
    
    ' If it's an ERROR, highlight it
    If UCase(msgType) = "ERROR" Then
        wsLog.Range("A" & nextRow & ":D" & nextRow).Interior.Color = RGB(255, 200, 200)
    Else
        wsLog.Range("A" & nextRow & ":D" & nextRow).Interior.Color = xlNone
    End If
End Sub
