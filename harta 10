Option Explicit

' --------------------------------------------------------------------------------------
' 1) Checks if a sheet named sheetName exists in workbook wb.
' --------------------------------------------------------------------------------------
Private Function SheetExists(sheetName As String, wb As Workbook) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    SheetExists = Not (ws Is Nothing)
    On Error GoTo 0
End Function

' --------------------------------------------------------------------------------------
' 2) Creates and returns a new log sheet with a unique name, e.g. TEST_LOG_2, TEST_LOG_3, etc.
' --------------------------------------------------------------------------------------
Private Function CreateNewLogSheet(wb As Workbook) As Worksheet
    Dim newSheet As Worksheet
    Dim baseName As String
    Dim suffix As Long
    
    baseName = "TEST_LOG"
    suffix = 2
    
    ' Keep incrementing suffix until we find a name that doesn't exist
    Do While SheetExists(baseName & "_" & suffix, wb)
        suffix = suffix + 1
    Loop
    
    ' Create and name the new sheet
    Set newSheet = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
    newSheet.Name = baseName & "_" & suffix
    
    Set CreateNewLogSheet = newSheet
End Function

' --------------------------------------------------------------------------------------
' 3) Writes a line to the log. If the logRow exceeds Excel's max rows (1048576),
'    it automatically creates a new log sheet and resets the logRow.
' --------------------------------------------------------------------------------------
Private Sub WriteLog(ByRef logSheet As Worksheet, ByRef logRow As Long, stepName As String, details As String)
    
    ' Check if we've run out of rows on this sheet
    If logRow > 1048576 Then
        ' Create a new log sheet in the same workbook
        Set logSheet = CreateNewLogSheet(logSheet.Parent)
        
        ' Initialize headers on the new sheet
        With logSheet
            .Cells(1, 1).Value = "Timestamp"
            .Cells(1, 2).Value = "Step"
            .Cells(1, 3).Value = "Details"
        End With
        logRow = 2
    End If
    
    ' Now write to the log
    logSheet.Cells(logRow, 1).Value = Now
    logSheet.Cells(logRow, 2).Value = stepName
    logSheet.Cells(logRow, 3).Value = details
End Sub

' --------------------------------------------------------------------------------------
' 4) Finds and returns the column number whose header (row 1) contains headerText.
'    If not found, returns 0.
' --------------------------------------------------------------------------------------
Private Function FindColumnByHeader(ws As Worksheet, headerText As String) As Long
    Dim lastCol As Long, i As Long
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    For i = 1 To lastCol
        If InStr(1, ws.Cells(1, i).Text, headerText, vbTextCompare) > 0 Then
            FindColumnByHeader = i
            Exit Function
        End If
    Next i
    
    FindColumnByHeader = 0
End Function

' --------------------------------------------------------------------------------------
' 5) Main procedure to process data from MAP to BUDGET (XRP & FORECAST).
'    Logs every step to TEST_LOG and creates new log sheets if it exceeds row limit.
' --------------------------------------------------------------------------------------
Sub ProcessExpensesData()
    ' Define variables
    Dim mapWB As Workbook
    Dim budgetWB As Workbook
    Dim mapSheet As Worksheet
    Dim xrpSheet As Worksheet
    Dim forecastSheet As Worksheet
    Dim logSheet As Worksheet
    Dim amountDict As Object
    Dim mapPath As String
    Dim logRow As Long
    
    Application.ScreenUpdating = False
    
    ' Create dictionary object
    Set amountDict = CreateObject("Scripting.Dictionary")
    
    ' Error handling
    On Error GoTo ErrorHandler
    
    ' Set reference to current workbook (BUDGET)
    Set budgetWB = ThisWorkbook
    
    ' Create or clear TEST_LOG sheet
    On Error Resume Next
    Set logSheet = budgetWB.Sheets("TEST_LOG")
    On Error GoTo 0
    
    If logSheet Is Nothing Then
        Set logSheet = budgetWB.Sheets.Add(After:=budgetWB.Sheets(budgetWB.Sheets.Count))
        logSheet.Name = "TEST_LOG"
    Else
        logSheet.Cells.Clear
    End If
    
    ' Initialize log headers on the first TEST_LOG sheet
    With logSheet
        .Cells(1, 1).Value = "Timestamp"
        .Cells(1, 2).Value = "Step"
        .Cells(1, 3).Value = "Details"
    End With
    logRow = 2
    
    ' Log start
    WriteLog logSheet, logRow, "Start", "Beginning process"
    logRow = logRow + 1
    
    ' Set hardcoded path for MAP.xlsx
    mapPath = "C:\Users\alexp\OneDrive\Desktop\MAP.xlsx"
    WriteLog logSheet, logRow, "Path", "MAP path: " & mapPath
    logRow = logRow + 1
    
    ' Open MAP workbook
    Set mapWB = Workbooks.Open(mapPath)
    
    ' Hardcode the MAP sheet name here
    Set mapSheet = mapWB.Sheets("MY_MAP_SHEET_NAME")
    
    WriteLog logSheet, logRow, "Open MAP", "Successfully opened MAP.xlsx, Sheet: " & mapSheet.Name
    logRow = logRow + 1
    
    ' Locate XRP and FORECAST sheets in BUDGET
    Set xrpSheet = budgetWB.Sheets("XRP")
    Set forecastSheet = budgetWB.Sheets("FORECAST")
    WriteLog logSheet, logRow, "Sheets", "Located XRP and FORECAST sheets in BUDGET"
    logRow = logRow + 1
    
    ' Get column indices for MAP
    Dim mapDescCol As Long, mapAccountCol As Long
    mapDescCol = FindColumnByHeader(mapSheet, "desc")
    mapAccountCol = FindColumnByHeader(mapSheet, "account")
    
    WriteLog logSheet, logRow, "MAP Columns", _
             "desc col: " & mapDescCol & ", account col: " & mapAccountCol
    logRow = logRow + 1
    
    ' Get allowed accounts from MAP worksheet where desc = "expenses"
    Dim allowedAccounts As New Collection
    Dim lastRow As Long, i As Long
    lastRow = mapSheet.Cells(mapSheet.Rows.Count, mapAccountCol).End(xlUp).Row
    
    WriteLog logSheet, logRow, "MAP Rows", "Last row in MAP: " & lastRow
    logRow = logRow + 1
    
    For i = 1 To lastRow
        If LCase(Trim(mapSheet.Cells(i, mapDescCol).Value)) = "expenses" Then
            On Error Resume Next
            allowedAccounts.Add Trim(mapSheet.Cells(i, mapAccountCol).Value)
            WriteLog logSheet, logRow, "Allowed Account", _
                     "Found account: " & Trim(mapSheet.Cells(i, mapAccountCol).Value)
            logRow = logRow + 1
            On Error GoTo ErrorHandler
        End If
    Next i
    
    WriteLog logSheet, logRow, "Accounts Summary", _
             "Found " & allowedAccounts.Count & " allowed accounts"
    logRow = logRow + 1
    
    ' Process XRP sheet
    Dim xrpAccountCol As Long, xrpCenterCol As Long, xrpAmountCol As Long
    xrpAccountCol = FindColumnByHeader(xrpSheet, "account")
    xrpCenterCol = FindColumnByHeader(xrpSheet, "CENTER")
    xrpAmountCol = FindColumnByHeader(xrpSheet, "AMOUNT")
    
    WriteLog logSheet, logRow, "XRP Columns", _
             "account col: " & xrpAccountCol & _
             ", CENTER col: " & xrpCenterCol & _
             ", AMOUNT col: " & xrpAmountCol
    logRow = logRow + 1
    
    lastRow = xrpSheet.Cells(xrpSheet.Rows.Count, xrpAccountCol).End(xlUp).Row
    WriteLog logSheet, logRow, "XRP Rows", "Last row in XRP: " & lastRow
    logRow = logRow + 1
    
    ' Clear dictionary before populating
    Set amountDict = CreateObject("Scripting.Dictionary")
    
    ' Aggregate amounts by Center Code
    Dim matchCount As Long
    matchCount = 0
    
    Dim accountVal As String, centerVal As String
    Dim amtValue As Double
    Dim acc As Variant
    
    For i = 2 To lastRow
        accountVal = Trim(CStr(xrpSheet.Cells(i, xrpAccountCol).Value))
        centerVal = Trim(CStr(xrpSheet.Cells(i, xrpCenterCol).Value))
        
        ' Check if account is in allowed accounts
        Dim isAllowed As Boolean
        isAllowed = False
        
        For Each acc In allowedAccounts
            If acc = accountVal Then
                isAllowed = True
                WriteLog logSheet, logRow, "Match Found", _
                         "Row " & i & ": Account " & accountVal & " matches allowed account"
                logRow = logRow + 1
                matchCount = matchCount + 1
                Exit For
            End If
        Next acc
        
        If isAllowed Then
            amtValue = xrpSheet.Cells(i, xrpAmountCol).Value
            
            If amountDict.Exists(centerVal) Then
                amountDict(centerVal) = amountDict(centerVal) + amtValue
            Else
                amountDict.Add centerVal, amtValue
            End If
            WriteLog logSheet, logRow, "Amount Added", _
                     "Center " & centerVal & ": Added amount " & amtValue & _
                     " (Total: " & amountDict(centerVal) & ")"
            logRow = logRow + 1
        End If
    Next i
    
    WriteLog logSheet, logRow, "Dictionary Summary", _
             "Dictionary contains " & amountDict.Count & " centers. Found " & matchCount & " matching rows"
    logRow = logRow + 1
    
    ' Log dictionary contents
    Dim key As Variant
    For Each key In amountDict.Keys
        WriteLog logSheet, logRow, "Center Total", _
                 "Center: " & key & ", Total Amount: " & amountDict(key)
        logRow = logRow + 1
    Next key
    
    ' Process FORECAST sheet
    lastRow = forecastSheet.UsedRange.Rows.Count
    Dim lastCol As Long
    lastCol = forecastSheet.UsedRange.Columns.Count
    
    WriteLog logSheet, logRow, "FORECAST Dimensions", _
             "Last row: " & lastRow & ", Last col: " & lastCol
    logRow = logRow + 1
    
    Dim row As Long
    row = 1
    Dim updatedCount As Long
    updatedCount = 0
    
    Dim octFound As Boolean
    Dim octCol As Long
    Dim headerRow As Long
    Dim j As Long
    Dim cellText As String
    
    ' Loop to find "October" in blocks
    Do While row <= lastRow
        octFound = False
        
        For i = row To Application.Min(row + 10, lastRow)
            For j = 1 To lastCol
                cellText = CStr(forecastSheet.Cells(i, j).Value)
                
                WriteLog logSheet, logRow, "Scanning", _
                         "Row " & i & ", Col " & j & ": '" & cellText & "'"
                logRow = logRow + 1
                
                If InStr(1, cellText, "October", vbTextCompare) > 0 Then
                    octFound = True
                    octCol = j
                    headerRow = i
                    WriteLog logSheet, logRow, "October Header", _
                             "Found 'October' at row " & i & ", col " & j
                    logRow = logRow + 1
                    Exit For
                End If
            Next j
            If octFound Then Exit For
        Next i
        
        If Not octFound Then
            WriteLog logSheet, logRow, "October Search", _
                     "No more 'October' headers found after row " & row
            logRow = logRow + 1
            Exit Do
        End If
        
        ' Find center code within next ~3 rows
        Dim centerFound As Boolean
        Dim centerCode As String
        Dim centerRow As Long
        centerFound = False
        
        For i = headerRow - 2 To headerRow + 3
            If i > 0 Then
                For j = 1 To lastCol
                    centerCode = Trim(CStr(forecastSheet.Cells(i, j).Value))
                    
                    WriteLog logSheet, logRow, "Checking Cell", _
                             "Row " & i & ", Col " & j & ": '" & centerCode & "'"
                    logRow = logRow + 1
                    
                    If amountDict.Exists(centerCode) Then
                        centerFound = True
                        centerRow = i
                        WriteLog logSheet, logRow, "Center Found", _
                                 "Found Center Code '" & centerCode & "' at row " & i
                        logRow = logRow + 1
                        Exit For
                    End If
                Next j
                If centerFound Then Exit For
            End If
        Next i
        
        If centerFound Then
            ' Find "Expenses" row
            Dim expFound As Boolean
            Dim expRow As Long
            expFound = False
            
            For i = centerRow To Application.Min(centerRow + 5, lastRow)
                For j = 1 To lastCol
                    cellText = CStr(forecastSheet.Cells(i, j).Value)
                    If InStr(1, cellText, "Expenses", vbTextCompare) > 0 Then
                        expFound = True
                        expRow = i
                        
                        WriteLog logSheet, logRow, "Expenses Row", _
                                 "Found 'Expenses' at row " & i
                        logRow = logRow + 1
                        Exit For
                    End If
                Next j
                If expFound Then Exit For
            Next i
            
            If expFound Then
                ' Update the amount value
                Dim newValue As Double
                newValue = amountDict(centerCode)
                
                forecastSheet.Cells(expRow, octCol).Value = newValue
                updatedCount = updatedCount + 1
                
                WriteLog logSheet, logRow, "Update", _
                         "Updated expenses for " & centerCode & _
                         " at row " & expRow & ", col " & octCol & _
                         " with value " & newValue
                logRow = logRow + 1
            Else
                WriteLog logSheet, logRow, "Error", _
                         "Could not find Expenses row for Center Code " & centerCode
                logRow = logRow + 1
            End If
        Else
            WriteLog logSheet, logRow, "Error", _
                     "No valid Center Code found near October at row " & headerRow
            logRow = logRow + 1
        End If
        
        row = headerRow + 1
    Loop
    
    WriteLog logSheet, logRow, "Complete", _
             "Updated " & updatedCount & " center expense values"
    logRow = logRow + 1
    
    ' Format log sheet (only do this for the final sheet used)
    With logSheet.Range("A1:C1")
        .Font.Bold = True
        .Interior.Color = RGB(200, 200, 200)
    End With
    logSheet.Columns("A:C").AutoFit
    
    mapWB.Close False
    Application.ScreenUpdating = True
    
    MsgBox "Processing complete! Updated " & updatedCount & " center expense values." & vbNewLine & _
           "Check TEST_LOG sheet(s) for detailed processing information.", vbInformation
    Exit Sub

' -----------------------------
' Error Handling
' -----------------------------
ErrorHandler:
    If Not logSheet Is Nothing Then
        WriteLog logSheet, logRow, "ERROR", "Error " & Err.Number & ": " & Err.Description
        logRow = logRow + 1
    End If
    
    MsgBox "Error " & Err.Number & ": " & Err.Description & vbNewLine & _
           "Check TEST_LOG sheet(s) for details.", vbCritical
    
    On Error Resume Next
    If Not mapWB Is Nothing Then mapWB.Close False
    Application.ScreenUpdating = True
End Sub
