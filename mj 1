Option Explicit

'--------------------------------------------------------------------------------------------
' MAIN WRAPPER
' 1) Refresh each sheet via Smart View
' 2) For each sheet, skip final row(s) if D7 says "Tree"/"List", and update named range
' 3) Create/Update queries named "<SheetName>_FlatTable" using indentation-based M code
'--------------------------------------------------------------------------------------------
Public Sub RefreshBuildArraysParentChild()
    On Error GoTo errHandler
    
    LogMessage "RefreshBuildArraysParentChild", "INFO", "Process started."
    Application.StatusBar = "Starting Smart View refresh..."
    
    ' 1) Smart View refresh
    RefreshSmartViewHierarchies
    
    ' 2) Update the named ranges to skip final row(s)
    Application.StatusBar = "Updating named ranges..."
    UpdateNamedRanges_SkipRows
    
    ' 3) Create or update queries referencing those named ranges
    Application.StatusBar = "Creating flat table queries..."
    CreateOrUpdateFlatTableQueries
    
    Application.StatusBar = "Process completed successfully!"
    LogMessage "RefreshBuildArraysParentChild", "INFO", "Process completed successfully."
    Application.StatusBar = False
    Exit Sub

errHandler:
    LogError "RefreshBuildArraysParentChild", Err.Number, Err.Description
    Application.StatusBar = False
    MsgBox "An error occurred: " & Err.Description, vbExclamation, "Process Error"
End Sub


'--------------------------------------------------------------------------------------------
' CREATE OR UPDATE QUERIES NAMED "<SheetName>_FlatTable"
'   - M code references that named range, uses indentation-based parent detection
'--------------------------------------------------------------------------------------------
Public Sub CreateOrUpdateFlatTableQueries()
    On Error GoTo errHandler
    
    LogMessage "CreateOrUpdateFlatTableQueries", "INFO", "Starting to create/update queries <SheetName>_FlatTable..."
    
    Dim wsLists  As Worksheet
    Dim arrSheets As Variant
    Dim i        As Long
    
    On Error Resume Next
    Set wsLists = ThisWorkbook.Worksheets("Lists")
    On Error GoTo errHandler
    
    If wsLists Is Nothing Then
        LogError "CreateOrUpdateFlatTableQueries", 0, "No 'Lists' sheet found."
        MsgBox "ERROR: No 'Lists' sheet found.", vbCritical
        Exit Sub
    End If
    
    arrSheets = wsLists.Range("Hierarchy_Matrix").Value
    If IsEmpty(arrSheets) Then
        LogError "CreateOrUpdateFlatTableQueries", 0, "'Hierarchy_Matrix' missing or empty."
        MsgBox "ERROR: 'Hierarchy_Matrix' missing or empty.", vbCritical
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim totalRows As Long
    totalRows = UBound(arrSheets, 1) - LBound(arrSheets, 1) + 1
    LogMessage "CreateOrUpdateFlatTableQueries", "INFO", _
               "Found " & totalRows & " row(s) in Hierarchy_Matrix."
    
    Dim sheetName As String, rangeName As String
    Dim finalQueryName As String
    Dim queryText As String
    Dim existingConn As Boolean
    Dim c As WorkbookConnection
    
    For i = LBound(arrSheets, 1) To UBound(arrSheets, 1)
        sheetName = Trim(arrSheets(i, 1))
        rangeName = Trim(arrSheets(i, 2))
        
        If sheetName = "" Or rangeName = "" Then
            LogMessage "CreateOrUpdateFlatTableQueries", "INFO", _
                       "Skipping row " & i & " - blank sheet or range."
            GoTo NextItem
        End If
        
        ' Check if the named range exists
        Dim rangeExists As Boolean
        rangeExists = False
        On Error Resume Next
        If Not ThisWorkbook.Names(rangeName) Is Nothing Then
            rangeExists = True
        End If
        On Error GoTo errHandler
        
        If Not rangeExists Then
            LogError "CreateOrUpdateFlatTableQueries", 0, "Named range '" & rangeName & "' doesn't exist."
            GoTo NextItem
        End If
        
        finalQueryName = sheetName & "_FlatTable"
        
        ' Set status bar to show which query is processing
        Application.StatusBar = "Processing query: " & finalQueryName & " (" & i & " of " & totalRows & ")"
        
        ' Build M code referencing "rangeName"
        queryText = BuildImprovedQueryText(rangeName)
        If queryText = "" Then
            LogError "CreateOrUpdateFlatTableQueries", 0, _
                     "M code generation failed for " & rangeName
            GoTo NextItem
        End If
        
        existingConn = False
        For Each c In ThisWorkbook.Connections
            If c.Name = finalQueryName Then
                existingConn = True
                Exit For
            End If
        Next c
        
        If existingConn Then
            On Error Resume Next
            ThisWorkbook.Queries(finalQueryName).Formula = queryText
            If Err.Number <> 0 Then
                LogError "CreateOrUpdateFlatTableQueries", Err.Number, _
                         "Error updating query: " & finalQueryName & " - " & Err.Description
                ' remove old
                ThisWorkbook.Connections(finalQueryName).Delete
                existingConn = False
            End If
            Err.Clear
            On Error GoTo errHandler
        End If
        
        If Not existingConn Then
            On Error Resume Next
            ThisWorkbook.Queries.Add Name:=finalQueryName, Formula:=queryText
            If Err.Number <> 0 Then
                LogError "CreateOrUpdateFlatTableQueries", Err.Number, _
                         "Error creating query: " & finalQueryName & " - " & Err.Description
                GoTo NextItem
            End If
            Err.Clear
            On Error GoTo errHandler
        End If
        
        LogMessage "CreateOrUpdateFlatTableQueries", "INFO", _
                   "Processed query: " & finalQueryName
        
NextItem:
        DoEvents  ' Allow UI to update and prevent freezing
    Next i
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    LogMessage "CreateOrUpdateFlatTableQueries", "INFO", "Finished creating/updating <SheetName>_FlatTable queries."
    Exit Sub

errHandler:
    LogError "CreateOrUpdateFlatTableQueries", Err.Number, Err.Description
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub


'--------------------------------------------------------------------------------------------
' IMPROVED M CODE: For better performance with indentation detection
'--------------------------------------------------------------------------------------------
Public Function BuildImprovedQueryText(namedRange As String) As String
    On Error GoTo errHandler
    
    LogMessage "BuildImprovedQueryText", "INFO", "Building M code for range: " & namedRange
    
    Dim mCode As String
    
    mCode = mCode & "let" & vbCrLf
    mCode = mCode & "    Source = Excel.CurrentWorkbook(){[Name=""" & namedRange & """]}[Content]," & vbCrLf
    mCode = mCode & "    // Filter out null rows and empty strings" & vbCrLf
    mCode = mCode & "    filtered_source = Table.SelectRows(Source, each [Column1] <> null and [Column1] <> """")," & vbCrLf
    mCode = mCode & "    // Add row index for tracking position" & vbCrLf
    mCode = mCode & "    #""Add RowIndex"" = Table.AddIndexColumn(filtered_source, ""RowIndex"", 0, 1, Int64.Type)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Calculate indentation (leading spaces)" & vbCrLf
    mCode = mCode & "    #""Added Indentation"" = Table.AddColumn(#""Add RowIndex"", ""Indentation"", each " & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            text = [Column1]," & vbCrLf
    mCode = mCode & "            trimmed = Text.TrimStart(text)," & vbCrLf
    mCode = mCode & "            leadingSpaces = Text.Length(text) - Text.Length(trimmed)" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            leadingSpaces" & vbCrLf
    mCode = mCode & "    , Int64.Type)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Extract the actual value by trimming" & vbCrLf
    mCode = mCode & "    #""Added Value"" = Table.AddColumn(#""Added Indentation"", ""Value"", each Text.Trim([Column1]), type text)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Create working table with essential columns only" & vbCrLf
    mCode = mCode & "    working_table = Table.SelectColumns(#""Added Value"", {""RowIndex"", ""Indentation"", ""Value""})," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // For performance, buffer the table" & vbCrLf
    mCode = mCode & "    buffered_table = Table.Buffer(working_table)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Find parent based on indentation" & vbCrLf
    mCode = mCode & "    #""With ParentID"" = Table.AddColumn(buffered_table, ""ParentID"", (row) =>" & vbCrLf
    mCode = mCode & "        let" & vbCrLf
    mCode = mCode & "            // Current row details" & vbCrLf
    mCode = mCode & "            currentIndent = row[Indentation]," & vbCrLf
    mCode = mCode & "            currentIndex = row[RowIndex]," & vbCrLf
    mCode = mCode & "            " & vbCrLf
    mCode = mCode & "            // Find candidate parents (rows above with less indentation)" & vbCrLf
    mCode = mCode & "            candidateParents = Table.SelectRows(" & vbCrLf
    mCode = mCode & "                buffered_table, " & vbCrLf
    mCode = mCode & "                each [RowIndex] < currentIndex and [Indentation] < currentIndent" & vbCrLf
    mCode = mCode & "            )," & vbCrLf
    mCode = mCode & "            " & vbCrLf
    mCode = mCode & "            // Sort candidates by indentation (descending) and then by index (descending)" & vbCrLf
    mCode = mCode & "            sortedCandidates = Table.Sort(" & vbCrLf
    mCode = mCode & "                candidateParents, " & vbCrLf
    mCode = mCode & "                {{""Indentation"", Order.Descending}, {""RowIndex"", Order.Descending}}" & vbCrLf
    mCode = mCode & "            )," & vbCrLf
    mCode = mCode & "            " & vbCrLf
    mCode = mCode & "            // Get closest parent" & vbCrLf
    mCode = mCode & "            parentRow = if Table.IsEmpty(sortedCandidates) then null else sortedCandidates{0}," & vbCrLf
    mCode = mCode & "            parentID = if parentRow = null then null else parentRow[RowIndex]" & vbCrLf
    mCode = mCode & "        in" & vbCrLf
    mCode = mCode & "            parentID" & vbCrLf
    mCode = mCode & "    , Int64.Type)," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Join with parent to get parent values" & vbCrLf
    mCode = mCode & "    #""Joined With Parent"" = Table.NestedJoin(" & vbCrLf
    mCode = mCode & "        #""With ParentID"", " & vbCrLf
    mCode = mCode & "        {""ParentID""}, " & vbCrLf
    mCode = mCode & "        #""With ParentID"", " & vbCrLf
    mCode = mCode & "        {""RowIndex""}, " & vbCrLf
    mCode = mCode & "        ""ParentTable"", " & vbCrLf
    mCode = mCode & "        JoinKind.LeftOuter" & vbCrLf
    mCode = mCode & "    )," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Expand parent value" & vbCrLf
    mCode = mCode & "    #""Expanded Parent"" = Table.ExpandTableColumn(" & vbCrLf
    mCode = mCode & "        #""Joined With Parent"", " & vbCrLf
    mCode = mCode & "        ""ParentTable"", " & vbCrLf
    mCode = mCode & "        {""Value""}, " & vbCrLf
    mCode = mCode & "        {""Parent""}" & vbCrLf
    mCode = mCode & "    )," & vbCrLf
    mCode = mCode & "" & vbCrLf
    mCode = mCode & "    // Select only needed columns" & vbCrLf
    mCode = mCode & "    #""Final Result"" = Table.SelectColumns(#""Expanded Parent"", {""RowIndex"", ""Indentation"", ""Value"", ""Parent""})" & vbCrLf
    mCode = mCode & "in" & vbCrLf
    mCode = mCode & "    #""Final Result"""
    
    BuildImprovedQueryText = mCode
    
    LogMessage "BuildImprovedQueryText", "INFO", "M code built for range: " & namedRange
    Exit Function

errHandler:
    LogError "BuildImprovedQueryText", Err.Number, Err.Description
    BuildImprovedQueryText = ""
End Function


'--------------------------------------------------------------------------------------------
' LOGGING
'--------------------------------------------------------------------------------------------
Public Sub LogMessage(procName As String, msgType As String, message As String)
    Dim wsLog As Worksheet
    Dim nxtRow As Long
    
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("Log")
    On Error GoTo 0
    
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "Log"
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "Procedure"
        wsLog.Range("C1").Value = "Type"
        wsLog.Range("D1").Value = "Message"
        wsLog.Range("A1:D1").Font.Bold = True
    End If
    
    nxtRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    wsLog.Cells(nxtRow, 1).Value = Format(Now, "yyyy-mm-dd HH:mm:ss")
    wsLog.Cells(nxtRow, 2).Value = procName
    wsLog.Cells(nxtRow, 3).Value = msgType
    wsLog.Cells(nxtRow, 4).Value = message
    
    If UCase(msgType) = "ERROR" Then
        wsLog.Range("A" & nxtRow & ":D" & nxtRow).Interior.Color = RGB(255, 200, 200)
    Else
        wsLog.Range("A" & nxtRow & ":D" & nxtRow).Interior.Color = xlNone
    End If
    
    ' Auto-fit columns so all message text is visible
    wsLog.Columns("A:D").AutoFit
End Sub

Public Sub LogError(procName As String, errNumber As Long, errDescription As String)
    LogMessage procName, "ERROR", "Error #" & errNumber & ": " & errDescription
End Sub
